/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlockOperationNew
    /// </summary>
    [DataContract]
    public partial class BlockOperationNew :  IEquatable<BlockOperationNew>, IValidatableObject
    {
        /// <summary>
        /// The type of action to perform. &#x60;GET&#x60; to fetch world blocks, &#x60;UPDATE&#x60; to change world blocks.
        /// </summary>
        /// <value>The type of action to perform. &#x60;GET&#x60; to fetch world blocks, &#x60;UPDATE&#x60; to change world blocks.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum GET for "GET"
            /// </summary>
            [EnumMember(Value = "GET")]
            GET,
            
            /// <summary>
            /// Enum UPDATE for "UPDATE"
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATE
        }

        /// <summary>
        /// The type of action to perform. &#x60;GET&#x60; to fetch world blocks, &#x60;UPDATE&#x60; to change world blocks.
        /// </summary>
        /// <value>The type of action to perform. &#x60;GET&#x60; to fetch world blocks, &#x60;UPDATE&#x60; to change world blocks.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockOperationNew" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockOperationNew() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockOperationNew" /> class.
        /// </summary>
        /// <param name="Type">The type of action to perform. &#x60;GET&#x60; to fetch world blocks, &#x60;UPDATE&#x60; to change world blocks. (required).</param>
        /// <param name="World">The UUID of the world that the block update is applied to.  Either the property &#x60;block&#x60; or &#x60;blocks&#x60; has to be set.  If the property &#x60;block&#x60; is set then all the blocks within the area defined by &#x60;min&#x60; and &#x60;max&#x60; are changed to the specified block.  If the property &#x60;blocks&#x60; is set then it defines nested arrays of the blocks within the area defined by &#x60;min&#x60; and &#x60;max&#x60;. The arrays should contain the blocks such that a block located at [min.X + x, min.Y + y, min.Z + z] can be accessed by &#x60;blocks[x][y][z]&#x60;, where &#x60;min&#x60; is the vecotor defined by the &#x60;min&#x60; property.  (required).</param>
        /// <param name="Min">Min (required).</param>
        /// <param name="Max">Max (required).</param>
        /// <param name="Block">Block.</param>
        /// <param name="Blocks">Blocks.</param>
        public BlockOperationNew(TypeEnum? Type = default(TypeEnum?), string World = default(string), Vector3 Min = default(Vector3), Vector3 Max = default(Vector3), BlockFull Block = default(BlockFull), List<List<List<BlockFull>>> Blocks = default(List<List<List<BlockFull>>>))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for BlockOperationNew and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "World" is required (not null)
            if (World == null)
            {
                throw new InvalidDataException("World is a required property for BlockOperationNew and cannot be null");
            }
            else
            {
                this.World = World;
            }
            // to ensure "Min" is required (not null)
            if (Min == null)
            {
                throw new InvalidDataException("Min is a required property for BlockOperationNew and cannot be null");
            }
            else
            {
                this.Min = Min;
            }
            // to ensure "Max" is required (not null)
            if (Max == null)
            {
                throw new InvalidDataException("Max is a required property for BlockOperationNew and cannot be null");
            }
            else
            {
                this.Max = Max;
            }
            this.Block = Block;
            this.Blocks = Blocks;
        }
        

        /// <summary>
        /// The UUID of the world that the block update is applied to.  Either the property &#x60;block&#x60; or &#x60;blocks&#x60; has to be set.  If the property &#x60;block&#x60; is set then all the blocks within the area defined by &#x60;min&#x60; and &#x60;max&#x60; are changed to the specified block.  If the property &#x60;blocks&#x60; is set then it defines nested arrays of the blocks within the area defined by &#x60;min&#x60; and &#x60;max&#x60;. The arrays should contain the blocks such that a block located at [min.X + x, min.Y + y, min.Z + z] can be accessed by &#x60;blocks[x][y][z]&#x60;, where &#x60;min&#x60; is the vecotor defined by the &#x60;min&#x60; property. 
        /// </summary>
        /// <value>The UUID of the world that the block update is applied to.  Either the property &#x60;block&#x60; or &#x60;blocks&#x60; has to be set.  If the property &#x60;block&#x60; is set then all the blocks within the area defined by &#x60;min&#x60; and &#x60;max&#x60; are changed to the specified block.  If the property &#x60;blocks&#x60; is set then it defines nested arrays of the blocks within the area defined by &#x60;min&#x60; and &#x60;max&#x60;. The arrays should contain the blocks such that a block located at [min.X + x, min.Y + y, min.Z + z] can be accessed by &#x60;blocks[x][y][z]&#x60;, where &#x60;min&#x60; is the vecotor defined by the &#x60;min&#x60; property. </value>
        [DataMember(Name="world", EmitDefaultValue=false)]
        public string World { get; set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public Vector3 Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public Vector3 Max { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public BlockFull Block { get; set; }

        /// <summary>
        /// Gets or Sets Blocks
        /// </summary>
        [DataMember(Name="blocks", EmitDefaultValue=false)]
        public List<List<List<BlockFull>>> Blocks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockOperationNew {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  World: ").Append(World).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BlockOperationNew);
        }

        /// <summary>
        /// Returns true if BlockOperationNew instances are equal
        /// </summary>
        /// <param name="other">Instance of BlockOperationNew to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockOperationNew other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.World == other.World ||
                    this.World != null &&
                    this.World.Equals(other.World)
                ) && 
                (
                    this.Min == other.Min ||
                    this.Min != null &&
                    this.Min.Equals(other.Min)
                ) && 
                (
                    this.Max == other.Max ||
                    this.Max != null &&
                    this.Max.Equals(other.Max)
                ) && 
                (
                    this.Block == other.Block ||
                    this.Block != null &&
                    this.Block.Equals(other.Block)
                ) && 
                (
                    this.Blocks == other.Blocks ||
                    this.Blocks != null &&
                    this.Blocks.SequenceEqual(other.Blocks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.World != null)
                    hash = hash * 59 + this.World.GetHashCode();
                if (this.Min != null)
                    hash = hash * 59 + this.Min.GetHashCode();
                if (this.Max != null)
                    hash = hash * 59 + this.Max.GetHashCode();
                if (this.Block != null)
                    hash = hash * 59 + this.Block.GetHashCode();
                if (this.Blocks != null)
                    hash = hash * 59 + this.Blocks.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
