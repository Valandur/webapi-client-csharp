/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MMCTicketsTicket
    /// </summary>
    [DataContract]
    public partial class MMCTicketsTicket :  IEquatable<MMCTicketsTicket>, IValidatableObject
    {
        /// <summary>
        /// The current status of the ticket
        /// </summary>
        /// <value>The current status of the ticket</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Open for value: Open
            /// </summary>
            [EnumMember(Value = "Open")]
            Open = 1,
            
            /// <summary>
            /// Enum Claimed for value: Claimed
            /// </summary>
            [EnumMember(Value = "Claimed")]
            Claimed = 2,
            
            /// <summary>
            /// Enum Held for value: Held
            /// </summary>
            [EnumMember(Value = "Held")]
            Held = 3,
            
            /// <summary>
            /// Enum Closed for value: Closed
            /// </summary>
            [EnumMember(Value = "Closed")]
            Closed = 4
        }

        /// <summary>
        /// The current status of the ticket
        /// </summary>
        /// <value>The current status of the ticket</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MMCTicketsTicket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MMCTicketsTicket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MMCTicketsTicket" /> class.
        /// </summary>
        /// <param name="Id">The unique id of this ticket (required).</param>
        /// <param name="Message">The message sent along with this ticket (required).</param>
        /// <param name="Status">The current status of the ticket (required).</param>
        /// <param name="Timestamp">The unix timestamp (in seconds) when this ticket was submitted (required).</param>
        /// <param name="Comment">The comment added by staff to this ticket.</param>
        /// <param name="Location">The location at which this ticket was submitted.</param>
        /// <param name="Notified">True if staff has been notified about this ticket, false otherwise.</param>
        /// <param name="Sender">The sender of this ticket.</param>
        /// <param name="Staff">The staff member that was assigned to this ticket.</param>
        public MMCTicketsTicket(int? Id = default(int?), string Message = default(string), StatusEnum Status = default(StatusEnum), long? Timestamp = default(long?), string Comment = default(string), Location Location = default(Location), int? Notified = default(int?), Player Sender = default(Player), Player Staff = default(Player))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for MMCTicketsTicket and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Message" is required (not null)
            if (Message == null)
            {
                throw new InvalidDataException("Message is a required property for MMCTicketsTicket and cannot be null");
            }
            else
            {
                this.Message = Message;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for MMCTicketsTicket and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Timestamp" is required (not null)
            if (Timestamp == null)
            {
                throw new InvalidDataException("Timestamp is a required property for MMCTicketsTicket and cannot be null");
            }
            else
            {
                this.Timestamp = Timestamp;
            }
            this.Comment = Comment;
            this.Location = Location;
            this.Notified = Notified;
            this.Sender = Sender;
            this.Staff = Staff;
        }
        
        /// <summary>
        /// The unique id of this ticket
        /// </summary>
        /// <value>The unique id of this ticket</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The API link that can be used to obtain more information about this object
        /// </summary>
        /// <value>The API link that can be used to obtain more information about this object</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; private set; }

        /// <summary>
        /// The message sent along with this ticket
        /// </summary>
        /// <value>The message sent along with this ticket</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }


        /// <summary>
        /// The unix timestamp (in seconds) when this ticket was submitted
        /// </summary>
        /// <value>The unix timestamp (in seconds) when this ticket was submitted</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// The comment added by staff to this ticket
        /// </summary>
        /// <value>The comment added by staff to this ticket</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The location at which this ticket was submitted
        /// </summary>
        /// <value>The location at which this ticket was submitted</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// True if staff has been notified about this ticket, false otherwise
        /// </summary>
        /// <value>True if staff has been notified about this ticket, false otherwise</value>
        [DataMember(Name="notified", EmitDefaultValue=false)]
        public int? Notified { get; set; }

        /// <summary>
        /// The sender of this ticket
        /// </summary>
        /// <value>The sender of this ticket</value>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public Player Sender { get; set; }

        /// <summary>
        /// The staff member that was assigned to this ticket
        /// </summary>
        /// <value>The staff member that was assigned to this ticket</value>
        [DataMember(Name="staff", EmitDefaultValue=false)]
        public Player Staff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MMCTicketsTicket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Notified: ").Append(Notified).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Staff: ").Append(Staff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MMCTicketsTicket);
        }

        /// <summary>
        /// Returns true if MMCTicketsTicket instances are equal
        /// </summary>
        /// <param name="input">Instance of MMCTicketsTicket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MMCTicketsTicket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Notified == input.Notified ||
                    (this.Notified != null &&
                    this.Notified.Equals(input.Notified))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Staff == input.Staff ||
                    (this.Staff != null &&
                    this.Staff.Equals(input.Staff))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Notified != null)
                    hashCode = hashCode * 59 + this.Notified.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Staff != null)
                    hashCode = hashCode * 59 + this.Staff.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
