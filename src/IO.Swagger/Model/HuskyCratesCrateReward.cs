/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HuskyCratesCrateReward
    /// </summary>
    [DataContract]
    public partial class HuskyCratesCrateReward :  IEquatable<HuskyCratesCrateReward>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HuskyCratesCrateReward" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HuskyCratesCrateReward() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HuskyCratesCrateReward" /> class.
        /// </summary>
        /// <param name="Announce">True if this reward is announced in chat, false otherwise (required).</param>
        /// <param name="Chance">The chance to aquire this reward. This is relative to the chances of the other rewards in this crate (required).</param>
        /// <param name="DisplayItem">The ItemStack that is shown in the UI (required).</param>
        /// <param name="Name">The name of this reward (required).</param>
        /// <param name="Objects">The objects that are rewarded as part of this reward (can be commands and/or items) (required).</param>
        public HuskyCratesCrateReward(bool? Announce = default(bool?), double? Chance = default(double?), ItemStack DisplayItem = default(ItemStack), string Name = default(string), List<HuskyCratesCrateRewardObject> Objects = default(List<HuskyCratesCrateRewardObject>))
        {
            // to ensure "Announce" is required (not null)
            if (Announce == null)
            {
                throw new InvalidDataException("Announce is a required property for HuskyCratesCrateReward and cannot be null");
            }
            else
            {
                this.Announce = Announce;
            }
            // to ensure "Chance" is required (not null)
            if (Chance == null)
            {
                throw new InvalidDataException("Chance is a required property for HuskyCratesCrateReward and cannot be null");
            }
            else
            {
                this.Chance = Chance;
            }
            // to ensure "DisplayItem" is required (not null)
            if (DisplayItem == null)
            {
                throw new InvalidDataException("DisplayItem is a required property for HuskyCratesCrateReward and cannot be null");
            }
            else
            {
                this.DisplayItem = DisplayItem;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for HuskyCratesCrateReward and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Objects" is required (not null)
            if (Objects == null)
            {
                throw new InvalidDataException("Objects is a required property for HuskyCratesCrateReward and cannot be null");
            }
            else
            {
                this.Objects = Objects;
            }
        }
        
        /// <summary>
        /// True if this reward is announced in chat, false otherwise
        /// </summary>
        /// <value>True if this reward is announced in chat, false otherwise</value>
        [DataMember(Name="announce", EmitDefaultValue=false)]
        public bool? Announce { get; set; }

        /// <summary>
        /// The chance to aquire this reward. This is relative to the chances of the other rewards in this crate
        /// </summary>
        /// <value>The chance to aquire this reward. This is relative to the chances of the other rewards in this crate</value>
        [DataMember(Name="chance", EmitDefaultValue=false)]
        public double? Chance { get; set; }

        /// <summary>
        /// The ItemStack that is shown in the UI
        /// </summary>
        /// <value>The ItemStack that is shown in the UI</value>
        [DataMember(Name="displayItem", EmitDefaultValue=false)]
        public ItemStack DisplayItem { get; set; }

        /// <summary>
        /// The name of this reward
        /// </summary>
        /// <value>The name of this reward</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The objects that are rewarded as part of this reward (can be commands and/or items)
        /// </summary>
        /// <value>The objects that are rewarded as part of this reward (can be commands and/or items)</value>
        [DataMember(Name="objects", EmitDefaultValue=false)]
        public List<HuskyCratesCrateRewardObject> Objects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HuskyCratesCrateReward {\n");
            sb.Append("  Announce: ").Append(Announce).Append("\n");
            sb.Append("  Chance: ").Append(Chance).Append("\n");
            sb.Append("  DisplayItem: ").Append(DisplayItem).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Objects: ").Append(Objects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HuskyCratesCrateReward);
        }

        /// <summary>
        /// Returns true if HuskyCratesCrateReward instances are equal
        /// </summary>
        /// <param name="input">Instance of HuskyCratesCrateReward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HuskyCratesCrateReward input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Announce == input.Announce ||
                    (this.Announce != null &&
                    this.Announce.Equals(input.Announce))
                ) && 
                (
                    this.Chance == input.Chance ||
                    (this.Chance != null &&
                    this.Chance.Equals(input.Chance))
                ) && 
                (
                    this.DisplayItem == input.DisplayItem ||
                    (this.DisplayItem != null &&
                    this.DisplayItem.Equals(input.DisplayItem))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Objects == input.Objects ||
                    this.Objects != null &&
                    this.Objects.SequenceEqual(input.Objects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Announce != null)
                    hashCode = hashCode * 59 + this.Announce.GetHashCode();
                if (this.Chance != null)
                    hashCode = hashCode * 59 + this.Chance.GetHashCode();
                if (this.DisplayItem != null)
                    hashCode = hashCode * 59 + this.DisplayItem.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Objects != null)
                    hashCode = hashCode * 59 + this.Objects.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
