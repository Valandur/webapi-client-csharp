/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HuskyCratesCrate
    /// </summary>
    [DataContract]
    public partial class HuskyCratesCrate :  IEquatable<HuskyCratesCrate>, IValidatableObject
    {
        /// <summary>
        /// The type of crate
        /// </summary>
        /// <value>The type of crate</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Spinner for value: Spinner
            /// </summary>
            [EnumMember(Value = "Spinner")]
            Spinner = 1,
            
            /// <summary>
            /// Enum Roulette for value: Roulette
            /// </summary>
            [EnumMember(Value = "Roulette")]
            Roulette = 2,
            
            /// <summary>
            /// Enum Instant for value: Instant
            /// </summary>
            [EnumMember(Value = "Instant")]
            Instant = 3,
            
            /// <summary>
            /// Enum Simple for value: Simple
            /// </summary>
            [EnumMember(Value = "Simple")]
            Simple = 4
        }

        /// <summary>
        /// The type of crate
        /// </summary>
        /// <value>The type of crate</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HuskyCratesCrate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HuskyCratesCrate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HuskyCratesCrate" /> class.
        /// </summary>
        /// <param name="Free">True if this crate is free to open, false otherwise (required).</param>
        /// <param name="FreeDelay">In case this crate is free, this interval specifies the time (in seconds) after which this crate can be opened again (required).</param>
        /// <param name="Id">The unique id of this crate (required).</param>
        /// <param name="Name">The name of the crate (required).</param>
        /// <param name="Rewards">The possible rewards awarded for opening this crate (required).</param>
        /// <param name="ScrambleRewards">True if the rewards are scrambled, false otherwise (required).</param>
        /// <param name="Type">The type of crate (required).</param>
        public HuskyCratesCrate(bool? Free = default(bool?), int? FreeDelay = default(int?), string Id = default(string), string Name = default(string), List<HuskyCratesCrateReward> Rewards = default(List<HuskyCratesCrateReward>), bool? ScrambleRewards = default(bool?), TypeEnum Type = default(TypeEnum))
        {
            // to ensure "Free" is required (not null)
            if (Free == null)
            {
                throw new InvalidDataException("Free is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.Free = Free;
            }
            // to ensure "FreeDelay" is required (not null)
            if (FreeDelay == null)
            {
                throw new InvalidDataException("FreeDelay is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.FreeDelay = FreeDelay;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Rewards" is required (not null)
            if (Rewards == null)
            {
                throw new InvalidDataException("Rewards is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.Rewards = Rewards;
            }
            // to ensure "ScrambleRewards" is required (not null)
            if (ScrambleRewards == null)
            {
                throw new InvalidDataException("ScrambleRewards is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.ScrambleRewards = ScrambleRewards;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for HuskyCratesCrate and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
        }
        
        /// <summary>
        /// True if this crate is free to open, false otherwise
        /// </summary>
        /// <value>True if this crate is free to open, false otherwise</value>
        [DataMember(Name="free", EmitDefaultValue=false)]
        public bool? Free { get; set; }

        /// <summary>
        /// In case this crate is free, this interval specifies the time (in seconds) after which this crate can be opened again
        /// </summary>
        /// <value>In case this crate is free, this interval specifies the time (in seconds) after which this crate can be opened again</value>
        [DataMember(Name="freeDelay", EmitDefaultValue=false)]
        public int? FreeDelay { get; set; }

        /// <summary>
        /// The unique id of this crate
        /// </summary>
        /// <value>The unique id of this crate</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The API link that can be used to obtain more information about this object
        /// </summary>
        /// <value>The API link that can be used to obtain more information about this object</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; private set; }

        /// <summary>
        /// The name of the crate
        /// </summary>
        /// <value>The name of the crate</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The possible rewards awarded for opening this crate
        /// </summary>
        /// <value>The possible rewards awarded for opening this crate</value>
        [DataMember(Name="rewards", EmitDefaultValue=false)]
        public List<HuskyCratesCrateReward> Rewards { get; set; }

        /// <summary>
        /// True if the rewards are scrambled, false otherwise
        /// </summary>
        /// <value>True if the rewards are scrambled, false otherwise</value>
        [DataMember(Name="scrambleRewards", EmitDefaultValue=false)]
        public bool? ScrambleRewards { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HuskyCratesCrate {\n");
            sb.Append("  Free: ").Append(Free).Append("\n");
            sb.Append("  FreeDelay: ").Append(FreeDelay).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  ScrambleRewards: ").Append(ScrambleRewards).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HuskyCratesCrate);
        }

        /// <summary>
        /// Returns true if HuskyCratesCrate instances are equal
        /// </summary>
        /// <param name="input">Instance of HuskyCratesCrate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HuskyCratesCrate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Free == input.Free ||
                    (this.Free != null &&
                    this.Free.Equals(input.Free))
                ) && 
                (
                    this.FreeDelay == input.FreeDelay ||
                    (this.FreeDelay != null &&
                    this.FreeDelay.Equals(input.FreeDelay))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                ) && 
                (
                    this.ScrambleRewards == input.ScrambleRewards ||
                    (this.ScrambleRewards != null &&
                    this.ScrambleRewards.Equals(input.ScrambleRewards))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Free != null)
                    hashCode = hashCode * 59 + this.Free.GetHashCode();
                if (this.FreeDelay != null)
                    hashCode = hashCode * 59 + this.FreeDelay.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                if (this.ScrambleRewards != null)
                    hashCode = hashCode * 59 + this.ScrambleRewards.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
