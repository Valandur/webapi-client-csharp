/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WorldFullBorder
    /// </summary>
    [DataContract]
    public partial class WorldFullBorder :  IEquatable<WorldFullBorder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorldFullBorder" /> class.
        /// </summary>
        /// <param name="Center">Center.</param>
        /// <param name="Diameter">The diameter of the world border..</param>
        /// <param name="DamageAmount">The amount of damage done to the player when outside the world border..</param>
        /// <param name="DamageThreshold">The amount of time in seconds to wait before applying the damage..</param>
        /// <param name="NewDiameter">The new diameter the world border is going to change to..</param>
        /// <param name="TimeRemaining">The amount of time remaining before the world border reaches the new diameter..</param>
        /// <param name="WarningDistance">The distance at which a player is warned of the world border..</param>
        /// <param name="WarningTime">The amount of time in seconds before a contracting world border reaches a player that the player is warned..</param>
        public WorldFullBorder(Vector3 Center = default(Vector3), decimal? Diameter = default(decimal?), decimal? DamageAmount = default(decimal?), decimal? DamageThreshold = default(decimal?), decimal? NewDiameter = default(decimal?), decimal? TimeRemaining = default(decimal?), decimal? WarningDistance = default(decimal?), decimal? WarningTime = default(decimal?))
        {
            this.Center = Center;
            this.Diameter = Diameter;
            this.DamageAmount = DamageAmount;
            this.DamageThreshold = DamageThreshold;
            this.NewDiameter = NewDiameter;
            this.TimeRemaining = TimeRemaining;
            this.WarningDistance = WarningDistance;
            this.WarningTime = WarningTime;
        }
        
        /// <summary>
        /// Gets or Sets Center
        /// </summary>
        [DataMember(Name="center", EmitDefaultValue=false)]
        public Vector3 Center { get; set; }

        /// <summary>
        /// The diameter of the world border.
        /// </summary>
        /// <value>The diameter of the world border.</value>
        [DataMember(Name="diameter", EmitDefaultValue=false)]
        public decimal? Diameter { get; set; }

        /// <summary>
        /// The amount of damage done to the player when outside the world border.
        /// </summary>
        /// <value>The amount of damage done to the player when outside the world border.</value>
        [DataMember(Name="damageAmount", EmitDefaultValue=false)]
        public decimal? DamageAmount { get; set; }

        /// <summary>
        /// The amount of time in seconds to wait before applying the damage.
        /// </summary>
        /// <value>The amount of time in seconds to wait before applying the damage.</value>
        [DataMember(Name="damageThreshold", EmitDefaultValue=false)]
        public decimal? DamageThreshold { get; set; }

        /// <summary>
        /// The new diameter the world border is going to change to.
        /// </summary>
        /// <value>The new diameter the world border is going to change to.</value>
        [DataMember(Name="newDiameter", EmitDefaultValue=false)]
        public decimal? NewDiameter { get; set; }

        /// <summary>
        /// The amount of time remaining before the world border reaches the new diameter.
        /// </summary>
        /// <value>The amount of time remaining before the world border reaches the new diameter.</value>
        [DataMember(Name="timeRemaining", EmitDefaultValue=false)]
        public decimal? TimeRemaining { get; set; }

        /// <summary>
        /// The distance at which a player is warned of the world border.
        /// </summary>
        /// <value>The distance at which a player is warned of the world border.</value>
        [DataMember(Name="warningDistance", EmitDefaultValue=false)]
        public decimal? WarningDistance { get; set; }

        /// <summary>
        /// The amount of time in seconds before a contracting world border reaches a player that the player is warned.
        /// </summary>
        /// <value>The amount of time in seconds before a contracting world border reaches a player that the player is warned.</value>
        [DataMember(Name="warningTime", EmitDefaultValue=false)]
        public decimal? WarningTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorldFullBorder {\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  DamageAmount: ").Append(DamageAmount).Append("\n");
            sb.Append("  DamageThreshold: ").Append(DamageThreshold).Append("\n");
            sb.Append("  NewDiameter: ").Append(NewDiameter).Append("\n");
            sb.Append("  TimeRemaining: ").Append(TimeRemaining).Append("\n");
            sb.Append("  WarningDistance: ").Append(WarningDistance).Append("\n");
            sb.Append("  WarningTime: ").Append(WarningTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorldFullBorder);
        }

        /// <summary>
        /// Returns true if WorldFullBorder instances are equal
        /// </summary>
        /// <param name="other">Instance of WorldFullBorder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorldFullBorder other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Center == other.Center ||
                    this.Center != null &&
                    this.Center.Equals(other.Center)
                ) && 
                (
                    this.Diameter == other.Diameter ||
                    this.Diameter != null &&
                    this.Diameter.Equals(other.Diameter)
                ) && 
                (
                    this.DamageAmount == other.DamageAmount ||
                    this.DamageAmount != null &&
                    this.DamageAmount.Equals(other.DamageAmount)
                ) && 
                (
                    this.DamageThreshold == other.DamageThreshold ||
                    this.DamageThreshold != null &&
                    this.DamageThreshold.Equals(other.DamageThreshold)
                ) && 
                (
                    this.NewDiameter == other.NewDiameter ||
                    this.NewDiameter != null &&
                    this.NewDiameter.Equals(other.NewDiameter)
                ) && 
                (
                    this.TimeRemaining == other.TimeRemaining ||
                    this.TimeRemaining != null &&
                    this.TimeRemaining.Equals(other.TimeRemaining)
                ) && 
                (
                    this.WarningDistance == other.WarningDistance ||
                    this.WarningDistance != null &&
                    this.WarningDistance.Equals(other.WarningDistance)
                ) && 
                (
                    this.WarningTime == other.WarningTime ||
                    this.WarningTime != null &&
                    this.WarningTime.Equals(other.WarningTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Center != null)
                    hash = hash * 59 + this.Center.GetHashCode();
                if (this.Diameter != null)
                    hash = hash * 59 + this.Diameter.GetHashCode();
                if (this.DamageAmount != null)
                    hash = hash * 59 + this.DamageAmount.GetHashCode();
                if (this.DamageThreshold != null)
                    hash = hash * 59 + this.DamageThreshold.GetHashCode();
                if (this.NewDiameter != null)
                    hash = hash * 59 + this.NewDiameter.GetHashCode();
                if (this.TimeRemaining != null)
                    hash = hash * 59 + this.TimeRemaining.GetHashCode();
                if (this.WarningDistance != null)
                    hash = hash * 59 + this.WarningDistance.GetHashCode();
                if (this.WarningTime != null)
                    hash = hash * 59 + this.WarningTime.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
