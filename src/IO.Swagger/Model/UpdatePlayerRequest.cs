/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UpdatePlayerRequest
    /// </summary>
    [DataContract]
    public partial class UpdatePlayerRequest :  IEquatable<UpdatePlayerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdatePlayerRequest" /> class.
        /// </summary>
        /// <param name="World">The UUID or name of the world that the player is moved to..</param>
        /// <param name="Position">Position.</param>
        /// <param name="Velocity">Velocity.</param>
        /// <param name="Rotation">Rotation.</param>
        /// <param name="Scale">Scale.</param>
        /// <param name="FoodLevel">The new food level of the player..</param>
        /// <param name="Exhaustion">The new exhaustion level of the player..</param>
        /// <param name="Saturation">The new saturation level of the player..</param>
        /// <param name="TotalExperience">The total amount of experience the player has. This implicitly also sets the level..</param>
        /// <param name="Level">The current level of the player. This is also defined by the total amount of experience the player has..</param>
        /// <param name="ExperienceSinceLevel">The amount of experience since the last level up that the player has collected..</param>
        /// <param name="Health">The current amount of health the player has..</param>
        /// <param name="MaxHealth">The total amount of health the player can have at maximum..</param>
        /// <param name="Damage">Damage.</param>
        public UpdatePlayerRequest(string World = default(string), Vector3 Position = default(Vector3), Vector3 Velocity = default(Vector3), Vector3 Rotation = default(Vector3), Vector3 Scale = default(Vector3), decimal? FoodLevel = default(decimal?), double? Exhaustion = default(double?), double? Saturation = default(double?), decimal? TotalExperience = default(decimal?), decimal? Level = default(decimal?), decimal? ExperienceSinceLevel = default(decimal?), double? Health = default(double?), double? MaxHealth = default(double?), DamageRequest1 Damage = default(DamageRequest1))
        {
            this.World = World;
            this.Position = Position;
            this.Velocity = Velocity;
            this.Rotation = Rotation;
            this.Scale = Scale;
            this.FoodLevel = FoodLevel;
            this.Exhaustion = Exhaustion;
            this.Saturation = Saturation;
            this.TotalExperience = TotalExperience;
            this.Level = Level;
            this.ExperienceSinceLevel = ExperienceSinceLevel;
            this.Health = Health;
            this.MaxHealth = MaxHealth;
            this.Damage = Damage;
        }
        
        /// <summary>
        /// The UUID or name of the world that the player is moved to.
        /// </summary>
        /// <value>The UUID or name of the world that the player is moved to.</value>
        [DataMember(Name="world", EmitDefaultValue=false)]
        public string World { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Vector3 Position { get; set; }

        /// <summary>
        /// Gets or Sets Velocity
        /// </summary>
        [DataMember(Name="velocity", EmitDefaultValue=false)]
        public Vector3 Velocity { get; set; }

        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name="rotation", EmitDefaultValue=false)]
        public Vector3 Rotation { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public Vector3 Scale { get; set; }

        /// <summary>
        /// The new food level of the player.
        /// </summary>
        /// <value>The new food level of the player.</value>
        [DataMember(Name="foodLevel", EmitDefaultValue=false)]
        public decimal? FoodLevel { get; set; }

        /// <summary>
        /// The new exhaustion level of the player.
        /// </summary>
        /// <value>The new exhaustion level of the player.</value>
        [DataMember(Name="exhaustion", EmitDefaultValue=false)]
        public double? Exhaustion { get; set; }

        /// <summary>
        /// The new saturation level of the player.
        /// </summary>
        /// <value>The new saturation level of the player.</value>
        [DataMember(Name="saturation", EmitDefaultValue=false)]
        public double? Saturation { get; set; }

        /// <summary>
        /// The total amount of experience the player has. This implicitly also sets the level.
        /// </summary>
        /// <value>The total amount of experience the player has. This implicitly also sets the level.</value>
        [DataMember(Name="totalExperience", EmitDefaultValue=false)]
        public decimal? TotalExperience { get; set; }

        /// <summary>
        /// The current level of the player. This is also defined by the total amount of experience the player has.
        /// </summary>
        /// <value>The current level of the player. This is also defined by the total amount of experience the player has.</value>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public decimal? Level { get; set; }

        /// <summary>
        /// The amount of experience since the last level up that the player has collected.
        /// </summary>
        /// <value>The amount of experience since the last level up that the player has collected.</value>
        [DataMember(Name="experienceSinceLevel", EmitDefaultValue=false)]
        public decimal? ExperienceSinceLevel { get; set; }

        /// <summary>
        /// The current amount of health the player has.
        /// </summary>
        /// <value>The current amount of health the player has.</value>
        [DataMember(Name="health", EmitDefaultValue=false)]
        public double? Health { get; set; }

        /// <summary>
        /// The total amount of health the player can have at maximum.
        /// </summary>
        /// <value>The total amount of health the player can have at maximum.</value>
        [DataMember(Name="maxHealth", EmitDefaultValue=false)]
        public double? MaxHealth { get; set; }

        /// <summary>
        /// Gets or Sets Damage
        /// </summary>
        [DataMember(Name="damage", EmitDefaultValue=false)]
        public DamageRequest1 Damage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatePlayerRequest {\n");
            sb.Append("  World: ").Append(World).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Velocity: ").Append(Velocity).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  FoodLevel: ").Append(FoodLevel).Append("\n");
            sb.Append("  Exhaustion: ").Append(Exhaustion).Append("\n");
            sb.Append("  Saturation: ").Append(Saturation).Append("\n");
            sb.Append("  TotalExperience: ").Append(TotalExperience).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ExperienceSinceLevel: ").Append(ExperienceSinceLevel).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("  MaxHealth: ").Append(MaxHealth).Append("\n");
            sb.Append("  Damage: ").Append(Damage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UpdatePlayerRequest);
        }

        /// <summary>
        /// Returns true if UpdatePlayerRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdatePlayerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatePlayerRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.World == other.World ||
                    this.World != null &&
                    this.World.Equals(other.World)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Velocity == other.Velocity ||
                    this.Velocity != null &&
                    this.Velocity.Equals(other.Velocity)
                ) && 
                (
                    this.Rotation == other.Rotation ||
                    this.Rotation != null &&
                    this.Rotation.Equals(other.Rotation)
                ) && 
                (
                    this.Scale == other.Scale ||
                    this.Scale != null &&
                    this.Scale.Equals(other.Scale)
                ) && 
                (
                    this.FoodLevel == other.FoodLevel ||
                    this.FoodLevel != null &&
                    this.FoodLevel.Equals(other.FoodLevel)
                ) && 
                (
                    this.Exhaustion == other.Exhaustion ||
                    this.Exhaustion != null &&
                    this.Exhaustion.Equals(other.Exhaustion)
                ) && 
                (
                    this.Saturation == other.Saturation ||
                    this.Saturation != null &&
                    this.Saturation.Equals(other.Saturation)
                ) && 
                (
                    this.TotalExperience == other.TotalExperience ||
                    this.TotalExperience != null &&
                    this.TotalExperience.Equals(other.TotalExperience)
                ) && 
                (
                    this.Level == other.Level ||
                    this.Level != null &&
                    this.Level.Equals(other.Level)
                ) && 
                (
                    this.ExperienceSinceLevel == other.ExperienceSinceLevel ||
                    this.ExperienceSinceLevel != null &&
                    this.ExperienceSinceLevel.Equals(other.ExperienceSinceLevel)
                ) && 
                (
                    this.Health == other.Health ||
                    this.Health != null &&
                    this.Health.Equals(other.Health)
                ) && 
                (
                    this.MaxHealth == other.MaxHealth ||
                    this.MaxHealth != null &&
                    this.MaxHealth.Equals(other.MaxHealth)
                ) && 
                (
                    this.Damage == other.Damage ||
                    this.Damage != null &&
                    this.Damage.Equals(other.Damage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.World != null)
                    hash = hash * 59 + this.World.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                if (this.Velocity != null)
                    hash = hash * 59 + this.Velocity.GetHashCode();
                if (this.Rotation != null)
                    hash = hash * 59 + this.Rotation.GetHashCode();
                if (this.Scale != null)
                    hash = hash * 59 + this.Scale.GetHashCode();
                if (this.FoodLevel != null)
                    hash = hash * 59 + this.FoodLevel.GetHashCode();
                if (this.Exhaustion != null)
                    hash = hash * 59 + this.Exhaustion.GetHashCode();
                if (this.Saturation != null)
                    hash = hash * 59 + this.Saturation.GetHashCode();
                if (this.TotalExperience != null)
                    hash = hash * 59 + this.TotalExperience.GetHashCode();
                if (this.Level != null)
                    hash = hash * 59 + this.Level.GetHashCode();
                if (this.ExperienceSinceLevel != null)
                    hash = hash * 59 + this.ExperienceSinceLevel.GetHashCode();
                if (this.Health != null)
                    hash = hash * 59 + this.Health.GetHashCode();
                if (this.MaxHealth != null)
                    hash = hash * 59 + this.MaxHealth.GetHashCode();
                if (this.Damage != null)
                    hash = hash * 59 + this.Damage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
