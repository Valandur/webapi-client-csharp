/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WorldFull
    /// </summary>
    [DataContract]
    public partial class WorldFull :  IEquatable<WorldFull>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorldFull" /> class.
        /// </summary>
        /// <param name="Name">The name of the world..</param>
        /// <param name="Uuid">The unique id of the world..</param>
        /// <param name="Link">The API URL which contains detailed information about this world..</param>
        /// <param name="Border">Border.</param>
        /// <param name="Difficulty">The current difficulty of the world..</param>
        /// <param name="Dimension">Dimension.</param>
        /// <param name="GameMode">The default game mode of the world..</param>
        /// <param name="Generator">Generator.</param>
        /// <param name="Seed">The seed used to generate this world..</param>
        /// <param name="Spawn">Spawn.</param>
        /// <param name="Time">The current in game time..</param>
        /// <param name="Weather">The current weather of the world..</param>
        public WorldFull(string Name = default(string), string Uuid = default(string), string Link = default(string), WorldFullBorder Border = default(WorldFullBorder), string Difficulty = default(string), WorldFullDimension Dimension = default(WorldFullDimension), string GameMode = default(string), WorldFullGenerator Generator = default(WorldFullGenerator), decimal? Seed = default(decimal?), Vector3 Spawn = default(Vector3), decimal? Time = default(decimal?), string Weather = default(string))
        {
            this.Name = Name;
            this.Uuid = Uuid;
            this.Link = Link;
            this.Border = Border;
            this.Difficulty = Difficulty;
            this.Dimension = Dimension;
            this.GameMode = GameMode;
            this.Generator = Generator;
            this.Seed = Seed;
            this.Spawn = Spawn;
            this.Time = Time;
            this.Weather = Weather;
        }
        
        /// <summary>
        /// The name of the world.
        /// </summary>
        /// <value>The name of the world.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique id of the world.
        /// </summary>
        /// <value>The unique id of the world.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The API URL which contains detailed information about this world.
        /// </summary>
        /// <value>The API URL which contains detailed information about this world.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Gets or Sets Border
        /// </summary>
        [DataMember(Name="border", EmitDefaultValue=false)]
        public WorldFullBorder Border { get; set; }

        /// <summary>
        /// The current difficulty of the world.
        /// </summary>
        /// <value>The current difficulty of the world.</value>
        [DataMember(Name="difficulty", EmitDefaultValue=false)]
        public string Difficulty { get; set; }

        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name="dimension", EmitDefaultValue=false)]
        public WorldFullDimension Dimension { get; set; }

        /// <summary>
        /// The default game mode of the world.
        /// </summary>
        /// <value>The default game mode of the world.</value>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public string GameMode { get; set; }

        /// <summary>
        /// Gets or Sets Generator
        /// </summary>
        [DataMember(Name="generator", EmitDefaultValue=false)]
        public WorldFullGenerator Generator { get; set; }

        /// <summary>
        /// The seed used to generate this world.
        /// </summary>
        /// <value>The seed used to generate this world.</value>
        [DataMember(Name="seed", EmitDefaultValue=false)]
        public decimal? Seed { get; set; }

        /// <summary>
        /// Gets or Sets Spawn
        /// </summary>
        [DataMember(Name="spawn", EmitDefaultValue=false)]
        public Vector3 Spawn { get; set; }

        /// <summary>
        /// The current in game time.
        /// </summary>
        /// <value>The current in game time.</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public decimal? Time { get; set; }

        /// <summary>
        /// The current weather of the world.
        /// </summary>
        /// <value>The current weather of the world.</value>
        [DataMember(Name="weather", EmitDefaultValue=false)]
        public string Weather { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorldFull {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Border: ").Append(Border).Append("\n");
            sb.Append("  Difficulty: ").Append(Difficulty).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  Generator: ").Append(Generator).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  Spawn: ").Append(Spawn).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Weather: ").Append(Weather).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorldFull);
        }

        /// <summary>
        /// Returns true if WorldFull instances are equal
        /// </summary>
        /// <param name="other">Instance of WorldFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorldFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                ) && 
                (
                    this.Border == other.Border ||
                    this.Border != null &&
                    this.Border.Equals(other.Border)
                ) && 
                (
                    this.Difficulty == other.Difficulty ||
                    this.Difficulty != null &&
                    this.Difficulty.Equals(other.Difficulty)
                ) && 
                (
                    this.Dimension == other.Dimension ||
                    this.Dimension != null &&
                    this.Dimension.Equals(other.Dimension)
                ) && 
                (
                    this.GameMode == other.GameMode ||
                    this.GameMode != null &&
                    this.GameMode.Equals(other.GameMode)
                ) && 
                (
                    this.Generator == other.Generator ||
                    this.Generator != null &&
                    this.Generator.Equals(other.Generator)
                ) && 
                (
                    this.Seed == other.Seed ||
                    this.Seed != null &&
                    this.Seed.Equals(other.Seed)
                ) && 
                (
                    this.Spawn == other.Spawn ||
                    this.Spawn != null &&
                    this.Spawn.Equals(other.Spawn)
                ) && 
                (
                    this.Time == other.Time ||
                    this.Time != null &&
                    this.Time.Equals(other.Time)
                ) && 
                (
                    this.Weather == other.Weather ||
                    this.Weather != null &&
                    this.Weather.Equals(other.Weather)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                if (this.Border != null)
                    hash = hash * 59 + this.Border.GetHashCode();
                if (this.Difficulty != null)
                    hash = hash * 59 + this.Difficulty.GetHashCode();
                if (this.Dimension != null)
                    hash = hash * 59 + this.Dimension.GetHashCode();
                if (this.GameMode != null)
                    hash = hash * 59 + this.GameMode.GetHashCode();
                if (this.Generator != null)
                    hash = hash * 59 + this.Generator.GetHashCode();
                if (this.Seed != null)
                    hash = hash * 59 + this.Seed.GetHashCode();
                if (this.Spawn != null)
                    hash = hash * 59 + this.Spawn.GetHashCode();
                if (this.Time != null)
                    hash = hash * 59 + this.Time.GetHashCode();
                if (this.Weather != null)
                    hash = hash * 59 + this.Weather.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
