/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NationsNationFull
    /// </summary>
    [DataContract]
    public partial class NationsNationFull :  IEquatable<NationsNationFull>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NationsNationFull" /> class.
        /// </summary>
        /// <param name="Uuid">The unique id of the nation..</param>
        /// <param name="Name">The name of the nation..</param>
        /// <param name="Tag">The tag of the nation..</param>
        /// <param name="President">President.</param>
        /// <param name="RealName">The real name of the nation..</param>
        /// <param name="Upkeep">How much upkeep has to be paid for this nation..</param>
        /// <param name="Taxes">The amount of taxes that citizens are charged..</param>
        /// <param name="Flags">A map of flags.</param>
        /// <param name="Citizens">The citizens that belong to this nation..</param>
        /// <param name="Ministers">The ministers that belong to this nation..</param>
        /// <param name="Staff">The staff that belong to this nation..</param>
        /// <param name="Spawns">A map of spawn names to spawn locations..</param>
        /// <param name="Rects">The rects that define the area of this nation..</param>
        /// <param name="Zones">The zones that belong to this nation..</param>
        public NationsNationFull(string Uuid = default(string), string Name = default(string), string Tag = default(string), Player President = default(Player), string RealName = default(string), double? Upkeep = default(double?), double? Taxes = default(double?), Object Flags = default(Object), List<Player> Citizens = default(List<Player>), List<Player> Ministers = default(List<Player>), List<Player> Staff = default(List<Player>), Object Spawns = default(Object), List<NationsRect> Rects = default(List<NationsRect>), List<NationsZone> Zones = default(List<NationsZone>))
        {
            this.Uuid = Uuid;
            this.Name = Name;
            this.Tag = Tag;
            this.President = President;
            this.RealName = RealName;
            this.Upkeep = Upkeep;
            this.Taxes = Taxes;
            this.Flags = Flags;
            this.Citizens = Citizens;
            this.Ministers = Ministers;
            this.Staff = Staff;
            this.Spawns = Spawns;
            this.Rects = Rects;
            this.Zones = Zones;
        }
        
        /// <summary>
        /// The unique id of the nation.
        /// </summary>
        /// <value>The unique id of the nation.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The name of the nation.
        /// </summary>
        /// <value>The name of the nation.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The tag of the nation.
        /// </summary>
        /// <value>The tag of the nation.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets President
        /// </summary>
        [DataMember(Name="president", EmitDefaultValue=false)]
        public Player President { get; set; }

        /// <summary>
        /// The real name of the nation.
        /// </summary>
        /// <value>The real name of the nation.</value>
        [DataMember(Name="realName", EmitDefaultValue=false)]
        public string RealName { get; set; }

        /// <summary>
        /// How much upkeep has to be paid for this nation.
        /// </summary>
        /// <value>How much upkeep has to be paid for this nation.</value>
        [DataMember(Name="upkeep", EmitDefaultValue=false)]
        public double? Upkeep { get; set; }

        /// <summary>
        /// The amount of taxes that citizens are charged.
        /// </summary>
        /// <value>The amount of taxes that citizens are charged.</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public double? Taxes { get; set; }

        /// <summary>
        /// A map of flags
        /// </summary>
        /// <value>A map of flags</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public Object Flags { get; set; }

        /// <summary>
        /// The citizens that belong to this nation.
        /// </summary>
        /// <value>The citizens that belong to this nation.</value>
        [DataMember(Name="citizens", EmitDefaultValue=false)]
        public List<Player> Citizens { get; set; }

        /// <summary>
        /// The ministers that belong to this nation.
        /// </summary>
        /// <value>The ministers that belong to this nation.</value>
        [DataMember(Name="ministers", EmitDefaultValue=false)]
        public List<Player> Ministers { get; set; }

        /// <summary>
        /// The staff that belong to this nation.
        /// </summary>
        /// <value>The staff that belong to this nation.</value>
        [DataMember(Name="staff", EmitDefaultValue=false)]
        public List<Player> Staff { get; set; }

        /// <summary>
        /// A map of spawn names to spawn locations.
        /// </summary>
        /// <value>A map of spawn names to spawn locations.</value>
        [DataMember(Name="spawns", EmitDefaultValue=false)]
        public Object Spawns { get; set; }

        /// <summary>
        /// The rects that define the area of this nation.
        /// </summary>
        /// <value>The rects that define the area of this nation.</value>
        [DataMember(Name="rects", EmitDefaultValue=false)]
        public List<NationsRect> Rects { get; set; }

        /// <summary>
        /// The zones that belong to this nation.
        /// </summary>
        /// <value>The zones that belong to this nation.</value>
        [DataMember(Name="zones", EmitDefaultValue=false)]
        public List<NationsZone> Zones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NationsNationFull {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  President: ").Append(President).Append("\n");
            sb.Append("  RealName: ").Append(RealName).Append("\n");
            sb.Append("  Upkeep: ").Append(Upkeep).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Citizens: ").Append(Citizens).Append("\n");
            sb.Append("  Ministers: ").Append(Ministers).Append("\n");
            sb.Append("  Staff: ").Append(Staff).Append("\n");
            sb.Append("  Spawns: ").Append(Spawns).Append("\n");
            sb.Append("  Rects: ").Append(Rects).Append("\n");
            sb.Append("  Zones: ").Append(Zones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NationsNationFull);
        }

        /// <summary>
        /// Returns true if NationsNationFull instances are equal
        /// </summary>
        /// <param name="other">Instance of NationsNationFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NationsNationFull other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Tag == other.Tag ||
                    this.Tag != null &&
                    this.Tag.Equals(other.Tag)
                ) && 
                (
                    this.President == other.President ||
                    this.President != null &&
                    this.President.Equals(other.President)
                ) && 
                (
                    this.RealName == other.RealName ||
                    this.RealName != null &&
                    this.RealName.Equals(other.RealName)
                ) && 
                (
                    this.Upkeep == other.Upkeep ||
                    this.Upkeep != null &&
                    this.Upkeep.Equals(other.Upkeep)
                ) && 
                (
                    this.Taxes == other.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.Equals(other.Taxes)
                ) && 
                (
                    this.Flags == other.Flags ||
                    this.Flags != null &&
                    this.Flags.Equals(other.Flags)
                ) && 
                (
                    this.Citizens == other.Citizens ||
                    this.Citizens != null &&
                    this.Citizens.SequenceEqual(other.Citizens)
                ) && 
                (
                    this.Ministers == other.Ministers ||
                    this.Ministers != null &&
                    this.Ministers.SequenceEqual(other.Ministers)
                ) && 
                (
                    this.Staff == other.Staff ||
                    this.Staff != null &&
                    this.Staff.SequenceEqual(other.Staff)
                ) && 
                (
                    this.Spawns == other.Spawns ||
                    this.Spawns != null &&
                    this.Spawns.Equals(other.Spawns)
                ) && 
                (
                    this.Rects == other.Rects ||
                    this.Rects != null &&
                    this.Rects.SequenceEqual(other.Rects)
                ) && 
                (
                    this.Zones == other.Zones ||
                    this.Zones != null &&
                    this.Zones.SequenceEqual(other.Zones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Tag != null)
                    hash = hash * 59 + this.Tag.GetHashCode();
                if (this.President != null)
                    hash = hash * 59 + this.President.GetHashCode();
                if (this.RealName != null)
                    hash = hash * 59 + this.RealName.GetHashCode();
                if (this.Upkeep != null)
                    hash = hash * 59 + this.Upkeep.GetHashCode();
                if (this.Taxes != null)
                    hash = hash * 59 + this.Taxes.GetHashCode();
                if (this.Flags != null)
                    hash = hash * 59 + this.Flags.GetHashCode();
                if (this.Citizens != null)
                    hash = hash * 59 + this.Citizens.GetHashCode();
                if (this.Ministers != null)
                    hash = hash * 59 + this.Ministers.GetHashCode();
                if (this.Staff != null)
                    hash = hash * 59 + this.Staff.GetHashCode();
                if (this.Spawns != null)
                    hash = hash * 59 + this.Spawns.GetHashCode();
                if (this.Rects != null)
                    hash = hash * 59 + this.Rects.GetHashCode();
                if (this.Zones != null)
                    hash = hash * 59 + this.Zones.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
