/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Slot
    /// </summary>
    [DataContract]
    public partial class Slot :  IEquatable<Slot>, IValidatableObject
    {
        /// <summary>
        /// Defines Axis
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AxisEnum
        {
            
            /// <summary>
            /// Enum X for value: X
            /// </summary>
            [EnumMember(Value = "X")]
            X = 1,
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 2,
            
            /// <summary>
            /// Enum Z for value: Z
            /// </summary>
            [EnumMember(Value = "Z")]
            Z = 3
        }

        /// <summary>
        /// Gets or Sets Axis
        /// </summary>
        [DataMember(Name="axis", EmitDefaultValue=false)]
        public AxisEnum? Axis { get; set; }
        /// <summary>
        /// Defines ConnectedDirection
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConnectedDirectionEnum
        {
            
            /// <summary>
            /// Enum NORTH for value: NORTH
            /// </summary>
            [EnumMember(Value = "NORTH")]
            NORTH = 1,
            
            /// <summary>
            /// Enum NORTHNORTHEAST for value: NORTH_NORTHEAST
            /// </summary>
            [EnumMember(Value = "NORTH_NORTHEAST")]
            NORTHNORTHEAST = 2,
            
            /// <summary>
            /// Enum NORTHEAST for value: NORTHEAST
            /// </summary>
            [EnumMember(Value = "NORTHEAST")]
            NORTHEAST = 3,
            
            /// <summary>
            /// Enum EASTNORTHEAST for value: EAST_NORTHEAST
            /// </summary>
            [EnumMember(Value = "EAST_NORTHEAST")]
            EASTNORTHEAST = 4,
            
            /// <summary>
            /// Enum EAST for value: EAST
            /// </summary>
            [EnumMember(Value = "EAST")]
            EAST = 5,
            
            /// <summary>
            /// Enum EASTSOUTHEAST for value: EAST_SOUTHEAST
            /// </summary>
            [EnumMember(Value = "EAST_SOUTHEAST")]
            EASTSOUTHEAST = 6,
            
            /// <summary>
            /// Enum SOUTHEAST for value: SOUTHEAST
            /// </summary>
            [EnumMember(Value = "SOUTHEAST")]
            SOUTHEAST = 7,
            
            /// <summary>
            /// Enum SOUTHSOUTHEAST for value: SOUTH_SOUTHEAST
            /// </summary>
            [EnumMember(Value = "SOUTH_SOUTHEAST")]
            SOUTHSOUTHEAST = 8,
            
            /// <summary>
            /// Enum SOUTH for value: SOUTH
            /// </summary>
            [EnumMember(Value = "SOUTH")]
            SOUTH = 9,
            
            /// <summary>
            /// Enum SOUTHSOUTHWEST for value: SOUTH_SOUTHWEST
            /// </summary>
            [EnumMember(Value = "SOUTH_SOUTHWEST")]
            SOUTHSOUTHWEST = 10,
            
            /// <summary>
            /// Enum SOUTHWEST for value: SOUTHWEST
            /// </summary>
            [EnumMember(Value = "SOUTHWEST")]
            SOUTHWEST = 11,
            
            /// <summary>
            /// Enum WESTSOUTHWEST for value: WEST_SOUTHWEST
            /// </summary>
            [EnumMember(Value = "WEST_SOUTHWEST")]
            WESTSOUTHWEST = 12,
            
            /// <summary>
            /// Enum WEST for value: WEST
            /// </summary>
            [EnumMember(Value = "WEST")]
            WEST = 13,
            
            /// <summary>
            /// Enum WESTNORTHWEST for value: WEST_NORTHWEST
            /// </summary>
            [EnumMember(Value = "WEST_NORTHWEST")]
            WESTNORTHWEST = 14,
            
            /// <summary>
            /// Enum NORTHWEST for value: NORTHWEST
            /// </summary>
            [EnumMember(Value = "NORTHWEST")]
            NORTHWEST = 15,
            
            /// <summary>
            /// Enum NORTHNORTHWEST for value: NORTH_NORTHWEST
            /// </summary>
            [EnumMember(Value = "NORTH_NORTHWEST")]
            NORTHNORTHWEST = 16,
            
            /// <summary>
            /// Enum UP for value: UP
            /// </summary>
            [EnumMember(Value = "UP")]
            UP = 17,
            
            /// <summary>
            /// Enum DOWN for value: DOWN
            /// </summary>
            [EnumMember(Value = "DOWN")]
            DOWN = 18,
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 19
        }


        /// <summary>
        /// Gets or Sets ConnectedDirection
        /// </summary>
        [DataMember(Name="connectedDirection", EmitDefaultValue=false)]
        public List<ConnectedDirectionEnum> ConnectedDirection { get; set; }
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            
            /// <summary>
            /// Enum NORTH for value: NORTH
            /// </summary>
            [EnumMember(Value = "NORTH")]
            NORTH = 1,
            
            /// <summary>
            /// Enum NORTHNORTHEAST for value: NORTH_NORTHEAST
            /// </summary>
            [EnumMember(Value = "NORTH_NORTHEAST")]
            NORTHNORTHEAST = 2,
            
            /// <summary>
            /// Enum NORTHEAST for value: NORTHEAST
            /// </summary>
            [EnumMember(Value = "NORTHEAST")]
            NORTHEAST = 3,
            
            /// <summary>
            /// Enum EASTNORTHEAST for value: EAST_NORTHEAST
            /// </summary>
            [EnumMember(Value = "EAST_NORTHEAST")]
            EASTNORTHEAST = 4,
            
            /// <summary>
            /// Enum EAST for value: EAST
            /// </summary>
            [EnumMember(Value = "EAST")]
            EAST = 5,
            
            /// <summary>
            /// Enum EASTSOUTHEAST for value: EAST_SOUTHEAST
            /// </summary>
            [EnumMember(Value = "EAST_SOUTHEAST")]
            EASTSOUTHEAST = 6,
            
            /// <summary>
            /// Enum SOUTHEAST for value: SOUTHEAST
            /// </summary>
            [EnumMember(Value = "SOUTHEAST")]
            SOUTHEAST = 7,
            
            /// <summary>
            /// Enum SOUTHSOUTHEAST for value: SOUTH_SOUTHEAST
            /// </summary>
            [EnumMember(Value = "SOUTH_SOUTHEAST")]
            SOUTHSOUTHEAST = 8,
            
            /// <summary>
            /// Enum SOUTH for value: SOUTH
            /// </summary>
            [EnumMember(Value = "SOUTH")]
            SOUTH = 9,
            
            /// <summary>
            /// Enum SOUTHSOUTHWEST for value: SOUTH_SOUTHWEST
            /// </summary>
            [EnumMember(Value = "SOUTH_SOUTHWEST")]
            SOUTHSOUTHWEST = 10,
            
            /// <summary>
            /// Enum SOUTHWEST for value: SOUTHWEST
            /// </summary>
            [EnumMember(Value = "SOUTHWEST")]
            SOUTHWEST = 11,
            
            /// <summary>
            /// Enum WESTSOUTHWEST for value: WEST_SOUTHWEST
            /// </summary>
            [EnumMember(Value = "WEST_SOUTHWEST")]
            WESTSOUTHWEST = 12,
            
            /// <summary>
            /// Enum WEST for value: WEST
            /// </summary>
            [EnumMember(Value = "WEST")]
            WEST = 13,
            
            /// <summary>
            /// Enum WESTNORTHWEST for value: WEST_NORTHWEST
            /// </summary>
            [EnumMember(Value = "WEST_NORTHWEST")]
            WESTNORTHWEST = 14,
            
            /// <summary>
            /// Enum NORTHWEST for value: NORTHWEST
            /// </summary>
            [EnumMember(Value = "NORTHWEST")]
            NORTHWEST = 15,
            
            /// <summary>
            /// Enum NORTHNORTHWEST for value: NORTH_NORTHWEST
            /// </summary>
            [EnumMember(Value = "NORTH_NORTHWEST")]
            NORTHNORTHWEST = 16,
            
            /// <summary>
            /// Enum UP for value: UP
            /// </summary>
            [EnumMember(Value = "UP")]
            UP = 17,
            
            /// <summary>
            /// Enum DOWN for value: DOWN
            /// </summary>
            [EnumMember(Value = "DOWN")]
            DOWN = 18,
            
            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 19
        }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Defines Matter
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatterEnum
        {
            
            /// <summary>
            /// Enum SOLID for value: SOLID
            /// </summary>
            [EnumMember(Value = "SOLID")]
            SOLID = 1,
            
            /// <summary>
            /// Enum LIQUID for value: LIQUID
            /// </summary>
            [EnumMember(Value = "LIQUID")]
            LIQUID = 2,
            
            /// <summary>
            /// Enum GAS for value: GAS
            /// </summary>
            [EnumMember(Value = "GAS")]
            GAS = 3
        }

        /// <summary>
        /// Gets or Sets Matter
        /// </summary>
        [DataMember(Name="matter", EmitDefaultValue=false)]
        public MatterEnum? Matter { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Slot" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Slot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Slot" /> class.
        /// </summary>
        /// <param name="Stack">The item stack that is in this slot (required).</param>
        /// <param name="Absorption">Absorption.</param>
        /// <param name="Age">Age.</param>
        /// <param name="Aggressive">Aggressive.</param>
        /// <param name="AiEnabled">AiEnabled.</param>
        /// <param name="AngerLevel">AngerLevel.</param>
        /// <param name="ArmorStand">ArmorStand.</param>
        /// <param name="Art">Art.</param>
        /// <param name="Attached">Attached.</param>
        /// <param name="Author">Author.</param>
        /// <param name="Axis">Axis.</param>
        /// <param name="Banner">Banner.</param>
        /// <param name="Beacon">Beacon.</param>
        /// <param name="BigMushroom">BigMushroom.</param>
        /// <param name="Block">Block.</param>
        /// <param name="Breathing">Breathing.</param>
        /// <param name="Breedable">Breedable.</param>
        /// <param name="BrewingStand">BrewingStand.</param>
        /// <param name="Brick">Brick.</param>
        /// <param name="Career">Career.</param>
        /// <param name="Charged">Charged.</param>
        /// <param name="Coal">Coal.</param>
        /// <param name="Color">Color.</param>
        /// <param name="Command">Command.</param>
        /// <param name="Comparator">Comparator.</param>
        /// <param name="ConnectedDirection">ConnectedDirection.</param>
        /// <param name="CookedFish">CookedFish.</param>
        /// <param name="Cooldown">Cooldown.</param>
        /// <param name="CriticalHit">CriticalHit.</param>
        /// <param name="CustomName">CustomName.</param>
        /// <param name="Damage">Damage.</param>
        /// <param name="Damageable">Damageable.</param>
        /// <param name="Decayable">Decayable.</param>
        /// <param name="Delay">Delay.</param>
        /// <param name="DespawnDelay">DespawnDelay.</param>
        /// <param name="Direction">Direction.</param>
        /// <param name="Dirt">Dirt.</param>
        /// <param name="Disarmed">Disarmed.</param>
        /// <param name="DisguisedBlock">DisguisedBlock.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="DominantHand">DominantHand.</param>
        /// <param name="DoublePlant">DoublePlant.</param>
        /// <param name="Drops">Drops.</param>
        /// <param name="Durability">Durability.</param>
        /// <param name="Dye">Dye.</param>
        /// <param name="Enchantments">Enchantments.</param>
        /// <param name="EndGateway">EndGateway.</param>
        /// <param name="ExpOrb">ExpOrb.</param>
        /// <param name="Experience">Experience.</param>
        /// <param name="ExpireTicks">ExpireTicks.</param>
        /// <param name="ExplosionRadius">ExplosionRadius.</param>
        /// <param name="Extended">Extended.</param>
        /// <param name="FallDistance">FallDistance.</param>
        /// <param name="FallingBlock">FallingBlock.</param>
        /// <param name="Filled">Filled.</param>
        /// <param name="FireworkEffects">FireworkEffects.</param>
        /// <param name="FireworkRocket">FireworkRocket.</param>
        /// <param name="Fish">Fish.</param>
        /// <param name="Flammable">Flammable.</param>
        /// <param name="Fluid">Fluid.</param>
        /// <param name="FluidLevel">FluidLevel.</param>
        /// <param name="FluidTanks">FluidTanks.</param>
        /// <param name="Flying">Flying.</param>
        /// <param name="FlyingAbility">FlyingAbility.</param>
        /// <param name="Food">Food.</param>
        /// <param name="Furnace">Furnace.</param>
        /// <param name="Fuse">Fuse.</param>
        /// <param name="GameMode">GameMode.</param>
        /// <param name="Generation">Generation.</param>
        /// <param name="Glowing">Glowing.</param>
        /// <param name="GoldenApple">GoldenApple.</param>
        /// <param name="Griefs">Griefs.</param>
        /// <param name="Growth">Growth.</param>
        /// <param name="Health">Health.</param>
        /// <param name="Hide">Hide.</param>
        /// <param name="Hinge">Hinge.</param>
        /// <param name="Horse">Horse.</param>
        /// <param name="Igniteable">Igniteable.</param>
        /// <param name="InWall">InWall.</param>
        /// <param name="Inventory">Inventory.</param>
        /// <param name="Invisibility">Invisibility.</param>
        /// <param name="Invulnerability">Invulnerability.</param>
        /// <param name="Joined">Joined.</param>
        /// <param name="Knockback">Knockback.</param>
        /// <param name="Layer">Layer.</param>
        /// <param name="Leash">Leash.</param>
        /// <param name="LockToken">LockToken.</param>
        /// <param name="LogAxis">LogAxis.</param>
        /// <param name="Lore">Lore.</param>
        /// <param name="MinecartBlock">MinecartBlock.</param>
        /// <param name="MobSpawner">MobSpawner.</param>
        /// <param name="Moisture">Moisture.</param>
        /// <param name="Note">Note.</param>
        /// <param name="Occupied">Occupied.</param>
        /// <param name="Ocelot">Ocelot.</param>
        /// <param name="Open">Open.</param>
        /// <param name="Pages">Pages.</param>
        /// <param name="Passengers">Passengers.</param>
        /// <param name="Persists">Persists.</param>
        /// <param name="PickupDelay">PickupDelay.</param>
        /// <param name="PickupRule">PickupRule.</param>
        /// <param name="PigSaddle">PigSaddle.</param>
        /// <param name="Piston">Piston.</param>
        /// <param name="PlaceableOn">PlaceableOn.</param>
        /// <param name="Plant">Plant.</param>
        /// <param name="PlayerCreated">PlayerCreated.</param>
        /// <param name="Playing">Playing.</param>
        /// <param name="Portion">Portion.</param>
        /// <param name="PotionEffects">PotionEffects.</param>
        /// <param name="Powered">Powered.</param>
        /// <param name="Prismarine">Prismarine.</param>
        /// <param name="Quartz">Quartz.</param>
        /// <param name="Rabbit">Rabbit.</param>
        /// <param name="RailDirection">RailDirection.</param>
        /// <param name="RedstonePower">RedstonePower.</param>
        /// <param name="RepresentedItem">RepresentedItem.</param>
        /// <param name="RepresentedPlayer">RepresentedPlayer.</param>
        /// <param name="RespawnLocations">RespawnLocations.</param>
        /// <param name="Sand">Sand.</param>
        /// <param name="SandStone">SandStone.</param>
        /// <param name="Screaming">Screaming.</param>
        /// <param name="Seamless">Seamless.</param>
        /// <param name="Shatters">Shatters.</param>
        /// <param name="Sheared">Sheared.</param>
        /// <param name="Shrub">Shrub.</param>
        /// <param name="Sign">Sign.</param>
        /// <param name="Silent">Silent.</param>
        /// <param name="Sitting">Sitting.</param>
        /// <param name="Skin">Skin.</param>
        /// <param name="Skull">Skull.</param>
        /// <param name="Slab">Slab.</param>
        /// <param name="Sleeping">Sleeping.</param>
        /// <param name="Slime">Slime.</param>
        /// <param name="Sneaking">Sneaking.</param>
        /// <param name="Snow">Snow.</param>
        /// <param name="Spawn">Spawn.</param>
        /// <param name="Sprinting">Sprinting.</param>
        /// <param name="StairShape">StairShape.</param>
        /// <param name="Statistics">Statistics.</param>
        /// <param name="Stone">Stone.</param>
        /// <param name="StoredEnchantments">StoredEnchantments.</param>
        /// <param name="Structure">Structure.</param>
        /// <param name="StuckArrows">StuckArrows.</param>
        /// <param name="Tamed">Tamed.</param>
        /// <param name="Target">Target.</param>
        /// <param name="Trades">Trades.</param>
        /// <param name="Tree">Tree.</param>
        /// <param name="Vehicle">Vehicle.</param>
        /// <param name="Wall">Wall.</param>
        /// <param name="Wet">Wet.</param>
        /// <param name="Wires">Wires.</param>
        /// <param name="AcceptsItems">AcceptsItems.</param>
        /// <param name="ApplicableEffect">ApplicableEffect.</param>
        /// <param name="ArmorSlotType">ArmorSlotType.</param>
        /// <param name="ArmorType">ArmorType.</param>
        /// <param name="BlastResistance">BlastResistance.</param>
        /// <param name="BurningFuel">BurningFuel.</param>
        /// <param name="DamageAbsorption">DamageAbsorption.</param>
        /// <param name="Efficiency">Efficiency.</param>
        /// <param name="EquipmentType">EquipmentType.</param>
        /// <param name="EquiptmentSlotType">EquiptmentSlotType.</param>
        /// <param name="EyeHeight">EyeHeight.</param>
        /// <param name="EyeLocation">EyeLocation.</param>
        /// <param name="FluidTemperature">FluidTemperature.</param>
        /// <param name="FluidViscosity">FluidViscosity.</param>
        /// <param name="FoodRestoration">FoodRestoration.</param>
        /// <param name="FullBlockSelectionBox">FullBlockSelectionBox.</param>
        /// <param name="GravityAffected">GravityAffected.</param>
        /// <param name="GroundLuminance">GroundLuminance.</param>
        /// <param name="GuiId">GuiId.</param>
        /// <param name="Hardness">Hardness.</param>
        /// <param name="HeldItem">HeldItem.</param>
        /// <param name="Identifiable">Identifiable.</param>
        /// <param name="IndirectlyPowered">IndirectlyPowered.</param>
        /// <param name="Instrument">Instrument.</param>
        /// <param name="InventoryCapacity">InventoryCapacity.</param>
        /// <param name="InventoryDimension">InventoryDimension.</param>
        /// <param name="InventoryTitle">InventoryTitle.</param>
        /// <param name="LightEmission">LightEmission.</param>
        /// <param name="Matter">Matter.</param>
        /// <param name="Passable">Passable.</param>
        /// <param name="Record">Record.</param>
        /// <param name="Replaceable">Replaceable.</param>
        /// <param name="SaturationProperty">SaturationProperty.</param>
        /// <param name="SkyLuminance">SkyLuminance.</param>
        /// <param name="SlotIndex">SlotIndex.</param>
        /// <param name="SlotPos">SlotPos.</param>
        /// <param name="SlotSide">SlotSide.</param>
        /// <param name="Smeltable">Smeltable.</param>
        /// <param name="SolidCube">SolidCube.</param>
        /// <param name="StatisticsTracked">StatisticsTracked.</param>
        /// <param name="SurrogateBlock">SurrogateBlock.</param>
        /// <param name="Temperature">Temperature.</param>
        /// <param name="ToolType">ToolType.</param>
        /// <param name="Unbreakable">Unbreakable.</param>
        /// <param name="UseLimit">UseLimit.</param>
        public Slot(ItemStack Stack = default(ItemStack), double? Absorption = default(double?), AgeableData Age = default(AgeableData), bool? Aggressive = default(bool?), bool? AiEnabled = default(bool?), int? AngerLevel = default(int?), ArmorStandData ArmorStand = default(ArmorStandData), CatalogType Art = default(CatalogType), bool? Attached = default(bool?), string Author = default(string), AxisEnum? Axis = default(AxisEnum?), BannerData Banner = default(BannerData), BeaconData Beacon = default(BeaconData), CatalogType BigMushroom = default(CatalogType), BlockState Block = default(BlockState), BreathingData Breathing = default(BreathingData), bool? Breedable = default(bool?), BrewingStandData BrewingStand = default(BrewingStandData), CatalogType Brick = default(CatalogType), Career Career = default(Career), bool? Charged = default(bool?), CatalogType Coal = default(CatalogType), Color Color = default(Color), CommandData Command = default(CommandData), CatalogType Comparator = default(CatalogType), List<ConnectedDirectionEnum> ConnectedDirection = default(List<ConnectedDirectionEnum>), CatalogType CookedFish = default(CatalogType), int? Cooldown = default(int?), bool? CriticalHit = default(bool?), bool? CustomName = default(bool?), double? Damage = default(double?), DamageableData Damageable = default(DamageableData), bool? Decayable = default(bool?), int? Delay = default(int?), DespawnDelayData DespawnDelay = default(DespawnDelayData), DirectionEnum? Direction = default(DirectionEnum?), CatalogType Dirt = default(CatalogType), bool? Disarmed = default(bool?), CatalogType DisguisedBlock = default(CatalogType), string DisplayName = default(string), CatalogType DominantHand = default(CatalogType), CatalogType DoublePlant = default(CatalogType), bool? Drops = default(bool?), DurabilityData Durability = default(DurabilityData), DyeColor Dye = default(DyeColor), List<Enchantment> Enchantments = default(List<Enchantment>), EndGatewayData EndGateway = default(EndGatewayData), int? ExpOrb = default(int?), ExperienceHolderData Experience = default(ExperienceHolderData), int? ExpireTicks = default(int?), int? ExplosionRadius = default(int?), bool? Extended = default(bool?), float? FallDistance = default(float?), FallingBlockData FallingBlock = default(FallingBlockData), bool? Filled = default(bool?), List<FireworkEffect> FireworkEffects = default(List<FireworkEffect>), FireworkRocketData FireworkRocket = default(FireworkRocketData), CatalogType Fish = default(CatalogType), bool? Flammable = default(bool?), FluidStack Fluid = default(FluidStack), int? FluidLevel = default(int?), Dictionary<string, List<FluidStack>> FluidTanks = default(Dictionary<string, List<FluidStack>>), bool? Flying = default(bool?), bool? FlyingAbility = default(bool?), FoodData Food = default(FoodData), FurnaceData Furnace = default(FurnaceData), FuseData Fuse = default(FuseData), GameMode GameMode = default(GameMode), int? Generation = default(int?), bool? Glowing = default(bool?), CatalogType GoldenApple = default(CatalogType), bool? Griefs = default(bool?), GrowthData Growth = default(GrowthData), HealthData Health = default(HealthData), HideData Hide = default(HideData), CatalogType Hinge = default(CatalogType), HorseData Horse = default(HorseData), IgniteableData Igniteable = default(IgniteableData), bool? InWall = default(bool?), Inventory Inventory = default(Inventory), InvisibilityData Invisibility = default(InvisibilityData), InvulnerabilityData Invulnerability = default(InvulnerabilityData), JoinData Joined = default(JoinData), int? Knockback = default(int?), int? Layer = default(int?), LeashData Leash = default(LeashData), string LockToken = default(string), CatalogType LogAxis = default(CatalogType), List<string> Lore = default(List<string>), MinecartBlockData MinecartBlock = default(MinecartBlockData), MobSpawnerData MobSpawner = default(MobSpawnerData), int? Moisture = default(int?), CatalogType Note = default(CatalogType), bool? Occupied = default(bool?), CatalogType Ocelot = default(CatalogType), bool? Open = default(bool?), List<string> Pages = default(List<string>), List<Guid?> Passengers = default(List<Guid?>), bool? Persists = default(bool?), PickupDelayData PickupDelay = default(PickupDelayData), CatalogType PickupRule = default(CatalogType), bool? PigSaddle = default(bool?), CatalogType Piston = default(CatalogType), List<CatalogType> PlaceableOn = default(List<CatalogType>), CatalogType Plant = default(CatalogType), bool? PlayerCreated = default(bool?), bool? Playing = default(bool?), CatalogType Portion = default(CatalogType), List<PotionEffect> PotionEffects = default(List<PotionEffect>), bool? Powered = default(bool?), CatalogType Prismarine = default(CatalogType), CatalogType Quartz = default(CatalogType), CatalogType Rabbit = default(CatalogType), CatalogType RailDirection = default(CatalogType), int? RedstonePower = default(int?), ItemStack RepresentedItem = default(ItemStack), string RepresentedPlayer = default(string), Dictionary<string, Location> RespawnLocations = default(Dictionary<string, Location>), CatalogType Sand = default(CatalogType), CatalogType SandStone = default(CatalogType), bool? Screaming = default(bool?), bool? Seamless = default(bool?), bool? Shatters = default(bool?), bool? Sheared = default(bool?), CatalogType Shrub = default(CatalogType), List<string> Sign = default(List<string>), bool? Silent = default(bool?), bool? Sitting = default(bool?), Guid? Skin = default(Guid?), CatalogType Skull = default(CatalogType), CatalogType Slab = default(CatalogType), bool? Sleeping = default(bool?), SlimeData Slime = default(SlimeData), bool? Sneaking = default(bool?), bool? Snow = default(bool?), CatalogType Spawn = default(CatalogType), bool? Sprinting = default(bool?), CatalogType StairShape = default(CatalogType), List<Stat> Statistics = default(List<Stat>), CatalogType Stone = default(CatalogType), List<Enchantment> StoredEnchantments = default(List<Enchantment>), StructureData Structure = default(StructureData), int? StuckArrows = default(int?), TameableData Tamed = default(TameableData), Vector3d Target = default(Vector3d), List<TradeOffer> Trades = default(List<TradeOffer>), CatalogType Tree = default(CatalogType), VehicleData Vehicle = default(VehicleData), CatalogType Wall = default(CatalogType), bool? Wet = default(bool?), WireAttachmentData Wires = default(WireAttachmentData), AcceptsItems AcceptsItems = default(AcceptsItems), List<PotionEffect> ApplicableEffect = default(List<PotionEffect>), ArmorSlotType ArmorSlotType = default(ArmorSlotType), CatalogType ArmorType = default(CatalogType), double? BlastResistance = default(double?), int? BurningFuel = default(int?), int? DamageAbsorption = default(int?), double? Efficiency = default(double?), CatalogType EquipmentType = default(CatalogType), EquipmentSlotType EquiptmentSlotType = default(EquipmentSlotType), double? EyeHeight = default(double?), Vector3d EyeLocation = default(Vector3d), int? FluidTemperature = default(int?), int? FluidViscosity = default(int?), int? FoodRestoration = default(int?), bool? FullBlockSelectionBox = default(bool?), bool? GravityAffected = default(bool?), double? GroundLuminance = default(double?), GuiIdProperty GuiId = default(GuiIdProperty), double? Hardness = default(double?), CatalogType HeldItem = default(CatalogType), Identifiable Identifiable = default(Identifiable), bool? IndirectlyPowered = default(bool?), CatalogType Instrument = default(CatalogType), InventoryCapacity InventoryCapacity = default(InventoryCapacity), InventoryDimension InventoryDimension = default(InventoryDimension), InventoryTitle InventoryTitle = default(InventoryTitle), int? LightEmission = default(int?), MatterEnum? Matter = default(MatterEnum?), bool? Passable = default(bool?), CatalogType Record = default(CatalogType), bool? Replaceable = default(bool?), double? SaturationProperty = default(double?), double? SkyLuminance = default(double?), SlotIndex SlotIndex = default(SlotIndex), SlotPos SlotPos = default(SlotPos), SlotSide SlotSide = default(SlotSide), bool? Smeltable = default(bool?), bool? SolidCube = default(bool?), bool? StatisticsTracked = default(bool?), bool? SurrogateBlock = default(bool?), double? Temperature = default(double?), CatalogType ToolType = default(CatalogType), bool? Unbreakable = default(bool?), int? UseLimit = default(int?))
        {
            // to ensure "Stack" is required (not null)
            if (Stack == null)
            {
                throw new InvalidDataException("Stack is a required property for Slot and cannot be null");
            }
            else
            {
                this.Stack = Stack;
            }
            this.Absorption = Absorption;
            this.Age = Age;
            this.Aggressive = Aggressive;
            this.AiEnabled = AiEnabled;
            this.AngerLevel = AngerLevel;
            this.ArmorStand = ArmorStand;
            this.Art = Art;
            this.Attached = Attached;
            this.Author = Author;
            this.Axis = Axis;
            this.Banner = Banner;
            this.Beacon = Beacon;
            this.BigMushroom = BigMushroom;
            this.Block = Block;
            this.Breathing = Breathing;
            this.Breedable = Breedable;
            this.BrewingStand = BrewingStand;
            this.Brick = Brick;
            this.Career = Career;
            this.Charged = Charged;
            this.Coal = Coal;
            this.Color = Color;
            this.Command = Command;
            this.Comparator = Comparator;
            this.ConnectedDirection = ConnectedDirection;
            this.CookedFish = CookedFish;
            this.Cooldown = Cooldown;
            this.CriticalHit = CriticalHit;
            this.CustomName = CustomName;
            this.Damage = Damage;
            this.Damageable = Damageable;
            this.Decayable = Decayable;
            this.Delay = Delay;
            this.DespawnDelay = DespawnDelay;
            this.Direction = Direction;
            this.Dirt = Dirt;
            this.Disarmed = Disarmed;
            this.DisguisedBlock = DisguisedBlock;
            this.DisplayName = DisplayName;
            this.DominantHand = DominantHand;
            this.DoublePlant = DoublePlant;
            this.Drops = Drops;
            this.Durability = Durability;
            this.Dye = Dye;
            this.Enchantments = Enchantments;
            this.EndGateway = EndGateway;
            this.ExpOrb = ExpOrb;
            this.Experience = Experience;
            this.ExpireTicks = ExpireTicks;
            this.ExplosionRadius = ExplosionRadius;
            this.Extended = Extended;
            this.FallDistance = FallDistance;
            this.FallingBlock = FallingBlock;
            this.Filled = Filled;
            this.FireworkEffects = FireworkEffects;
            this.FireworkRocket = FireworkRocket;
            this.Fish = Fish;
            this.Flammable = Flammable;
            this.Fluid = Fluid;
            this.FluidLevel = FluidLevel;
            this.FluidTanks = FluidTanks;
            this.Flying = Flying;
            this.FlyingAbility = FlyingAbility;
            this.Food = Food;
            this.Furnace = Furnace;
            this.Fuse = Fuse;
            this.GameMode = GameMode;
            this.Generation = Generation;
            this.Glowing = Glowing;
            this.GoldenApple = GoldenApple;
            this.Griefs = Griefs;
            this.Growth = Growth;
            this.Health = Health;
            this.Hide = Hide;
            this.Hinge = Hinge;
            this.Horse = Horse;
            this.Igniteable = Igniteable;
            this.InWall = InWall;
            this.Inventory = Inventory;
            this.Invisibility = Invisibility;
            this.Invulnerability = Invulnerability;
            this.Joined = Joined;
            this.Knockback = Knockback;
            this.Layer = Layer;
            this.Leash = Leash;
            this.LockToken = LockToken;
            this.LogAxis = LogAxis;
            this.Lore = Lore;
            this.MinecartBlock = MinecartBlock;
            this.MobSpawner = MobSpawner;
            this.Moisture = Moisture;
            this.Note = Note;
            this.Occupied = Occupied;
            this.Ocelot = Ocelot;
            this.Open = Open;
            this.Pages = Pages;
            this.Passengers = Passengers;
            this.Persists = Persists;
            this.PickupDelay = PickupDelay;
            this.PickupRule = PickupRule;
            this.PigSaddle = PigSaddle;
            this.Piston = Piston;
            this.PlaceableOn = PlaceableOn;
            this.Plant = Plant;
            this.PlayerCreated = PlayerCreated;
            this.Playing = Playing;
            this.Portion = Portion;
            this.PotionEffects = PotionEffects;
            this.Powered = Powered;
            this.Prismarine = Prismarine;
            this.Quartz = Quartz;
            this.Rabbit = Rabbit;
            this.RailDirection = RailDirection;
            this.RedstonePower = RedstonePower;
            this.RepresentedItem = RepresentedItem;
            this.RepresentedPlayer = RepresentedPlayer;
            this.RespawnLocations = RespawnLocations;
            this.Sand = Sand;
            this.SandStone = SandStone;
            this.Screaming = Screaming;
            this.Seamless = Seamless;
            this.Shatters = Shatters;
            this.Sheared = Sheared;
            this.Shrub = Shrub;
            this.Sign = Sign;
            this.Silent = Silent;
            this.Sitting = Sitting;
            this.Skin = Skin;
            this.Skull = Skull;
            this.Slab = Slab;
            this.Sleeping = Sleeping;
            this.Slime = Slime;
            this.Sneaking = Sneaking;
            this.Snow = Snow;
            this.Spawn = Spawn;
            this.Sprinting = Sprinting;
            this.StairShape = StairShape;
            this.Statistics = Statistics;
            this.Stone = Stone;
            this.StoredEnchantments = StoredEnchantments;
            this.Structure = Structure;
            this.StuckArrows = StuckArrows;
            this.Tamed = Tamed;
            this.Target = Target;
            this.Trades = Trades;
            this.Tree = Tree;
            this.Vehicle = Vehicle;
            this.Wall = Wall;
            this.Wet = Wet;
            this.Wires = Wires;
            this.AcceptsItems = AcceptsItems;
            this.ApplicableEffect = ApplicableEffect;
            this.ArmorSlotType = ArmorSlotType;
            this.ArmorType = ArmorType;
            this.BlastResistance = BlastResistance;
            this.BurningFuel = BurningFuel;
            this.DamageAbsorption = DamageAbsorption;
            this.Efficiency = Efficiency;
            this.EquipmentType = EquipmentType;
            this.EquiptmentSlotType = EquiptmentSlotType;
            this.EyeHeight = EyeHeight;
            this.EyeLocation = EyeLocation;
            this.FluidTemperature = FluidTemperature;
            this.FluidViscosity = FluidViscosity;
            this.FoodRestoration = FoodRestoration;
            this.FullBlockSelectionBox = FullBlockSelectionBox;
            this.GravityAffected = GravityAffected;
            this.GroundLuminance = GroundLuminance;
            this.GuiId = GuiId;
            this.Hardness = Hardness;
            this.HeldItem = HeldItem;
            this.Identifiable = Identifiable;
            this.IndirectlyPowered = IndirectlyPowered;
            this.Instrument = Instrument;
            this.InventoryCapacity = InventoryCapacity;
            this.InventoryDimension = InventoryDimension;
            this.InventoryTitle = InventoryTitle;
            this.LightEmission = LightEmission;
            this.Matter = Matter;
            this.Passable = Passable;
            this.Record = Record;
            this.Replaceable = Replaceable;
            this.SaturationProperty = SaturationProperty;
            this.SkyLuminance = SkyLuminance;
            this.SlotIndex = SlotIndex;
            this.SlotPos = SlotPos;
            this.SlotSide = SlotSide;
            this.Smeltable = Smeltable;
            this.SolidCube = SolidCube;
            this.StatisticsTracked = StatisticsTracked;
            this.SurrogateBlock = SurrogateBlock;
            this.Temperature = Temperature;
            this.ToolType = ToolType;
            this.Unbreakable = Unbreakable;
            this.UseLimit = UseLimit;
        }
        
        /// <summary>
        /// The item stack that is in this slot
        /// </summary>
        /// <value>The item stack that is in this slot</value>
        [DataMember(Name="stack", EmitDefaultValue=false)]
        public ItemStack Stack { get; set; }

        /// <summary>
        /// Gets or Sets Absorption
        /// </summary>
        [DataMember(Name="absorption", EmitDefaultValue=false)]
        public double? Absorption { get; set; }

        /// <summary>
        /// Gets or Sets Age
        /// </summary>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public AgeableData Age { get; set; }

        /// <summary>
        /// Gets or Sets Aggressive
        /// </summary>
        [DataMember(Name="aggressive", EmitDefaultValue=false)]
        public bool? Aggressive { get; set; }

        /// <summary>
        /// Gets or Sets AiEnabled
        /// </summary>
        [DataMember(Name="aiEnabled", EmitDefaultValue=false)]
        public bool? AiEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AngerLevel
        /// </summary>
        [DataMember(Name="angerLevel", EmitDefaultValue=false)]
        public int? AngerLevel { get; set; }

        /// <summary>
        /// Gets or Sets ArmorStand
        /// </summary>
        [DataMember(Name="armorStand", EmitDefaultValue=false)]
        public ArmorStandData ArmorStand { get; set; }

        /// <summary>
        /// Gets or Sets Art
        /// </summary>
        [DataMember(Name="art", EmitDefaultValue=false)]
        public CatalogType Art { get; set; }

        /// <summary>
        /// Gets or Sets Attached
        /// </summary>
        [DataMember(Name="attached", EmitDefaultValue=false)]
        public bool? Attached { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }


        /// <summary>
        /// Gets or Sets Banner
        /// </summary>
        [DataMember(Name="banner", EmitDefaultValue=false)]
        public BannerData Banner { get; set; }

        /// <summary>
        /// Gets or Sets Beacon
        /// </summary>
        [DataMember(Name="beacon", EmitDefaultValue=false)]
        public BeaconData Beacon { get; set; }

        /// <summary>
        /// Gets or Sets BigMushroom
        /// </summary>
        [DataMember(Name="bigMushroom", EmitDefaultValue=false)]
        public CatalogType BigMushroom { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public BlockState Block { get; set; }

        /// <summary>
        /// Gets or Sets Breathing
        /// </summary>
        [DataMember(Name="breathing", EmitDefaultValue=false)]
        public BreathingData Breathing { get; set; }

        /// <summary>
        /// Gets or Sets Breedable
        /// </summary>
        [DataMember(Name="breedable", EmitDefaultValue=false)]
        public bool? Breedable { get; set; }

        /// <summary>
        /// Gets or Sets BrewingStand
        /// </summary>
        [DataMember(Name="brewingStand", EmitDefaultValue=false)]
        public BrewingStandData BrewingStand { get; set; }

        /// <summary>
        /// Gets or Sets Brick
        /// </summary>
        [DataMember(Name="brick", EmitDefaultValue=false)]
        public CatalogType Brick { get; set; }

        /// <summary>
        /// Gets or Sets Career
        /// </summary>
        [DataMember(Name="career", EmitDefaultValue=false)]
        public Career Career { get; set; }

        /// <summary>
        /// Gets or Sets Charged
        /// </summary>
        [DataMember(Name="charged", EmitDefaultValue=false)]
        public bool? Charged { get; set; }

        /// <summary>
        /// Gets or Sets Coal
        /// </summary>
        [DataMember(Name="coal", EmitDefaultValue=false)]
        public CatalogType Coal { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public Color Color { get; set; }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [DataMember(Name="command", EmitDefaultValue=false)]
        public CommandData Command { get; set; }

        /// <summary>
        /// Gets or Sets Comparator
        /// </summary>
        [DataMember(Name="comparator", EmitDefaultValue=false)]
        public CatalogType Comparator { get; set; }


        /// <summary>
        /// Gets or Sets CookedFish
        /// </summary>
        [DataMember(Name="cookedFish", EmitDefaultValue=false)]
        public CatalogType CookedFish { get; set; }

        /// <summary>
        /// Gets or Sets Cooldown
        /// </summary>
        [DataMember(Name="cooldown", EmitDefaultValue=false)]
        public int? Cooldown { get; set; }

        /// <summary>
        /// Gets or Sets CriticalHit
        /// </summary>
        [DataMember(Name="criticalHit", EmitDefaultValue=false)]
        public bool? CriticalHit { get; set; }

        /// <summary>
        /// Gets or Sets CustomName
        /// </summary>
        [DataMember(Name="customName", EmitDefaultValue=false)]
        public bool? CustomName { get; set; }

        /// <summary>
        /// Gets or Sets Damage
        /// </summary>
        [DataMember(Name="damage", EmitDefaultValue=false)]
        public double? Damage { get; set; }

        /// <summary>
        /// Gets or Sets Damageable
        /// </summary>
        [DataMember(Name="damageable", EmitDefaultValue=false)]
        public DamageableData Damageable { get; set; }

        /// <summary>
        /// Gets or Sets Decayable
        /// </summary>
        [DataMember(Name="decayable", EmitDefaultValue=false)]
        public bool? Decayable { get; set; }

        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int? Delay { get; set; }

        /// <summary>
        /// Gets or Sets DespawnDelay
        /// </summary>
        [DataMember(Name="despawnDelay", EmitDefaultValue=false)]
        public DespawnDelayData DespawnDelay { get; set; }


        /// <summary>
        /// Gets or Sets Dirt
        /// </summary>
        [DataMember(Name="dirt", EmitDefaultValue=false)]
        public CatalogType Dirt { get; set; }

        /// <summary>
        /// Gets or Sets Disarmed
        /// </summary>
        [DataMember(Name="disarmed", EmitDefaultValue=false)]
        public bool? Disarmed { get; set; }

        /// <summary>
        /// Gets or Sets DisguisedBlock
        /// </summary>
        [DataMember(Name="disguisedBlock", EmitDefaultValue=false)]
        public CatalogType DisguisedBlock { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DominantHand
        /// </summary>
        [DataMember(Name="dominantHand", EmitDefaultValue=false)]
        public CatalogType DominantHand { get; set; }

        /// <summary>
        /// Gets or Sets DoublePlant
        /// </summary>
        [DataMember(Name="doublePlant", EmitDefaultValue=false)]
        public CatalogType DoublePlant { get; set; }

        /// <summary>
        /// Gets or Sets Drops
        /// </summary>
        [DataMember(Name="drops", EmitDefaultValue=false)]
        public bool? Drops { get; set; }

        /// <summary>
        /// Gets or Sets Durability
        /// </summary>
        [DataMember(Name="durability", EmitDefaultValue=false)]
        public DurabilityData Durability { get; set; }

        /// <summary>
        /// Gets or Sets Dye
        /// </summary>
        [DataMember(Name="dye", EmitDefaultValue=false)]
        public DyeColor Dye { get; set; }

        /// <summary>
        /// Gets or Sets Enchantments
        /// </summary>
        [DataMember(Name="enchantments", EmitDefaultValue=false)]
        public List<Enchantment> Enchantments { get; set; }

        /// <summary>
        /// Gets or Sets EndGateway
        /// </summary>
        [DataMember(Name="endGateway", EmitDefaultValue=false)]
        public EndGatewayData EndGateway { get; set; }

        /// <summary>
        /// Gets or Sets ExpOrb
        /// </summary>
        [DataMember(Name="expOrb", EmitDefaultValue=false)]
        public int? ExpOrb { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public ExperienceHolderData Experience { get; set; }

        /// <summary>
        /// Gets or Sets ExpireTicks
        /// </summary>
        [DataMember(Name="expireTicks", EmitDefaultValue=false)]
        public int? ExpireTicks { get; set; }

        /// <summary>
        /// Gets or Sets ExplosionRadius
        /// </summary>
        [DataMember(Name="explosionRadius", EmitDefaultValue=false)]
        public int? ExplosionRadius { get; set; }

        /// <summary>
        /// Gets or Sets Extended
        /// </summary>
        [DataMember(Name="extended", EmitDefaultValue=false)]
        public bool? Extended { get; set; }

        /// <summary>
        /// Gets or Sets FallDistance
        /// </summary>
        [DataMember(Name="fallDistance", EmitDefaultValue=false)]
        public float? FallDistance { get; set; }

        /// <summary>
        /// Gets or Sets FallingBlock
        /// </summary>
        [DataMember(Name="fallingBlock", EmitDefaultValue=false)]
        public FallingBlockData FallingBlock { get; set; }

        /// <summary>
        /// Gets or Sets Filled
        /// </summary>
        [DataMember(Name="filled", EmitDefaultValue=false)]
        public bool? Filled { get; set; }

        /// <summary>
        /// Gets or Sets FireworkEffects
        /// </summary>
        [DataMember(Name="fireworkEffects", EmitDefaultValue=false)]
        public List<FireworkEffect> FireworkEffects { get; set; }

        /// <summary>
        /// Gets or Sets FireworkRocket
        /// </summary>
        [DataMember(Name="fireworkRocket", EmitDefaultValue=false)]
        public FireworkRocketData FireworkRocket { get; set; }

        /// <summary>
        /// Gets or Sets Fish
        /// </summary>
        [DataMember(Name="fish", EmitDefaultValue=false)]
        public CatalogType Fish { get; set; }

        /// <summary>
        /// Gets or Sets Flammable
        /// </summary>
        [DataMember(Name="flammable", EmitDefaultValue=false)]
        public bool? Flammable { get; set; }

        /// <summary>
        /// Gets or Sets Fluid
        /// </summary>
        [DataMember(Name="fluid", EmitDefaultValue=false)]
        public FluidStack Fluid { get; set; }

        /// <summary>
        /// Gets or Sets FluidLevel
        /// </summary>
        [DataMember(Name="fluidLevel", EmitDefaultValue=false)]
        public int? FluidLevel { get; set; }

        /// <summary>
        /// Gets or Sets FluidTanks
        /// </summary>
        [DataMember(Name="fluidTanks", EmitDefaultValue=false)]
        public Dictionary<string, List<FluidStack>> FluidTanks { get; set; }

        /// <summary>
        /// Gets or Sets Flying
        /// </summary>
        [DataMember(Name="flying", EmitDefaultValue=false)]
        public bool? Flying { get; set; }

        /// <summary>
        /// Gets or Sets FlyingAbility
        /// </summary>
        [DataMember(Name="flyingAbility", EmitDefaultValue=false)]
        public bool? FlyingAbility { get; set; }

        /// <summary>
        /// Gets or Sets Food
        /// </summary>
        [DataMember(Name="food", EmitDefaultValue=false)]
        public FoodData Food { get; set; }

        /// <summary>
        /// Gets or Sets Furnace
        /// </summary>
        [DataMember(Name="furnace", EmitDefaultValue=false)]
        public FurnaceData Furnace { get; set; }

        /// <summary>
        /// Gets or Sets Fuse
        /// </summary>
        [DataMember(Name="fuse", EmitDefaultValue=false)]
        public FuseData Fuse { get; set; }

        /// <summary>
        /// Gets or Sets GameMode
        /// </summary>
        [DataMember(Name="gameMode", EmitDefaultValue=false)]
        public GameMode GameMode { get; set; }

        /// <summary>
        /// Gets or Sets Generation
        /// </summary>
        [DataMember(Name="generation", EmitDefaultValue=false)]
        public int? Generation { get; set; }

        /// <summary>
        /// Gets or Sets Glowing
        /// </summary>
        [DataMember(Name="glowing", EmitDefaultValue=false)]
        public bool? Glowing { get; set; }

        /// <summary>
        /// Gets or Sets GoldenApple
        /// </summary>
        [DataMember(Name="goldenApple", EmitDefaultValue=false)]
        public CatalogType GoldenApple { get; set; }

        /// <summary>
        /// Gets or Sets Griefs
        /// </summary>
        [DataMember(Name="griefs", EmitDefaultValue=false)]
        public bool? Griefs { get; set; }

        /// <summary>
        /// Gets or Sets Growth
        /// </summary>
        [DataMember(Name="growth", EmitDefaultValue=false)]
        public GrowthData Growth { get; set; }

        /// <summary>
        /// Gets or Sets Health
        /// </summary>
        [DataMember(Name="health", EmitDefaultValue=false)]
        public HealthData Health { get; set; }

        /// <summary>
        /// Gets or Sets Hide
        /// </summary>
        [DataMember(Name="hide", EmitDefaultValue=false)]
        public HideData Hide { get; set; }

        /// <summary>
        /// Gets or Sets Hinge
        /// </summary>
        [DataMember(Name="hinge", EmitDefaultValue=false)]
        public CatalogType Hinge { get; set; }

        /// <summary>
        /// Gets or Sets Horse
        /// </summary>
        [DataMember(Name="horse", EmitDefaultValue=false)]
        public HorseData Horse { get; set; }

        /// <summary>
        /// Gets or Sets Igniteable
        /// </summary>
        [DataMember(Name="igniteable", EmitDefaultValue=false)]
        public IgniteableData Igniteable { get; set; }

        /// <summary>
        /// Gets or Sets InWall
        /// </summary>
        [DataMember(Name="inWall", EmitDefaultValue=false)]
        public bool? InWall { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name="inventory", EmitDefaultValue=false)]
        public Inventory Inventory { get; set; }

        /// <summary>
        /// Gets or Sets Invisibility
        /// </summary>
        [DataMember(Name="invisibility", EmitDefaultValue=false)]
        public InvisibilityData Invisibility { get; set; }

        /// <summary>
        /// Gets or Sets Invulnerability
        /// </summary>
        [DataMember(Name="invulnerability", EmitDefaultValue=false)]
        public InvulnerabilityData Invulnerability { get; set; }

        /// <summary>
        /// Gets or Sets Joined
        /// </summary>
        [DataMember(Name="joined", EmitDefaultValue=false)]
        public JoinData Joined { get; set; }

        /// <summary>
        /// Gets or Sets Knockback
        /// </summary>
        [DataMember(Name="knockback", EmitDefaultValue=false)]
        public int? Knockback { get; set; }

        /// <summary>
        /// Gets or Sets Layer
        /// </summary>
        [DataMember(Name="layer", EmitDefaultValue=false)]
        public int? Layer { get; set; }

        /// <summary>
        /// Gets or Sets Leash
        /// </summary>
        [DataMember(Name="leash", EmitDefaultValue=false)]
        public LeashData Leash { get; set; }

        /// <summary>
        /// Gets or Sets LockToken
        /// </summary>
        [DataMember(Name="lockToken", EmitDefaultValue=false)]
        public string LockToken { get; set; }

        /// <summary>
        /// Gets or Sets LogAxis
        /// </summary>
        [DataMember(Name="logAxis", EmitDefaultValue=false)]
        public CatalogType LogAxis { get; set; }

        /// <summary>
        /// Gets or Sets Lore
        /// </summary>
        [DataMember(Name="lore", EmitDefaultValue=false)]
        public List<string> Lore { get; set; }

        /// <summary>
        /// Gets or Sets MinecartBlock
        /// </summary>
        [DataMember(Name="minecartBlock", EmitDefaultValue=false)]
        public MinecartBlockData MinecartBlock { get; set; }

        /// <summary>
        /// Gets or Sets MobSpawner
        /// </summary>
        [DataMember(Name="mobSpawner", EmitDefaultValue=false)]
        public MobSpawnerData MobSpawner { get; set; }

        /// <summary>
        /// Gets or Sets Moisture
        /// </summary>
        [DataMember(Name="moisture", EmitDefaultValue=false)]
        public int? Moisture { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public CatalogType Note { get; set; }

        /// <summary>
        /// Gets or Sets Occupied
        /// </summary>
        [DataMember(Name="occupied", EmitDefaultValue=false)]
        public bool? Occupied { get; set; }

        /// <summary>
        /// Gets or Sets Ocelot
        /// </summary>
        [DataMember(Name="ocelot", EmitDefaultValue=false)]
        public CatalogType Ocelot { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public bool? Open { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public List<string> Pages { get; set; }

        /// <summary>
        /// Gets or Sets Passengers
        /// </summary>
        [DataMember(Name="passengers", EmitDefaultValue=false)]
        public List<Guid?> Passengers { get; set; }

        /// <summary>
        /// Gets or Sets Persists
        /// </summary>
        [DataMember(Name="persists", EmitDefaultValue=false)]
        public bool? Persists { get; set; }

        /// <summary>
        /// Gets or Sets PickupDelay
        /// </summary>
        [DataMember(Name="pickupDelay", EmitDefaultValue=false)]
        public PickupDelayData PickupDelay { get; set; }

        /// <summary>
        /// Gets or Sets PickupRule
        /// </summary>
        [DataMember(Name="pickupRule", EmitDefaultValue=false)]
        public CatalogType PickupRule { get; set; }

        /// <summary>
        /// Gets or Sets PigSaddle
        /// </summary>
        [DataMember(Name="pigSaddle", EmitDefaultValue=false)]
        public bool? PigSaddle { get; set; }

        /// <summary>
        /// Gets or Sets Piston
        /// </summary>
        [DataMember(Name="piston", EmitDefaultValue=false)]
        public CatalogType Piston { get; set; }

        /// <summary>
        /// Gets or Sets PlaceableOn
        /// </summary>
        [DataMember(Name="placeableOn", EmitDefaultValue=false)]
        public List<CatalogType> PlaceableOn { get; set; }

        /// <summary>
        /// Gets or Sets Plant
        /// </summary>
        [DataMember(Name="plant", EmitDefaultValue=false)]
        public CatalogType Plant { get; set; }

        /// <summary>
        /// Gets or Sets PlayerCreated
        /// </summary>
        [DataMember(Name="playerCreated", EmitDefaultValue=false)]
        public bool? PlayerCreated { get; set; }

        /// <summary>
        /// Gets or Sets Playing
        /// </summary>
        [DataMember(Name="playing", EmitDefaultValue=false)]
        public bool? Playing { get; set; }

        /// <summary>
        /// Gets or Sets Portion
        /// </summary>
        [DataMember(Name="portion", EmitDefaultValue=false)]
        public CatalogType Portion { get; set; }

        /// <summary>
        /// Gets or Sets PotionEffects
        /// </summary>
        [DataMember(Name="potionEffects", EmitDefaultValue=false)]
        public List<PotionEffect> PotionEffects { get; set; }

        /// <summary>
        /// Gets or Sets Powered
        /// </summary>
        [DataMember(Name="powered", EmitDefaultValue=false)]
        public bool? Powered { get; set; }

        /// <summary>
        /// Gets or Sets Prismarine
        /// </summary>
        [DataMember(Name="prismarine", EmitDefaultValue=false)]
        public CatalogType Prismarine { get; set; }

        /// <summary>
        /// Gets or Sets Quartz
        /// </summary>
        [DataMember(Name="quartz", EmitDefaultValue=false)]
        public CatalogType Quartz { get; set; }

        /// <summary>
        /// Gets or Sets Rabbit
        /// </summary>
        [DataMember(Name="rabbit", EmitDefaultValue=false)]
        public CatalogType Rabbit { get; set; }

        /// <summary>
        /// Gets or Sets RailDirection
        /// </summary>
        [DataMember(Name="railDirection", EmitDefaultValue=false)]
        public CatalogType RailDirection { get; set; }

        /// <summary>
        /// Gets or Sets RedstonePower
        /// </summary>
        [DataMember(Name="redstonePower", EmitDefaultValue=false)]
        public int? RedstonePower { get; set; }

        /// <summary>
        /// Gets or Sets RepresentedItem
        /// </summary>
        [DataMember(Name="representedItem", EmitDefaultValue=false)]
        public ItemStack RepresentedItem { get; set; }

        /// <summary>
        /// Gets or Sets RepresentedPlayer
        /// </summary>
        [DataMember(Name="representedPlayer", EmitDefaultValue=false)]
        public string RepresentedPlayer { get; set; }

        /// <summary>
        /// Gets or Sets RespawnLocations
        /// </summary>
        [DataMember(Name="respawnLocations", EmitDefaultValue=false)]
        public Dictionary<string, Location> RespawnLocations { get; set; }

        /// <summary>
        /// Gets or Sets Sand
        /// </summary>
        [DataMember(Name="sand", EmitDefaultValue=false)]
        public CatalogType Sand { get; set; }

        /// <summary>
        /// Gets or Sets SandStone
        /// </summary>
        [DataMember(Name="sandStone", EmitDefaultValue=false)]
        public CatalogType SandStone { get; set; }

        /// <summary>
        /// Gets or Sets Screaming
        /// </summary>
        [DataMember(Name="screaming", EmitDefaultValue=false)]
        public bool? Screaming { get; set; }

        /// <summary>
        /// Gets or Sets Seamless
        /// </summary>
        [DataMember(Name="seamless", EmitDefaultValue=false)]
        public bool? Seamless { get; set; }

        /// <summary>
        /// Gets or Sets Shatters
        /// </summary>
        [DataMember(Name="shatters", EmitDefaultValue=false)]
        public bool? Shatters { get; set; }

        /// <summary>
        /// Gets or Sets Sheared
        /// </summary>
        [DataMember(Name="sheared", EmitDefaultValue=false)]
        public bool? Sheared { get; set; }

        /// <summary>
        /// Gets or Sets Shrub
        /// </summary>
        [DataMember(Name="shrub", EmitDefaultValue=false)]
        public CatalogType Shrub { get; set; }

        /// <summary>
        /// Gets or Sets Sign
        /// </summary>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public List<string> Sign { get; set; }

        /// <summary>
        /// Gets or Sets Silent
        /// </summary>
        [DataMember(Name="silent", EmitDefaultValue=false)]
        public bool? Silent { get; set; }

        /// <summary>
        /// Gets or Sets Sitting
        /// </summary>
        [DataMember(Name="sitting", EmitDefaultValue=false)]
        public bool? Sitting { get; set; }

        /// <summary>
        /// Gets or Sets Skin
        /// </summary>
        [DataMember(Name="skin", EmitDefaultValue=false)]
        public Guid? Skin { get; set; }

        /// <summary>
        /// Gets or Sets Skull
        /// </summary>
        [DataMember(Name="skull", EmitDefaultValue=false)]
        public CatalogType Skull { get; set; }

        /// <summary>
        /// Gets or Sets Slab
        /// </summary>
        [DataMember(Name="slab", EmitDefaultValue=false)]
        public CatalogType Slab { get; set; }

        /// <summary>
        /// Gets or Sets Sleeping
        /// </summary>
        [DataMember(Name="sleeping", EmitDefaultValue=false)]
        public bool? Sleeping { get; set; }

        /// <summary>
        /// Gets or Sets Slime
        /// </summary>
        [DataMember(Name="slime", EmitDefaultValue=false)]
        public SlimeData Slime { get; set; }

        /// <summary>
        /// Gets or Sets Sneaking
        /// </summary>
        [DataMember(Name="sneaking", EmitDefaultValue=false)]
        public bool? Sneaking { get; set; }

        /// <summary>
        /// Gets or Sets Snow
        /// </summary>
        [DataMember(Name="snow", EmitDefaultValue=false)]
        public bool? Snow { get; set; }

        /// <summary>
        /// Gets or Sets Spawn
        /// </summary>
        [DataMember(Name="spawn", EmitDefaultValue=false)]
        public CatalogType Spawn { get; set; }

        /// <summary>
        /// Gets or Sets Sprinting
        /// </summary>
        [DataMember(Name="sprinting", EmitDefaultValue=false)]
        public bool? Sprinting { get; set; }

        /// <summary>
        /// Gets or Sets StairShape
        /// </summary>
        [DataMember(Name="stairShape", EmitDefaultValue=false)]
        public CatalogType StairShape { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name="statistics", EmitDefaultValue=false)]
        public List<Stat> Statistics { get; set; }

        /// <summary>
        /// Gets or Sets Stone
        /// </summary>
        [DataMember(Name="stone", EmitDefaultValue=false)]
        public CatalogType Stone { get; set; }

        /// <summary>
        /// Gets or Sets StoredEnchantments
        /// </summary>
        [DataMember(Name="storedEnchantments", EmitDefaultValue=false)]
        public List<Enchantment> StoredEnchantments { get; set; }

        /// <summary>
        /// Gets or Sets Structure
        /// </summary>
        [DataMember(Name="structure", EmitDefaultValue=false)]
        public StructureData Structure { get; set; }

        /// <summary>
        /// Gets or Sets StuckArrows
        /// </summary>
        [DataMember(Name="stuckArrows", EmitDefaultValue=false)]
        public int? StuckArrows { get; set; }

        /// <summary>
        /// Gets or Sets Tamed
        /// </summary>
        [DataMember(Name="tamed", EmitDefaultValue=false)]
        public TameableData Tamed { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public Vector3d Target { get; set; }

        /// <summary>
        /// Gets or Sets Trades
        /// </summary>
        [DataMember(Name="trades", EmitDefaultValue=false)]
        public List<TradeOffer> Trades { get; set; }

        /// <summary>
        /// Gets or Sets Tree
        /// </summary>
        [DataMember(Name="tree", EmitDefaultValue=false)]
        public CatalogType Tree { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name="vehicle", EmitDefaultValue=false)]
        public VehicleData Vehicle { get; set; }

        /// <summary>
        /// Gets or Sets Wall
        /// </summary>
        [DataMember(Name="wall", EmitDefaultValue=false)]
        public CatalogType Wall { get; set; }

        /// <summary>
        /// Gets or Sets Wet
        /// </summary>
        [DataMember(Name="wet", EmitDefaultValue=false)]
        public bool? Wet { get; set; }

        /// <summary>
        /// Gets or Sets Wires
        /// </summary>
        [DataMember(Name="wires", EmitDefaultValue=false)]
        public WireAttachmentData Wires { get; set; }

        /// <summary>
        /// Gets or Sets AcceptsItems
        /// </summary>
        [DataMember(Name="acceptsItems", EmitDefaultValue=false)]
        public AcceptsItems AcceptsItems { get; set; }

        /// <summary>
        /// Gets or Sets ApplicableEffect
        /// </summary>
        [DataMember(Name="applicableEffect", EmitDefaultValue=false)]
        public List<PotionEffect> ApplicableEffect { get; set; }

        /// <summary>
        /// Gets or Sets ArmorSlotType
        /// </summary>
        [DataMember(Name="armorSlotType", EmitDefaultValue=false)]
        public ArmorSlotType ArmorSlotType { get; set; }

        /// <summary>
        /// Gets or Sets ArmorType
        /// </summary>
        [DataMember(Name="armorType", EmitDefaultValue=false)]
        public CatalogType ArmorType { get; set; }

        /// <summary>
        /// Gets or Sets BlastResistance
        /// </summary>
        [DataMember(Name="blastResistance", EmitDefaultValue=false)]
        public double? BlastResistance { get; set; }

        /// <summary>
        /// Gets or Sets BurningFuel
        /// </summary>
        [DataMember(Name="burningFuel", EmitDefaultValue=false)]
        public int? BurningFuel { get; set; }

        /// <summary>
        /// Gets or Sets DamageAbsorption
        /// </summary>
        [DataMember(Name="damageAbsorption", EmitDefaultValue=false)]
        public int? DamageAbsorption { get; set; }

        /// <summary>
        /// Gets or Sets Efficiency
        /// </summary>
        [DataMember(Name="efficiency", EmitDefaultValue=false)]
        public double? Efficiency { get; set; }

        /// <summary>
        /// Gets or Sets EquipmentType
        /// </summary>
        [DataMember(Name="equipmentType", EmitDefaultValue=false)]
        public CatalogType EquipmentType { get; set; }

        /// <summary>
        /// Gets or Sets EquiptmentSlotType
        /// </summary>
        [DataMember(Name="equiptmentSlotType", EmitDefaultValue=false)]
        public EquipmentSlotType EquiptmentSlotType { get; set; }

        /// <summary>
        /// Gets or Sets EyeHeight
        /// </summary>
        [DataMember(Name="eyeHeight", EmitDefaultValue=false)]
        public double? EyeHeight { get; set; }

        /// <summary>
        /// Gets or Sets EyeLocation
        /// </summary>
        [DataMember(Name="eyeLocation", EmitDefaultValue=false)]
        public Vector3d EyeLocation { get; set; }

        /// <summary>
        /// Gets or Sets FluidTemperature
        /// </summary>
        [DataMember(Name="fluidTemperature", EmitDefaultValue=false)]
        public int? FluidTemperature { get; set; }

        /// <summary>
        /// Gets or Sets FluidViscosity
        /// </summary>
        [DataMember(Name="fluidViscosity", EmitDefaultValue=false)]
        public int? FluidViscosity { get; set; }

        /// <summary>
        /// Gets or Sets FoodRestoration
        /// </summary>
        [DataMember(Name="foodRestoration", EmitDefaultValue=false)]
        public int? FoodRestoration { get; set; }

        /// <summary>
        /// Gets or Sets FullBlockSelectionBox
        /// </summary>
        [DataMember(Name="fullBlockSelectionBox", EmitDefaultValue=false)]
        public bool? FullBlockSelectionBox { get; set; }

        /// <summary>
        /// Gets or Sets GravityAffected
        /// </summary>
        [DataMember(Name="gravityAffected", EmitDefaultValue=false)]
        public bool? GravityAffected { get; set; }

        /// <summary>
        /// Gets or Sets GroundLuminance
        /// </summary>
        [DataMember(Name="groundLuminance", EmitDefaultValue=false)]
        public double? GroundLuminance { get; set; }

        /// <summary>
        /// Gets or Sets GuiId
        /// </summary>
        [DataMember(Name="guiId", EmitDefaultValue=false)]
        public GuiIdProperty GuiId { get; set; }

        /// <summary>
        /// Gets or Sets Hardness
        /// </summary>
        [DataMember(Name="hardness", EmitDefaultValue=false)]
        public double? Hardness { get; set; }

        /// <summary>
        /// Gets or Sets HeldItem
        /// </summary>
        [DataMember(Name="heldItem", EmitDefaultValue=false)]
        public CatalogType HeldItem { get; set; }

        /// <summary>
        /// Gets or Sets Identifiable
        /// </summary>
        [DataMember(Name="identifiable", EmitDefaultValue=false)]
        public Identifiable Identifiable { get; set; }

        /// <summary>
        /// Gets or Sets IndirectlyPowered
        /// </summary>
        [DataMember(Name="indirectlyPowered", EmitDefaultValue=false)]
        public bool? IndirectlyPowered { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name="instrument", EmitDefaultValue=false)]
        public CatalogType Instrument { get; set; }

        /// <summary>
        /// Gets or Sets InventoryCapacity
        /// </summary>
        [DataMember(Name="inventoryCapacity", EmitDefaultValue=false)]
        public InventoryCapacity InventoryCapacity { get; set; }

        /// <summary>
        /// Gets or Sets InventoryDimension
        /// </summary>
        [DataMember(Name="inventoryDimension", EmitDefaultValue=false)]
        public InventoryDimension InventoryDimension { get; set; }

        /// <summary>
        /// Gets or Sets InventoryTitle
        /// </summary>
        [DataMember(Name="inventoryTitle", EmitDefaultValue=false)]
        public InventoryTitle InventoryTitle { get; set; }

        /// <summary>
        /// Gets or Sets LightEmission
        /// </summary>
        [DataMember(Name="lightEmission", EmitDefaultValue=false)]
        public int? LightEmission { get; set; }


        /// <summary>
        /// Gets or Sets Passable
        /// </summary>
        [DataMember(Name="passable", EmitDefaultValue=false)]
        public bool? Passable { get; set; }

        /// <summary>
        /// Gets or Sets Record
        /// </summary>
        [DataMember(Name="record", EmitDefaultValue=false)]
        public CatalogType Record { get; set; }

        /// <summary>
        /// Gets or Sets Replaceable
        /// </summary>
        [DataMember(Name="replaceable", EmitDefaultValue=false)]
        public bool? Replaceable { get; set; }

        /// <summary>
        /// Gets or Sets SaturationProperty
        /// </summary>
        [DataMember(Name="saturationProperty", EmitDefaultValue=false)]
        public double? SaturationProperty { get; set; }

        /// <summary>
        /// Gets or Sets SkyLuminance
        /// </summary>
        [DataMember(Name="skyLuminance", EmitDefaultValue=false)]
        public double? SkyLuminance { get; set; }

        /// <summary>
        /// Gets or Sets SlotIndex
        /// </summary>
        [DataMember(Name="slotIndex", EmitDefaultValue=false)]
        public SlotIndex SlotIndex { get; set; }

        /// <summary>
        /// Gets or Sets SlotPos
        /// </summary>
        [DataMember(Name="slotPos", EmitDefaultValue=false)]
        public SlotPos SlotPos { get; set; }

        /// <summary>
        /// Gets or Sets SlotSide
        /// </summary>
        [DataMember(Name="slotSide", EmitDefaultValue=false)]
        public SlotSide SlotSide { get; set; }

        /// <summary>
        /// Gets or Sets Smeltable
        /// </summary>
        [DataMember(Name="smeltable", EmitDefaultValue=false)]
        public bool? Smeltable { get; set; }

        /// <summary>
        /// Gets or Sets SolidCube
        /// </summary>
        [DataMember(Name="solidCube", EmitDefaultValue=false)]
        public bool? SolidCube { get; set; }

        /// <summary>
        /// Gets or Sets StatisticsTracked
        /// </summary>
        [DataMember(Name="statisticsTracked", EmitDefaultValue=false)]
        public bool? StatisticsTracked { get; set; }

        /// <summary>
        /// Gets or Sets SurrogateBlock
        /// </summary>
        [DataMember(Name="surrogateBlock", EmitDefaultValue=false)]
        public bool? SurrogateBlock { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name="temperature", EmitDefaultValue=false)]
        public double? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets ToolType
        /// </summary>
        [DataMember(Name="toolType", EmitDefaultValue=false)]
        public CatalogType ToolType { get; set; }

        /// <summary>
        /// Gets or Sets Unbreakable
        /// </summary>
        [DataMember(Name="unbreakable", EmitDefaultValue=false)]
        public bool? Unbreakable { get; set; }

        /// <summary>
        /// Gets or Sets UseLimit
        /// </summary>
        [DataMember(Name="useLimit", EmitDefaultValue=false)]
        public int? UseLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Slot {\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("  Absorption: ").Append(Absorption).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  Aggressive: ").Append(Aggressive).Append("\n");
            sb.Append("  AiEnabled: ").Append(AiEnabled).Append("\n");
            sb.Append("  AngerLevel: ").Append(AngerLevel).Append("\n");
            sb.Append("  ArmorStand: ").Append(ArmorStand).Append("\n");
            sb.Append("  Art: ").Append(Art).Append("\n");
            sb.Append("  Attached: ").Append(Attached).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Axis: ").Append(Axis).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  Beacon: ").Append(Beacon).Append("\n");
            sb.Append("  BigMushroom: ").Append(BigMushroom).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Breathing: ").Append(Breathing).Append("\n");
            sb.Append("  Breedable: ").Append(Breedable).Append("\n");
            sb.Append("  BrewingStand: ").Append(BrewingStand).Append("\n");
            sb.Append("  Brick: ").Append(Brick).Append("\n");
            sb.Append("  Career: ").Append(Career).Append("\n");
            sb.Append("  Charged: ").Append(Charged).Append("\n");
            sb.Append("  Coal: ").Append(Coal).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Comparator: ").Append(Comparator).Append("\n");
            sb.Append("  ConnectedDirection: ").Append(ConnectedDirection).Append("\n");
            sb.Append("  CookedFish: ").Append(CookedFish).Append("\n");
            sb.Append("  Cooldown: ").Append(Cooldown).Append("\n");
            sb.Append("  CriticalHit: ").Append(CriticalHit).Append("\n");
            sb.Append("  CustomName: ").Append(CustomName).Append("\n");
            sb.Append("  Damage: ").Append(Damage).Append("\n");
            sb.Append("  Damageable: ").Append(Damageable).Append("\n");
            sb.Append("  Decayable: ").Append(Decayable).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  DespawnDelay: ").Append(DespawnDelay).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Dirt: ").Append(Dirt).Append("\n");
            sb.Append("  Disarmed: ").Append(Disarmed).Append("\n");
            sb.Append("  DisguisedBlock: ").Append(DisguisedBlock).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DominantHand: ").Append(DominantHand).Append("\n");
            sb.Append("  DoublePlant: ").Append(DoublePlant).Append("\n");
            sb.Append("  Drops: ").Append(Drops).Append("\n");
            sb.Append("  Durability: ").Append(Durability).Append("\n");
            sb.Append("  Dye: ").Append(Dye).Append("\n");
            sb.Append("  Enchantments: ").Append(Enchantments).Append("\n");
            sb.Append("  EndGateway: ").Append(EndGateway).Append("\n");
            sb.Append("  ExpOrb: ").Append(ExpOrb).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  ExpireTicks: ").Append(ExpireTicks).Append("\n");
            sb.Append("  ExplosionRadius: ").Append(ExplosionRadius).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("  FallDistance: ").Append(FallDistance).Append("\n");
            sb.Append("  FallingBlock: ").Append(FallingBlock).Append("\n");
            sb.Append("  Filled: ").Append(Filled).Append("\n");
            sb.Append("  FireworkEffects: ").Append(FireworkEffects).Append("\n");
            sb.Append("  FireworkRocket: ").Append(FireworkRocket).Append("\n");
            sb.Append("  Fish: ").Append(Fish).Append("\n");
            sb.Append("  Flammable: ").Append(Flammable).Append("\n");
            sb.Append("  Fluid: ").Append(Fluid).Append("\n");
            sb.Append("  FluidLevel: ").Append(FluidLevel).Append("\n");
            sb.Append("  FluidTanks: ").Append(FluidTanks).Append("\n");
            sb.Append("  Flying: ").Append(Flying).Append("\n");
            sb.Append("  FlyingAbility: ").Append(FlyingAbility).Append("\n");
            sb.Append("  Food: ").Append(Food).Append("\n");
            sb.Append("  Furnace: ").Append(Furnace).Append("\n");
            sb.Append("  Fuse: ").Append(Fuse).Append("\n");
            sb.Append("  GameMode: ").Append(GameMode).Append("\n");
            sb.Append("  Generation: ").Append(Generation).Append("\n");
            sb.Append("  Glowing: ").Append(Glowing).Append("\n");
            sb.Append("  GoldenApple: ").Append(GoldenApple).Append("\n");
            sb.Append("  Griefs: ").Append(Griefs).Append("\n");
            sb.Append("  Growth: ").Append(Growth).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("  Hide: ").Append(Hide).Append("\n");
            sb.Append("  Hinge: ").Append(Hinge).Append("\n");
            sb.Append("  Horse: ").Append(Horse).Append("\n");
            sb.Append("  Igniteable: ").Append(Igniteable).Append("\n");
            sb.Append("  InWall: ").Append(InWall).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Invisibility: ").Append(Invisibility).Append("\n");
            sb.Append("  Invulnerability: ").Append(Invulnerability).Append("\n");
            sb.Append("  Joined: ").Append(Joined).Append("\n");
            sb.Append("  Knockback: ").Append(Knockback).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  Leash: ").Append(Leash).Append("\n");
            sb.Append("  LockToken: ").Append(LockToken).Append("\n");
            sb.Append("  LogAxis: ").Append(LogAxis).Append("\n");
            sb.Append("  Lore: ").Append(Lore).Append("\n");
            sb.Append("  MinecartBlock: ").Append(MinecartBlock).Append("\n");
            sb.Append("  MobSpawner: ").Append(MobSpawner).Append("\n");
            sb.Append("  Moisture: ").Append(Moisture).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Occupied: ").Append(Occupied).Append("\n");
            sb.Append("  Ocelot: ").Append(Ocelot).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Passengers: ").Append(Passengers).Append("\n");
            sb.Append("  Persists: ").Append(Persists).Append("\n");
            sb.Append("  PickupDelay: ").Append(PickupDelay).Append("\n");
            sb.Append("  PickupRule: ").Append(PickupRule).Append("\n");
            sb.Append("  PigSaddle: ").Append(PigSaddle).Append("\n");
            sb.Append("  Piston: ").Append(Piston).Append("\n");
            sb.Append("  PlaceableOn: ").Append(PlaceableOn).Append("\n");
            sb.Append("  Plant: ").Append(Plant).Append("\n");
            sb.Append("  PlayerCreated: ").Append(PlayerCreated).Append("\n");
            sb.Append("  Playing: ").Append(Playing).Append("\n");
            sb.Append("  Portion: ").Append(Portion).Append("\n");
            sb.Append("  PotionEffects: ").Append(PotionEffects).Append("\n");
            sb.Append("  Powered: ").Append(Powered).Append("\n");
            sb.Append("  Prismarine: ").Append(Prismarine).Append("\n");
            sb.Append("  Quartz: ").Append(Quartz).Append("\n");
            sb.Append("  Rabbit: ").Append(Rabbit).Append("\n");
            sb.Append("  RailDirection: ").Append(RailDirection).Append("\n");
            sb.Append("  RedstonePower: ").Append(RedstonePower).Append("\n");
            sb.Append("  RepresentedItem: ").Append(RepresentedItem).Append("\n");
            sb.Append("  RepresentedPlayer: ").Append(RepresentedPlayer).Append("\n");
            sb.Append("  RespawnLocations: ").Append(RespawnLocations).Append("\n");
            sb.Append("  Sand: ").Append(Sand).Append("\n");
            sb.Append("  SandStone: ").Append(SandStone).Append("\n");
            sb.Append("  Screaming: ").Append(Screaming).Append("\n");
            sb.Append("  Seamless: ").Append(Seamless).Append("\n");
            sb.Append("  Shatters: ").Append(Shatters).Append("\n");
            sb.Append("  Sheared: ").Append(Sheared).Append("\n");
            sb.Append("  Shrub: ").Append(Shrub).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  Silent: ").Append(Silent).Append("\n");
            sb.Append("  Sitting: ").Append(Sitting).Append("\n");
            sb.Append("  Skin: ").Append(Skin).Append("\n");
            sb.Append("  Skull: ").Append(Skull).Append("\n");
            sb.Append("  Slab: ").Append(Slab).Append("\n");
            sb.Append("  Sleeping: ").Append(Sleeping).Append("\n");
            sb.Append("  Slime: ").Append(Slime).Append("\n");
            sb.Append("  Sneaking: ").Append(Sneaking).Append("\n");
            sb.Append("  Snow: ").Append(Snow).Append("\n");
            sb.Append("  Spawn: ").Append(Spawn).Append("\n");
            sb.Append("  Sprinting: ").Append(Sprinting).Append("\n");
            sb.Append("  StairShape: ").Append(StairShape).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  Stone: ").Append(Stone).Append("\n");
            sb.Append("  StoredEnchantments: ").Append(StoredEnchantments).Append("\n");
            sb.Append("  Structure: ").Append(Structure).Append("\n");
            sb.Append("  StuckArrows: ").Append(StuckArrows).Append("\n");
            sb.Append("  Tamed: ").Append(Tamed).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("  Tree: ").Append(Tree).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("  Wall: ").Append(Wall).Append("\n");
            sb.Append("  Wet: ").Append(Wet).Append("\n");
            sb.Append("  Wires: ").Append(Wires).Append("\n");
            sb.Append("  AcceptsItems: ").Append(AcceptsItems).Append("\n");
            sb.Append("  ApplicableEffect: ").Append(ApplicableEffect).Append("\n");
            sb.Append("  ArmorSlotType: ").Append(ArmorSlotType).Append("\n");
            sb.Append("  ArmorType: ").Append(ArmorType).Append("\n");
            sb.Append("  BlastResistance: ").Append(BlastResistance).Append("\n");
            sb.Append("  BurningFuel: ").Append(BurningFuel).Append("\n");
            sb.Append("  DamageAbsorption: ").Append(DamageAbsorption).Append("\n");
            sb.Append("  Efficiency: ").Append(Efficiency).Append("\n");
            sb.Append("  EquipmentType: ").Append(EquipmentType).Append("\n");
            sb.Append("  EquiptmentSlotType: ").Append(EquiptmentSlotType).Append("\n");
            sb.Append("  EyeHeight: ").Append(EyeHeight).Append("\n");
            sb.Append("  EyeLocation: ").Append(EyeLocation).Append("\n");
            sb.Append("  FluidTemperature: ").Append(FluidTemperature).Append("\n");
            sb.Append("  FluidViscosity: ").Append(FluidViscosity).Append("\n");
            sb.Append("  FoodRestoration: ").Append(FoodRestoration).Append("\n");
            sb.Append("  FullBlockSelectionBox: ").Append(FullBlockSelectionBox).Append("\n");
            sb.Append("  GravityAffected: ").Append(GravityAffected).Append("\n");
            sb.Append("  GroundLuminance: ").Append(GroundLuminance).Append("\n");
            sb.Append("  GuiId: ").Append(GuiId).Append("\n");
            sb.Append("  Hardness: ").Append(Hardness).Append("\n");
            sb.Append("  HeldItem: ").Append(HeldItem).Append("\n");
            sb.Append("  Identifiable: ").Append(Identifiable).Append("\n");
            sb.Append("  IndirectlyPowered: ").Append(IndirectlyPowered).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  InventoryCapacity: ").Append(InventoryCapacity).Append("\n");
            sb.Append("  InventoryDimension: ").Append(InventoryDimension).Append("\n");
            sb.Append("  InventoryTitle: ").Append(InventoryTitle).Append("\n");
            sb.Append("  LightEmission: ").Append(LightEmission).Append("\n");
            sb.Append("  Matter: ").Append(Matter).Append("\n");
            sb.Append("  Passable: ").Append(Passable).Append("\n");
            sb.Append("  Record: ").Append(Record).Append("\n");
            sb.Append("  Replaceable: ").Append(Replaceable).Append("\n");
            sb.Append("  SaturationProperty: ").Append(SaturationProperty).Append("\n");
            sb.Append("  SkyLuminance: ").Append(SkyLuminance).Append("\n");
            sb.Append("  SlotIndex: ").Append(SlotIndex).Append("\n");
            sb.Append("  SlotPos: ").Append(SlotPos).Append("\n");
            sb.Append("  SlotSide: ").Append(SlotSide).Append("\n");
            sb.Append("  Smeltable: ").Append(Smeltable).Append("\n");
            sb.Append("  SolidCube: ").Append(SolidCube).Append("\n");
            sb.Append("  StatisticsTracked: ").Append(StatisticsTracked).Append("\n");
            sb.Append("  SurrogateBlock: ").Append(SurrogateBlock).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  ToolType: ").Append(ToolType).Append("\n");
            sb.Append("  Unbreakable: ").Append(Unbreakable).Append("\n");
            sb.Append("  UseLimit: ").Append(UseLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Slot);
        }

        /// <summary>
        /// Returns true if Slot instances are equal
        /// </summary>
        /// <param name="input">Instance of Slot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Slot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Stack == input.Stack ||
                    (this.Stack != null &&
                    this.Stack.Equals(input.Stack))
                ) && 
                (
                    this.Absorption == input.Absorption ||
                    (this.Absorption != null &&
                    this.Absorption.Equals(input.Absorption))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.Aggressive == input.Aggressive ||
                    (this.Aggressive != null &&
                    this.Aggressive.Equals(input.Aggressive))
                ) && 
                (
                    this.AiEnabled == input.AiEnabled ||
                    (this.AiEnabled != null &&
                    this.AiEnabled.Equals(input.AiEnabled))
                ) && 
                (
                    this.AngerLevel == input.AngerLevel ||
                    (this.AngerLevel != null &&
                    this.AngerLevel.Equals(input.AngerLevel))
                ) && 
                (
                    this.ArmorStand == input.ArmorStand ||
                    (this.ArmorStand != null &&
                    this.ArmorStand.Equals(input.ArmorStand))
                ) && 
                (
                    this.Art == input.Art ||
                    (this.Art != null &&
                    this.Art.Equals(input.Art))
                ) && 
                (
                    this.Attached == input.Attached ||
                    (this.Attached != null &&
                    this.Attached.Equals(input.Attached))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Axis == input.Axis ||
                    (this.Axis != null &&
                    this.Axis.Equals(input.Axis))
                ) && 
                (
                    this.Banner == input.Banner ||
                    (this.Banner != null &&
                    this.Banner.Equals(input.Banner))
                ) && 
                (
                    this.Beacon == input.Beacon ||
                    (this.Beacon != null &&
                    this.Beacon.Equals(input.Beacon))
                ) && 
                (
                    this.BigMushroom == input.BigMushroom ||
                    (this.BigMushroom != null &&
                    this.BigMushroom.Equals(input.BigMushroom))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Breathing == input.Breathing ||
                    (this.Breathing != null &&
                    this.Breathing.Equals(input.Breathing))
                ) && 
                (
                    this.Breedable == input.Breedable ||
                    (this.Breedable != null &&
                    this.Breedable.Equals(input.Breedable))
                ) && 
                (
                    this.BrewingStand == input.BrewingStand ||
                    (this.BrewingStand != null &&
                    this.BrewingStand.Equals(input.BrewingStand))
                ) && 
                (
                    this.Brick == input.Brick ||
                    (this.Brick != null &&
                    this.Brick.Equals(input.Brick))
                ) && 
                (
                    this.Career == input.Career ||
                    (this.Career != null &&
                    this.Career.Equals(input.Career))
                ) && 
                (
                    this.Charged == input.Charged ||
                    (this.Charged != null &&
                    this.Charged.Equals(input.Charged))
                ) && 
                (
                    this.Coal == input.Coal ||
                    (this.Coal != null &&
                    this.Coal.Equals(input.Coal))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && 
                (
                    this.Comparator == input.Comparator ||
                    (this.Comparator != null &&
                    this.Comparator.Equals(input.Comparator))
                ) && 
                (
                    this.ConnectedDirection == input.ConnectedDirection ||
                    this.ConnectedDirection != null &&
                    this.ConnectedDirection.SequenceEqual(input.ConnectedDirection)
                ) && 
                (
                    this.CookedFish == input.CookedFish ||
                    (this.CookedFish != null &&
                    this.CookedFish.Equals(input.CookedFish))
                ) && 
                (
                    this.Cooldown == input.Cooldown ||
                    (this.Cooldown != null &&
                    this.Cooldown.Equals(input.Cooldown))
                ) && 
                (
                    this.CriticalHit == input.CriticalHit ||
                    (this.CriticalHit != null &&
                    this.CriticalHit.Equals(input.CriticalHit))
                ) && 
                (
                    this.CustomName == input.CustomName ||
                    (this.CustomName != null &&
                    this.CustomName.Equals(input.CustomName))
                ) && 
                (
                    this.Damage == input.Damage ||
                    (this.Damage != null &&
                    this.Damage.Equals(input.Damage))
                ) && 
                (
                    this.Damageable == input.Damageable ||
                    (this.Damageable != null &&
                    this.Damageable.Equals(input.Damageable))
                ) && 
                (
                    this.Decayable == input.Decayable ||
                    (this.Decayable != null &&
                    this.Decayable.Equals(input.Decayable))
                ) && 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.DespawnDelay == input.DespawnDelay ||
                    (this.DespawnDelay != null &&
                    this.DespawnDelay.Equals(input.DespawnDelay))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Dirt == input.Dirt ||
                    (this.Dirt != null &&
                    this.Dirt.Equals(input.Dirt))
                ) && 
                (
                    this.Disarmed == input.Disarmed ||
                    (this.Disarmed != null &&
                    this.Disarmed.Equals(input.Disarmed))
                ) && 
                (
                    this.DisguisedBlock == input.DisguisedBlock ||
                    (this.DisguisedBlock != null &&
                    this.DisguisedBlock.Equals(input.DisguisedBlock))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.DominantHand == input.DominantHand ||
                    (this.DominantHand != null &&
                    this.DominantHand.Equals(input.DominantHand))
                ) && 
                (
                    this.DoublePlant == input.DoublePlant ||
                    (this.DoublePlant != null &&
                    this.DoublePlant.Equals(input.DoublePlant))
                ) && 
                (
                    this.Drops == input.Drops ||
                    (this.Drops != null &&
                    this.Drops.Equals(input.Drops))
                ) && 
                (
                    this.Durability == input.Durability ||
                    (this.Durability != null &&
                    this.Durability.Equals(input.Durability))
                ) && 
                (
                    this.Dye == input.Dye ||
                    (this.Dye != null &&
                    this.Dye.Equals(input.Dye))
                ) && 
                (
                    this.Enchantments == input.Enchantments ||
                    this.Enchantments != null &&
                    this.Enchantments.SequenceEqual(input.Enchantments)
                ) && 
                (
                    this.EndGateway == input.EndGateway ||
                    (this.EndGateway != null &&
                    this.EndGateway.Equals(input.EndGateway))
                ) && 
                (
                    this.ExpOrb == input.ExpOrb ||
                    (this.ExpOrb != null &&
                    this.ExpOrb.Equals(input.ExpOrb))
                ) && 
                (
                    this.Experience == input.Experience ||
                    (this.Experience != null &&
                    this.Experience.Equals(input.Experience))
                ) && 
                (
                    this.ExpireTicks == input.ExpireTicks ||
                    (this.ExpireTicks != null &&
                    this.ExpireTicks.Equals(input.ExpireTicks))
                ) && 
                (
                    this.ExplosionRadius == input.ExplosionRadius ||
                    (this.ExplosionRadius != null &&
                    this.ExplosionRadius.Equals(input.ExplosionRadius))
                ) && 
                (
                    this.Extended == input.Extended ||
                    (this.Extended != null &&
                    this.Extended.Equals(input.Extended))
                ) && 
                (
                    this.FallDistance == input.FallDistance ||
                    (this.FallDistance != null &&
                    this.FallDistance.Equals(input.FallDistance))
                ) && 
                (
                    this.FallingBlock == input.FallingBlock ||
                    (this.FallingBlock != null &&
                    this.FallingBlock.Equals(input.FallingBlock))
                ) && 
                (
                    this.Filled == input.Filled ||
                    (this.Filled != null &&
                    this.Filled.Equals(input.Filled))
                ) && 
                (
                    this.FireworkEffects == input.FireworkEffects ||
                    this.FireworkEffects != null &&
                    this.FireworkEffects.SequenceEqual(input.FireworkEffects)
                ) && 
                (
                    this.FireworkRocket == input.FireworkRocket ||
                    (this.FireworkRocket != null &&
                    this.FireworkRocket.Equals(input.FireworkRocket))
                ) && 
                (
                    this.Fish == input.Fish ||
                    (this.Fish != null &&
                    this.Fish.Equals(input.Fish))
                ) && 
                (
                    this.Flammable == input.Flammable ||
                    (this.Flammable != null &&
                    this.Flammable.Equals(input.Flammable))
                ) && 
                (
                    this.Fluid == input.Fluid ||
                    (this.Fluid != null &&
                    this.Fluid.Equals(input.Fluid))
                ) && 
                (
                    this.FluidLevel == input.FluidLevel ||
                    (this.FluidLevel != null &&
                    this.FluidLevel.Equals(input.FluidLevel))
                ) && 
                (
                    this.FluidTanks == input.FluidTanks ||
                    this.FluidTanks != null &&
                    this.FluidTanks.SequenceEqual(input.FluidTanks)
                ) && 
                (
                    this.Flying == input.Flying ||
                    (this.Flying != null &&
                    this.Flying.Equals(input.Flying))
                ) && 
                (
                    this.FlyingAbility == input.FlyingAbility ||
                    (this.FlyingAbility != null &&
                    this.FlyingAbility.Equals(input.FlyingAbility))
                ) && 
                (
                    this.Food == input.Food ||
                    (this.Food != null &&
                    this.Food.Equals(input.Food))
                ) && 
                (
                    this.Furnace == input.Furnace ||
                    (this.Furnace != null &&
                    this.Furnace.Equals(input.Furnace))
                ) && 
                (
                    this.Fuse == input.Fuse ||
                    (this.Fuse != null &&
                    this.Fuse.Equals(input.Fuse))
                ) && 
                (
                    this.GameMode == input.GameMode ||
                    (this.GameMode != null &&
                    this.GameMode.Equals(input.GameMode))
                ) && 
                (
                    this.Generation == input.Generation ||
                    (this.Generation != null &&
                    this.Generation.Equals(input.Generation))
                ) && 
                (
                    this.Glowing == input.Glowing ||
                    (this.Glowing != null &&
                    this.Glowing.Equals(input.Glowing))
                ) && 
                (
                    this.GoldenApple == input.GoldenApple ||
                    (this.GoldenApple != null &&
                    this.GoldenApple.Equals(input.GoldenApple))
                ) && 
                (
                    this.Griefs == input.Griefs ||
                    (this.Griefs != null &&
                    this.Griefs.Equals(input.Griefs))
                ) && 
                (
                    this.Growth == input.Growth ||
                    (this.Growth != null &&
                    this.Growth.Equals(input.Growth))
                ) && 
                (
                    this.Health == input.Health ||
                    (this.Health != null &&
                    this.Health.Equals(input.Health))
                ) && 
                (
                    this.Hide == input.Hide ||
                    (this.Hide != null &&
                    this.Hide.Equals(input.Hide))
                ) && 
                (
                    this.Hinge == input.Hinge ||
                    (this.Hinge != null &&
                    this.Hinge.Equals(input.Hinge))
                ) && 
                (
                    this.Horse == input.Horse ||
                    (this.Horse != null &&
                    this.Horse.Equals(input.Horse))
                ) && 
                (
                    this.Igniteable == input.Igniteable ||
                    (this.Igniteable != null &&
                    this.Igniteable.Equals(input.Igniteable))
                ) && 
                (
                    this.InWall == input.InWall ||
                    (this.InWall != null &&
                    this.InWall.Equals(input.InWall))
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    (this.Inventory != null &&
                    this.Inventory.Equals(input.Inventory))
                ) && 
                (
                    this.Invisibility == input.Invisibility ||
                    (this.Invisibility != null &&
                    this.Invisibility.Equals(input.Invisibility))
                ) && 
                (
                    this.Invulnerability == input.Invulnerability ||
                    (this.Invulnerability != null &&
                    this.Invulnerability.Equals(input.Invulnerability))
                ) && 
                (
                    this.Joined == input.Joined ||
                    (this.Joined != null &&
                    this.Joined.Equals(input.Joined))
                ) && 
                (
                    this.Knockback == input.Knockback ||
                    (this.Knockback != null &&
                    this.Knockback.Equals(input.Knockback))
                ) && 
                (
                    this.Layer == input.Layer ||
                    (this.Layer != null &&
                    this.Layer.Equals(input.Layer))
                ) && 
                (
                    this.Leash == input.Leash ||
                    (this.Leash != null &&
                    this.Leash.Equals(input.Leash))
                ) && 
                (
                    this.LockToken == input.LockToken ||
                    (this.LockToken != null &&
                    this.LockToken.Equals(input.LockToken))
                ) && 
                (
                    this.LogAxis == input.LogAxis ||
                    (this.LogAxis != null &&
                    this.LogAxis.Equals(input.LogAxis))
                ) && 
                (
                    this.Lore == input.Lore ||
                    this.Lore != null &&
                    this.Lore.SequenceEqual(input.Lore)
                ) && 
                (
                    this.MinecartBlock == input.MinecartBlock ||
                    (this.MinecartBlock != null &&
                    this.MinecartBlock.Equals(input.MinecartBlock))
                ) && 
                (
                    this.MobSpawner == input.MobSpawner ||
                    (this.MobSpawner != null &&
                    this.MobSpawner.Equals(input.MobSpawner))
                ) && 
                (
                    this.Moisture == input.Moisture ||
                    (this.Moisture != null &&
                    this.Moisture.Equals(input.Moisture))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Occupied == input.Occupied ||
                    (this.Occupied != null &&
                    this.Occupied.Equals(input.Occupied))
                ) && 
                (
                    this.Ocelot == input.Ocelot ||
                    (this.Ocelot != null &&
                    this.Ocelot.Equals(input.Ocelot))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages != null &&
                    this.Pages.SequenceEqual(input.Pages)
                ) && 
                (
                    this.Passengers == input.Passengers ||
                    this.Passengers != null &&
                    this.Passengers.SequenceEqual(input.Passengers)
                ) && 
                (
                    this.Persists == input.Persists ||
                    (this.Persists != null &&
                    this.Persists.Equals(input.Persists))
                ) && 
                (
                    this.PickupDelay == input.PickupDelay ||
                    (this.PickupDelay != null &&
                    this.PickupDelay.Equals(input.PickupDelay))
                ) && 
                (
                    this.PickupRule == input.PickupRule ||
                    (this.PickupRule != null &&
                    this.PickupRule.Equals(input.PickupRule))
                ) && 
                (
                    this.PigSaddle == input.PigSaddle ||
                    (this.PigSaddle != null &&
                    this.PigSaddle.Equals(input.PigSaddle))
                ) && 
                (
                    this.Piston == input.Piston ||
                    (this.Piston != null &&
                    this.Piston.Equals(input.Piston))
                ) && 
                (
                    this.PlaceableOn == input.PlaceableOn ||
                    this.PlaceableOn != null &&
                    this.PlaceableOn.SequenceEqual(input.PlaceableOn)
                ) && 
                (
                    this.Plant == input.Plant ||
                    (this.Plant != null &&
                    this.Plant.Equals(input.Plant))
                ) && 
                (
                    this.PlayerCreated == input.PlayerCreated ||
                    (this.PlayerCreated != null &&
                    this.PlayerCreated.Equals(input.PlayerCreated))
                ) && 
                (
                    this.Playing == input.Playing ||
                    (this.Playing != null &&
                    this.Playing.Equals(input.Playing))
                ) && 
                (
                    this.Portion == input.Portion ||
                    (this.Portion != null &&
                    this.Portion.Equals(input.Portion))
                ) && 
                (
                    this.PotionEffects == input.PotionEffects ||
                    this.PotionEffects != null &&
                    this.PotionEffects.SequenceEqual(input.PotionEffects)
                ) && 
                (
                    this.Powered == input.Powered ||
                    (this.Powered != null &&
                    this.Powered.Equals(input.Powered))
                ) && 
                (
                    this.Prismarine == input.Prismarine ||
                    (this.Prismarine != null &&
                    this.Prismarine.Equals(input.Prismarine))
                ) && 
                (
                    this.Quartz == input.Quartz ||
                    (this.Quartz != null &&
                    this.Quartz.Equals(input.Quartz))
                ) && 
                (
                    this.Rabbit == input.Rabbit ||
                    (this.Rabbit != null &&
                    this.Rabbit.Equals(input.Rabbit))
                ) && 
                (
                    this.RailDirection == input.RailDirection ||
                    (this.RailDirection != null &&
                    this.RailDirection.Equals(input.RailDirection))
                ) && 
                (
                    this.RedstonePower == input.RedstonePower ||
                    (this.RedstonePower != null &&
                    this.RedstonePower.Equals(input.RedstonePower))
                ) && 
                (
                    this.RepresentedItem == input.RepresentedItem ||
                    (this.RepresentedItem != null &&
                    this.RepresentedItem.Equals(input.RepresentedItem))
                ) && 
                (
                    this.RepresentedPlayer == input.RepresentedPlayer ||
                    (this.RepresentedPlayer != null &&
                    this.RepresentedPlayer.Equals(input.RepresentedPlayer))
                ) && 
                (
                    this.RespawnLocations == input.RespawnLocations ||
                    this.RespawnLocations != null &&
                    this.RespawnLocations.SequenceEqual(input.RespawnLocations)
                ) && 
                (
                    this.Sand == input.Sand ||
                    (this.Sand != null &&
                    this.Sand.Equals(input.Sand))
                ) && 
                (
                    this.SandStone == input.SandStone ||
                    (this.SandStone != null &&
                    this.SandStone.Equals(input.SandStone))
                ) && 
                (
                    this.Screaming == input.Screaming ||
                    (this.Screaming != null &&
                    this.Screaming.Equals(input.Screaming))
                ) && 
                (
                    this.Seamless == input.Seamless ||
                    (this.Seamless != null &&
                    this.Seamless.Equals(input.Seamless))
                ) && 
                (
                    this.Shatters == input.Shatters ||
                    (this.Shatters != null &&
                    this.Shatters.Equals(input.Shatters))
                ) && 
                (
                    this.Sheared == input.Sheared ||
                    (this.Sheared != null &&
                    this.Sheared.Equals(input.Sheared))
                ) && 
                (
                    this.Shrub == input.Shrub ||
                    (this.Shrub != null &&
                    this.Shrub.Equals(input.Shrub))
                ) && 
                (
                    this.Sign == input.Sign ||
                    this.Sign != null &&
                    this.Sign.SequenceEqual(input.Sign)
                ) && 
                (
                    this.Silent == input.Silent ||
                    (this.Silent != null &&
                    this.Silent.Equals(input.Silent))
                ) && 
                (
                    this.Sitting == input.Sitting ||
                    (this.Sitting != null &&
                    this.Sitting.Equals(input.Sitting))
                ) && 
                (
                    this.Skin == input.Skin ||
                    (this.Skin != null &&
                    this.Skin.Equals(input.Skin))
                ) && 
                (
                    this.Skull == input.Skull ||
                    (this.Skull != null &&
                    this.Skull.Equals(input.Skull))
                ) && 
                (
                    this.Slab == input.Slab ||
                    (this.Slab != null &&
                    this.Slab.Equals(input.Slab))
                ) && 
                (
                    this.Sleeping == input.Sleeping ||
                    (this.Sleeping != null &&
                    this.Sleeping.Equals(input.Sleeping))
                ) && 
                (
                    this.Slime == input.Slime ||
                    (this.Slime != null &&
                    this.Slime.Equals(input.Slime))
                ) && 
                (
                    this.Sneaking == input.Sneaking ||
                    (this.Sneaking != null &&
                    this.Sneaking.Equals(input.Sneaking))
                ) && 
                (
                    this.Snow == input.Snow ||
                    (this.Snow != null &&
                    this.Snow.Equals(input.Snow))
                ) && 
                (
                    this.Spawn == input.Spawn ||
                    (this.Spawn != null &&
                    this.Spawn.Equals(input.Spawn))
                ) && 
                (
                    this.Sprinting == input.Sprinting ||
                    (this.Sprinting != null &&
                    this.Sprinting.Equals(input.Sprinting))
                ) && 
                (
                    this.StairShape == input.StairShape ||
                    (this.StairShape != null &&
                    this.StairShape.Equals(input.StairShape))
                ) && 
                (
                    this.Statistics == input.Statistics ||
                    this.Statistics != null &&
                    this.Statistics.SequenceEqual(input.Statistics)
                ) && 
                (
                    this.Stone == input.Stone ||
                    (this.Stone != null &&
                    this.Stone.Equals(input.Stone))
                ) && 
                (
                    this.StoredEnchantments == input.StoredEnchantments ||
                    this.StoredEnchantments != null &&
                    this.StoredEnchantments.SequenceEqual(input.StoredEnchantments)
                ) && 
                (
                    this.Structure == input.Structure ||
                    (this.Structure != null &&
                    this.Structure.Equals(input.Structure))
                ) && 
                (
                    this.StuckArrows == input.StuckArrows ||
                    (this.StuckArrows != null &&
                    this.StuckArrows.Equals(input.StuckArrows))
                ) && 
                (
                    this.Tamed == input.Tamed ||
                    (this.Tamed != null &&
                    this.Tamed.Equals(input.Tamed))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Trades == input.Trades ||
                    this.Trades != null &&
                    this.Trades.SequenceEqual(input.Trades)
                ) && 
                (
                    this.Tree == input.Tree ||
                    (this.Tree != null &&
                    this.Tree.Equals(input.Tree))
                ) && 
                (
                    this.Vehicle == input.Vehicle ||
                    (this.Vehicle != null &&
                    this.Vehicle.Equals(input.Vehicle))
                ) && 
                (
                    this.Wall == input.Wall ||
                    (this.Wall != null &&
                    this.Wall.Equals(input.Wall))
                ) && 
                (
                    this.Wet == input.Wet ||
                    (this.Wet != null &&
                    this.Wet.Equals(input.Wet))
                ) && 
                (
                    this.Wires == input.Wires ||
                    (this.Wires != null &&
                    this.Wires.Equals(input.Wires))
                ) && 
                (
                    this.AcceptsItems == input.AcceptsItems ||
                    (this.AcceptsItems != null &&
                    this.AcceptsItems.Equals(input.AcceptsItems))
                ) && 
                (
                    this.ApplicableEffect == input.ApplicableEffect ||
                    this.ApplicableEffect != null &&
                    this.ApplicableEffect.SequenceEqual(input.ApplicableEffect)
                ) && 
                (
                    this.ArmorSlotType == input.ArmorSlotType ||
                    (this.ArmorSlotType != null &&
                    this.ArmorSlotType.Equals(input.ArmorSlotType))
                ) && 
                (
                    this.ArmorType == input.ArmorType ||
                    (this.ArmorType != null &&
                    this.ArmorType.Equals(input.ArmorType))
                ) && 
                (
                    this.BlastResistance == input.BlastResistance ||
                    (this.BlastResistance != null &&
                    this.BlastResistance.Equals(input.BlastResistance))
                ) && 
                (
                    this.BurningFuel == input.BurningFuel ||
                    (this.BurningFuel != null &&
                    this.BurningFuel.Equals(input.BurningFuel))
                ) && 
                (
                    this.DamageAbsorption == input.DamageAbsorption ||
                    (this.DamageAbsorption != null &&
                    this.DamageAbsorption.Equals(input.DamageAbsorption))
                ) && 
                (
                    this.Efficiency == input.Efficiency ||
                    (this.Efficiency != null &&
                    this.Efficiency.Equals(input.Efficiency))
                ) && 
                (
                    this.EquipmentType == input.EquipmentType ||
                    (this.EquipmentType != null &&
                    this.EquipmentType.Equals(input.EquipmentType))
                ) && 
                (
                    this.EquiptmentSlotType == input.EquiptmentSlotType ||
                    (this.EquiptmentSlotType != null &&
                    this.EquiptmentSlotType.Equals(input.EquiptmentSlotType))
                ) && 
                (
                    this.EyeHeight == input.EyeHeight ||
                    (this.EyeHeight != null &&
                    this.EyeHeight.Equals(input.EyeHeight))
                ) && 
                (
                    this.EyeLocation == input.EyeLocation ||
                    (this.EyeLocation != null &&
                    this.EyeLocation.Equals(input.EyeLocation))
                ) && 
                (
                    this.FluidTemperature == input.FluidTemperature ||
                    (this.FluidTemperature != null &&
                    this.FluidTemperature.Equals(input.FluidTemperature))
                ) && 
                (
                    this.FluidViscosity == input.FluidViscosity ||
                    (this.FluidViscosity != null &&
                    this.FluidViscosity.Equals(input.FluidViscosity))
                ) && 
                (
                    this.FoodRestoration == input.FoodRestoration ||
                    (this.FoodRestoration != null &&
                    this.FoodRestoration.Equals(input.FoodRestoration))
                ) && 
                (
                    this.FullBlockSelectionBox == input.FullBlockSelectionBox ||
                    (this.FullBlockSelectionBox != null &&
                    this.FullBlockSelectionBox.Equals(input.FullBlockSelectionBox))
                ) && 
                (
                    this.GravityAffected == input.GravityAffected ||
                    (this.GravityAffected != null &&
                    this.GravityAffected.Equals(input.GravityAffected))
                ) && 
                (
                    this.GroundLuminance == input.GroundLuminance ||
                    (this.GroundLuminance != null &&
                    this.GroundLuminance.Equals(input.GroundLuminance))
                ) && 
                (
                    this.GuiId == input.GuiId ||
                    (this.GuiId != null &&
                    this.GuiId.Equals(input.GuiId))
                ) && 
                (
                    this.Hardness == input.Hardness ||
                    (this.Hardness != null &&
                    this.Hardness.Equals(input.Hardness))
                ) && 
                (
                    this.HeldItem == input.HeldItem ||
                    (this.HeldItem != null &&
                    this.HeldItem.Equals(input.HeldItem))
                ) && 
                (
                    this.Identifiable == input.Identifiable ||
                    (this.Identifiable != null &&
                    this.Identifiable.Equals(input.Identifiable))
                ) && 
                (
                    this.IndirectlyPowered == input.IndirectlyPowered ||
                    (this.IndirectlyPowered != null &&
                    this.IndirectlyPowered.Equals(input.IndirectlyPowered))
                ) && 
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) && 
                (
                    this.InventoryCapacity == input.InventoryCapacity ||
                    (this.InventoryCapacity != null &&
                    this.InventoryCapacity.Equals(input.InventoryCapacity))
                ) && 
                (
                    this.InventoryDimension == input.InventoryDimension ||
                    (this.InventoryDimension != null &&
                    this.InventoryDimension.Equals(input.InventoryDimension))
                ) && 
                (
                    this.InventoryTitle == input.InventoryTitle ||
                    (this.InventoryTitle != null &&
                    this.InventoryTitle.Equals(input.InventoryTitle))
                ) && 
                (
                    this.LightEmission == input.LightEmission ||
                    (this.LightEmission != null &&
                    this.LightEmission.Equals(input.LightEmission))
                ) && 
                (
                    this.Matter == input.Matter ||
                    (this.Matter != null &&
                    this.Matter.Equals(input.Matter))
                ) && 
                (
                    this.Passable == input.Passable ||
                    (this.Passable != null &&
                    this.Passable.Equals(input.Passable))
                ) && 
                (
                    this.Record == input.Record ||
                    (this.Record != null &&
                    this.Record.Equals(input.Record))
                ) && 
                (
                    this.Replaceable == input.Replaceable ||
                    (this.Replaceable != null &&
                    this.Replaceable.Equals(input.Replaceable))
                ) && 
                (
                    this.SaturationProperty == input.SaturationProperty ||
                    (this.SaturationProperty != null &&
                    this.SaturationProperty.Equals(input.SaturationProperty))
                ) && 
                (
                    this.SkyLuminance == input.SkyLuminance ||
                    (this.SkyLuminance != null &&
                    this.SkyLuminance.Equals(input.SkyLuminance))
                ) && 
                (
                    this.SlotIndex == input.SlotIndex ||
                    (this.SlotIndex != null &&
                    this.SlotIndex.Equals(input.SlotIndex))
                ) && 
                (
                    this.SlotPos == input.SlotPos ||
                    (this.SlotPos != null &&
                    this.SlotPos.Equals(input.SlotPos))
                ) && 
                (
                    this.SlotSide == input.SlotSide ||
                    (this.SlotSide != null &&
                    this.SlotSide.Equals(input.SlotSide))
                ) && 
                (
                    this.Smeltable == input.Smeltable ||
                    (this.Smeltable != null &&
                    this.Smeltable.Equals(input.Smeltable))
                ) && 
                (
                    this.SolidCube == input.SolidCube ||
                    (this.SolidCube != null &&
                    this.SolidCube.Equals(input.SolidCube))
                ) && 
                (
                    this.StatisticsTracked == input.StatisticsTracked ||
                    (this.StatisticsTracked != null &&
                    this.StatisticsTracked.Equals(input.StatisticsTracked))
                ) && 
                (
                    this.SurrogateBlock == input.SurrogateBlock ||
                    (this.SurrogateBlock != null &&
                    this.SurrogateBlock.Equals(input.SurrogateBlock))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.ToolType == input.ToolType ||
                    (this.ToolType != null &&
                    this.ToolType.Equals(input.ToolType))
                ) && 
                (
                    this.Unbreakable == input.Unbreakable ||
                    (this.Unbreakable != null &&
                    this.Unbreakable.Equals(input.Unbreakable))
                ) && 
                (
                    this.UseLimit == input.UseLimit ||
                    (this.UseLimit != null &&
                    this.UseLimit.Equals(input.UseLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Stack != null)
                    hashCode = hashCode * 59 + this.Stack.GetHashCode();
                if (this.Absorption != null)
                    hashCode = hashCode * 59 + this.Absorption.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.Aggressive != null)
                    hashCode = hashCode * 59 + this.Aggressive.GetHashCode();
                if (this.AiEnabled != null)
                    hashCode = hashCode * 59 + this.AiEnabled.GetHashCode();
                if (this.AngerLevel != null)
                    hashCode = hashCode * 59 + this.AngerLevel.GetHashCode();
                if (this.ArmorStand != null)
                    hashCode = hashCode * 59 + this.ArmorStand.GetHashCode();
                if (this.Art != null)
                    hashCode = hashCode * 59 + this.Art.GetHashCode();
                if (this.Attached != null)
                    hashCode = hashCode * 59 + this.Attached.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Axis != null)
                    hashCode = hashCode * 59 + this.Axis.GetHashCode();
                if (this.Banner != null)
                    hashCode = hashCode * 59 + this.Banner.GetHashCode();
                if (this.Beacon != null)
                    hashCode = hashCode * 59 + this.Beacon.GetHashCode();
                if (this.BigMushroom != null)
                    hashCode = hashCode * 59 + this.BigMushroom.GetHashCode();
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                if (this.Breathing != null)
                    hashCode = hashCode * 59 + this.Breathing.GetHashCode();
                if (this.Breedable != null)
                    hashCode = hashCode * 59 + this.Breedable.GetHashCode();
                if (this.BrewingStand != null)
                    hashCode = hashCode * 59 + this.BrewingStand.GetHashCode();
                if (this.Brick != null)
                    hashCode = hashCode * 59 + this.Brick.GetHashCode();
                if (this.Career != null)
                    hashCode = hashCode * 59 + this.Career.GetHashCode();
                if (this.Charged != null)
                    hashCode = hashCode * 59 + this.Charged.GetHashCode();
                if (this.Coal != null)
                    hashCode = hashCode * 59 + this.Coal.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.Comparator != null)
                    hashCode = hashCode * 59 + this.Comparator.GetHashCode();
                if (this.ConnectedDirection != null)
                    hashCode = hashCode * 59 + this.ConnectedDirection.GetHashCode();
                if (this.CookedFish != null)
                    hashCode = hashCode * 59 + this.CookedFish.GetHashCode();
                if (this.Cooldown != null)
                    hashCode = hashCode * 59 + this.Cooldown.GetHashCode();
                if (this.CriticalHit != null)
                    hashCode = hashCode * 59 + this.CriticalHit.GetHashCode();
                if (this.CustomName != null)
                    hashCode = hashCode * 59 + this.CustomName.GetHashCode();
                if (this.Damage != null)
                    hashCode = hashCode * 59 + this.Damage.GetHashCode();
                if (this.Damageable != null)
                    hashCode = hashCode * 59 + this.Damageable.GetHashCode();
                if (this.Decayable != null)
                    hashCode = hashCode * 59 + this.Decayable.GetHashCode();
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.DespawnDelay != null)
                    hashCode = hashCode * 59 + this.DespawnDelay.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Dirt != null)
                    hashCode = hashCode * 59 + this.Dirt.GetHashCode();
                if (this.Disarmed != null)
                    hashCode = hashCode * 59 + this.Disarmed.GetHashCode();
                if (this.DisguisedBlock != null)
                    hashCode = hashCode * 59 + this.DisguisedBlock.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.DominantHand != null)
                    hashCode = hashCode * 59 + this.DominantHand.GetHashCode();
                if (this.DoublePlant != null)
                    hashCode = hashCode * 59 + this.DoublePlant.GetHashCode();
                if (this.Drops != null)
                    hashCode = hashCode * 59 + this.Drops.GetHashCode();
                if (this.Durability != null)
                    hashCode = hashCode * 59 + this.Durability.GetHashCode();
                if (this.Dye != null)
                    hashCode = hashCode * 59 + this.Dye.GetHashCode();
                if (this.Enchantments != null)
                    hashCode = hashCode * 59 + this.Enchantments.GetHashCode();
                if (this.EndGateway != null)
                    hashCode = hashCode * 59 + this.EndGateway.GetHashCode();
                if (this.ExpOrb != null)
                    hashCode = hashCode * 59 + this.ExpOrb.GetHashCode();
                if (this.Experience != null)
                    hashCode = hashCode * 59 + this.Experience.GetHashCode();
                if (this.ExpireTicks != null)
                    hashCode = hashCode * 59 + this.ExpireTicks.GetHashCode();
                if (this.ExplosionRadius != null)
                    hashCode = hashCode * 59 + this.ExplosionRadius.GetHashCode();
                if (this.Extended != null)
                    hashCode = hashCode * 59 + this.Extended.GetHashCode();
                if (this.FallDistance != null)
                    hashCode = hashCode * 59 + this.FallDistance.GetHashCode();
                if (this.FallingBlock != null)
                    hashCode = hashCode * 59 + this.FallingBlock.GetHashCode();
                if (this.Filled != null)
                    hashCode = hashCode * 59 + this.Filled.GetHashCode();
                if (this.FireworkEffects != null)
                    hashCode = hashCode * 59 + this.FireworkEffects.GetHashCode();
                if (this.FireworkRocket != null)
                    hashCode = hashCode * 59 + this.FireworkRocket.GetHashCode();
                if (this.Fish != null)
                    hashCode = hashCode * 59 + this.Fish.GetHashCode();
                if (this.Flammable != null)
                    hashCode = hashCode * 59 + this.Flammable.GetHashCode();
                if (this.Fluid != null)
                    hashCode = hashCode * 59 + this.Fluid.GetHashCode();
                if (this.FluidLevel != null)
                    hashCode = hashCode * 59 + this.FluidLevel.GetHashCode();
                if (this.FluidTanks != null)
                    hashCode = hashCode * 59 + this.FluidTanks.GetHashCode();
                if (this.Flying != null)
                    hashCode = hashCode * 59 + this.Flying.GetHashCode();
                if (this.FlyingAbility != null)
                    hashCode = hashCode * 59 + this.FlyingAbility.GetHashCode();
                if (this.Food != null)
                    hashCode = hashCode * 59 + this.Food.GetHashCode();
                if (this.Furnace != null)
                    hashCode = hashCode * 59 + this.Furnace.GetHashCode();
                if (this.Fuse != null)
                    hashCode = hashCode * 59 + this.Fuse.GetHashCode();
                if (this.GameMode != null)
                    hashCode = hashCode * 59 + this.GameMode.GetHashCode();
                if (this.Generation != null)
                    hashCode = hashCode * 59 + this.Generation.GetHashCode();
                if (this.Glowing != null)
                    hashCode = hashCode * 59 + this.Glowing.GetHashCode();
                if (this.GoldenApple != null)
                    hashCode = hashCode * 59 + this.GoldenApple.GetHashCode();
                if (this.Griefs != null)
                    hashCode = hashCode * 59 + this.Griefs.GetHashCode();
                if (this.Growth != null)
                    hashCode = hashCode * 59 + this.Growth.GetHashCode();
                if (this.Health != null)
                    hashCode = hashCode * 59 + this.Health.GetHashCode();
                if (this.Hide != null)
                    hashCode = hashCode * 59 + this.Hide.GetHashCode();
                if (this.Hinge != null)
                    hashCode = hashCode * 59 + this.Hinge.GetHashCode();
                if (this.Horse != null)
                    hashCode = hashCode * 59 + this.Horse.GetHashCode();
                if (this.Igniteable != null)
                    hashCode = hashCode * 59 + this.Igniteable.GetHashCode();
                if (this.InWall != null)
                    hashCode = hashCode * 59 + this.InWall.GetHashCode();
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.Invisibility != null)
                    hashCode = hashCode * 59 + this.Invisibility.GetHashCode();
                if (this.Invulnerability != null)
                    hashCode = hashCode * 59 + this.Invulnerability.GetHashCode();
                if (this.Joined != null)
                    hashCode = hashCode * 59 + this.Joined.GetHashCode();
                if (this.Knockback != null)
                    hashCode = hashCode * 59 + this.Knockback.GetHashCode();
                if (this.Layer != null)
                    hashCode = hashCode * 59 + this.Layer.GetHashCode();
                if (this.Leash != null)
                    hashCode = hashCode * 59 + this.Leash.GetHashCode();
                if (this.LockToken != null)
                    hashCode = hashCode * 59 + this.LockToken.GetHashCode();
                if (this.LogAxis != null)
                    hashCode = hashCode * 59 + this.LogAxis.GetHashCode();
                if (this.Lore != null)
                    hashCode = hashCode * 59 + this.Lore.GetHashCode();
                if (this.MinecartBlock != null)
                    hashCode = hashCode * 59 + this.MinecartBlock.GetHashCode();
                if (this.MobSpawner != null)
                    hashCode = hashCode * 59 + this.MobSpawner.GetHashCode();
                if (this.Moisture != null)
                    hashCode = hashCode * 59 + this.Moisture.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Occupied != null)
                    hashCode = hashCode * 59 + this.Occupied.GetHashCode();
                if (this.Ocelot != null)
                    hashCode = hashCode * 59 + this.Ocelot.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.Pages != null)
                    hashCode = hashCode * 59 + this.Pages.GetHashCode();
                if (this.Passengers != null)
                    hashCode = hashCode * 59 + this.Passengers.GetHashCode();
                if (this.Persists != null)
                    hashCode = hashCode * 59 + this.Persists.GetHashCode();
                if (this.PickupDelay != null)
                    hashCode = hashCode * 59 + this.PickupDelay.GetHashCode();
                if (this.PickupRule != null)
                    hashCode = hashCode * 59 + this.PickupRule.GetHashCode();
                if (this.PigSaddle != null)
                    hashCode = hashCode * 59 + this.PigSaddle.GetHashCode();
                if (this.Piston != null)
                    hashCode = hashCode * 59 + this.Piston.GetHashCode();
                if (this.PlaceableOn != null)
                    hashCode = hashCode * 59 + this.PlaceableOn.GetHashCode();
                if (this.Plant != null)
                    hashCode = hashCode * 59 + this.Plant.GetHashCode();
                if (this.PlayerCreated != null)
                    hashCode = hashCode * 59 + this.PlayerCreated.GetHashCode();
                if (this.Playing != null)
                    hashCode = hashCode * 59 + this.Playing.GetHashCode();
                if (this.Portion != null)
                    hashCode = hashCode * 59 + this.Portion.GetHashCode();
                if (this.PotionEffects != null)
                    hashCode = hashCode * 59 + this.PotionEffects.GetHashCode();
                if (this.Powered != null)
                    hashCode = hashCode * 59 + this.Powered.GetHashCode();
                if (this.Prismarine != null)
                    hashCode = hashCode * 59 + this.Prismarine.GetHashCode();
                if (this.Quartz != null)
                    hashCode = hashCode * 59 + this.Quartz.GetHashCode();
                if (this.Rabbit != null)
                    hashCode = hashCode * 59 + this.Rabbit.GetHashCode();
                if (this.RailDirection != null)
                    hashCode = hashCode * 59 + this.RailDirection.GetHashCode();
                if (this.RedstonePower != null)
                    hashCode = hashCode * 59 + this.RedstonePower.GetHashCode();
                if (this.RepresentedItem != null)
                    hashCode = hashCode * 59 + this.RepresentedItem.GetHashCode();
                if (this.RepresentedPlayer != null)
                    hashCode = hashCode * 59 + this.RepresentedPlayer.GetHashCode();
                if (this.RespawnLocations != null)
                    hashCode = hashCode * 59 + this.RespawnLocations.GetHashCode();
                if (this.Sand != null)
                    hashCode = hashCode * 59 + this.Sand.GetHashCode();
                if (this.SandStone != null)
                    hashCode = hashCode * 59 + this.SandStone.GetHashCode();
                if (this.Screaming != null)
                    hashCode = hashCode * 59 + this.Screaming.GetHashCode();
                if (this.Seamless != null)
                    hashCode = hashCode * 59 + this.Seamless.GetHashCode();
                if (this.Shatters != null)
                    hashCode = hashCode * 59 + this.Shatters.GetHashCode();
                if (this.Sheared != null)
                    hashCode = hashCode * 59 + this.Sheared.GetHashCode();
                if (this.Shrub != null)
                    hashCode = hashCode * 59 + this.Shrub.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                if (this.Silent != null)
                    hashCode = hashCode * 59 + this.Silent.GetHashCode();
                if (this.Sitting != null)
                    hashCode = hashCode * 59 + this.Sitting.GetHashCode();
                if (this.Skin != null)
                    hashCode = hashCode * 59 + this.Skin.GetHashCode();
                if (this.Skull != null)
                    hashCode = hashCode * 59 + this.Skull.GetHashCode();
                if (this.Slab != null)
                    hashCode = hashCode * 59 + this.Slab.GetHashCode();
                if (this.Sleeping != null)
                    hashCode = hashCode * 59 + this.Sleeping.GetHashCode();
                if (this.Slime != null)
                    hashCode = hashCode * 59 + this.Slime.GetHashCode();
                if (this.Sneaking != null)
                    hashCode = hashCode * 59 + this.Sneaking.GetHashCode();
                if (this.Snow != null)
                    hashCode = hashCode * 59 + this.Snow.GetHashCode();
                if (this.Spawn != null)
                    hashCode = hashCode * 59 + this.Spawn.GetHashCode();
                if (this.Sprinting != null)
                    hashCode = hashCode * 59 + this.Sprinting.GetHashCode();
                if (this.StairShape != null)
                    hashCode = hashCode * 59 + this.StairShape.GetHashCode();
                if (this.Statistics != null)
                    hashCode = hashCode * 59 + this.Statistics.GetHashCode();
                if (this.Stone != null)
                    hashCode = hashCode * 59 + this.Stone.GetHashCode();
                if (this.StoredEnchantments != null)
                    hashCode = hashCode * 59 + this.StoredEnchantments.GetHashCode();
                if (this.Structure != null)
                    hashCode = hashCode * 59 + this.Structure.GetHashCode();
                if (this.StuckArrows != null)
                    hashCode = hashCode * 59 + this.StuckArrows.GetHashCode();
                if (this.Tamed != null)
                    hashCode = hashCode * 59 + this.Tamed.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Trades != null)
                    hashCode = hashCode * 59 + this.Trades.GetHashCode();
                if (this.Tree != null)
                    hashCode = hashCode * 59 + this.Tree.GetHashCode();
                if (this.Vehicle != null)
                    hashCode = hashCode * 59 + this.Vehicle.GetHashCode();
                if (this.Wall != null)
                    hashCode = hashCode * 59 + this.Wall.GetHashCode();
                if (this.Wet != null)
                    hashCode = hashCode * 59 + this.Wet.GetHashCode();
                if (this.Wires != null)
                    hashCode = hashCode * 59 + this.Wires.GetHashCode();
                if (this.AcceptsItems != null)
                    hashCode = hashCode * 59 + this.AcceptsItems.GetHashCode();
                if (this.ApplicableEffect != null)
                    hashCode = hashCode * 59 + this.ApplicableEffect.GetHashCode();
                if (this.ArmorSlotType != null)
                    hashCode = hashCode * 59 + this.ArmorSlotType.GetHashCode();
                if (this.ArmorType != null)
                    hashCode = hashCode * 59 + this.ArmorType.GetHashCode();
                if (this.BlastResistance != null)
                    hashCode = hashCode * 59 + this.BlastResistance.GetHashCode();
                if (this.BurningFuel != null)
                    hashCode = hashCode * 59 + this.BurningFuel.GetHashCode();
                if (this.DamageAbsorption != null)
                    hashCode = hashCode * 59 + this.DamageAbsorption.GetHashCode();
                if (this.Efficiency != null)
                    hashCode = hashCode * 59 + this.Efficiency.GetHashCode();
                if (this.EquipmentType != null)
                    hashCode = hashCode * 59 + this.EquipmentType.GetHashCode();
                if (this.EquiptmentSlotType != null)
                    hashCode = hashCode * 59 + this.EquiptmentSlotType.GetHashCode();
                if (this.EyeHeight != null)
                    hashCode = hashCode * 59 + this.EyeHeight.GetHashCode();
                if (this.EyeLocation != null)
                    hashCode = hashCode * 59 + this.EyeLocation.GetHashCode();
                if (this.FluidTemperature != null)
                    hashCode = hashCode * 59 + this.FluidTemperature.GetHashCode();
                if (this.FluidViscosity != null)
                    hashCode = hashCode * 59 + this.FluidViscosity.GetHashCode();
                if (this.FoodRestoration != null)
                    hashCode = hashCode * 59 + this.FoodRestoration.GetHashCode();
                if (this.FullBlockSelectionBox != null)
                    hashCode = hashCode * 59 + this.FullBlockSelectionBox.GetHashCode();
                if (this.GravityAffected != null)
                    hashCode = hashCode * 59 + this.GravityAffected.GetHashCode();
                if (this.GroundLuminance != null)
                    hashCode = hashCode * 59 + this.GroundLuminance.GetHashCode();
                if (this.GuiId != null)
                    hashCode = hashCode * 59 + this.GuiId.GetHashCode();
                if (this.Hardness != null)
                    hashCode = hashCode * 59 + this.Hardness.GetHashCode();
                if (this.HeldItem != null)
                    hashCode = hashCode * 59 + this.HeldItem.GetHashCode();
                if (this.Identifiable != null)
                    hashCode = hashCode * 59 + this.Identifiable.GetHashCode();
                if (this.IndirectlyPowered != null)
                    hashCode = hashCode * 59 + this.IndirectlyPowered.GetHashCode();
                if (this.Instrument != null)
                    hashCode = hashCode * 59 + this.Instrument.GetHashCode();
                if (this.InventoryCapacity != null)
                    hashCode = hashCode * 59 + this.InventoryCapacity.GetHashCode();
                if (this.InventoryDimension != null)
                    hashCode = hashCode * 59 + this.InventoryDimension.GetHashCode();
                if (this.InventoryTitle != null)
                    hashCode = hashCode * 59 + this.InventoryTitle.GetHashCode();
                if (this.LightEmission != null)
                    hashCode = hashCode * 59 + this.LightEmission.GetHashCode();
                if (this.Matter != null)
                    hashCode = hashCode * 59 + this.Matter.GetHashCode();
                if (this.Passable != null)
                    hashCode = hashCode * 59 + this.Passable.GetHashCode();
                if (this.Record != null)
                    hashCode = hashCode * 59 + this.Record.GetHashCode();
                if (this.Replaceable != null)
                    hashCode = hashCode * 59 + this.Replaceable.GetHashCode();
                if (this.SaturationProperty != null)
                    hashCode = hashCode * 59 + this.SaturationProperty.GetHashCode();
                if (this.SkyLuminance != null)
                    hashCode = hashCode * 59 + this.SkyLuminance.GetHashCode();
                if (this.SlotIndex != null)
                    hashCode = hashCode * 59 + this.SlotIndex.GetHashCode();
                if (this.SlotPos != null)
                    hashCode = hashCode * 59 + this.SlotPos.GetHashCode();
                if (this.SlotSide != null)
                    hashCode = hashCode * 59 + this.SlotSide.GetHashCode();
                if (this.Smeltable != null)
                    hashCode = hashCode * 59 + this.Smeltable.GetHashCode();
                if (this.SolidCube != null)
                    hashCode = hashCode * 59 + this.SolidCube.GetHashCode();
                if (this.StatisticsTracked != null)
                    hashCode = hashCode * 59 + this.StatisticsTracked.GetHashCode();
                if (this.SurrogateBlock != null)
                    hashCode = hashCode * 59 + this.SurrogateBlock.GetHashCode();
                if (this.Temperature != null)
                    hashCode = hashCode * 59 + this.Temperature.GetHashCode();
                if (this.ToolType != null)
                    hashCode = hashCode * 59 + this.ToolType.GetHashCode();
                if (this.Unbreakable != null)
                    hashCode = hashCode * 59 + this.Unbreakable.GetHashCode();
                if (this.UseLimit != null)
                    hashCode = hashCode * 59 + this.UseLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
