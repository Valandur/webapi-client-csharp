/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// StructureData
    /// </summary>
    [DataContract]
    public partial class StructureData :  IEquatable<StructureData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StructureData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructureData" /> class.
        /// </summary>
        /// <param name="Author">The author of this structure (required).</param>
        /// <param name="IgnoreEntities">True if entities are not part of this structure, false otherwise (required).</param>
        /// <param name="Integrity">The integrity of the structure (required).</param>
        /// <param name="Mode">The mode of the structure (required).</param>
        /// <param name="Position">The position of the structure (required).</param>
        /// <param name="Powered">True if the structure is powered, false otherwise (required).</param>
        /// <param name="Seed">The seed of this structure (required).</param>
        /// <param name="ShowAir">True if the air blocks for this structure are shown, false otherwise (required).</param>
        /// <param name="ShowBoundingBox">True if the bounding box for this structure is shown, false otherwise (required).</param>
        /// <param name="Size">The size of this structure (required).</param>
        public StructureData(string Author = default(string), bool? IgnoreEntities = default(bool?), float? Integrity = default(float?), CatalogType Mode = default(CatalogType), Vector3i Position = default(Vector3i), bool? Powered = default(bool?), long? Seed = default(long?), bool? ShowAir = default(bool?), bool? ShowBoundingBox = default(bool?), Vector3i Size = default(Vector3i))
        {
            // to ensure "Author" is required (not null)
            if (Author == null)
            {
                throw new InvalidDataException("Author is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Author = Author;
            }
            // to ensure "IgnoreEntities" is required (not null)
            if (IgnoreEntities == null)
            {
                throw new InvalidDataException("IgnoreEntities is a required property for StructureData and cannot be null");
            }
            else
            {
                this.IgnoreEntities = IgnoreEntities;
            }
            // to ensure "Integrity" is required (not null)
            if (Integrity == null)
            {
                throw new InvalidDataException("Integrity is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Integrity = Integrity;
            }
            // to ensure "Mode" is required (not null)
            if (Mode == null)
            {
                throw new InvalidDataException("Mode is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Mode = Mode;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
            // to ensure "Powered" is required (not null)
            if (Powered == null)
            {
                throw new InvalidDataException("Powered is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Powered = Powered;
            }
            // to ensure "Seed" is required (not null)
            if (Seed == null)
            {
                throw new InvalidDataException("Seed is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Seed = Seed;
            }
            // to ensure "ShowAir" is required (not null)
            if (ShowAir == null)
            {
                throw new InvalidDataException("ShowAir is a required property for StructureData and cannot be null");
            }
            else
            {
                this.ShowAir = ShowAir;
            }
            // to ensure "ShowBoundingBox" is required (not null)
            if (ShowBoundingBox == null)
            {
                throw new InvalidDataException("ShowBoundingBox is a required property for StructureData and cannot be null");
            }
            else
            {
                this.ShowBoundingBox = ShowBoundingBox;
            }
            // to ensure "Size" is required (not null)
            if (Size == null)
            {
                throw new InvalidDataException("Size is a required property for StructureData and cannot be null");
            }
            else
            {
                this.Size = Size;
            }
        }
        
        /// <summary>
        /// The author of this structure
        /// </summary>
        /// <value>The author of this structure</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// True if entities are not part of this structure, false otherwise
        /// </summary>
        /// <value>True if entities are not part of this structure, false otherwise</value>
        [DataMember(Name="ignoreEntities", EmitDefaultValue=false)]
        public bool? IgnoreEntities { get; set; }

        /// <summary>
        /// The integrity of the structure
        /// </summary>
        /// <value>The integrity of the structure</value>
        [DataMember(Name="integrity", EmitDefaultValue=false)]
        public float? Integrity { get; set; }

        /// <summary>
        /// The mode of the structure
        /// </summary>
        /// <value>The mode of the structure</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public CatalogType Mode { get; set; }

        /// <summary>
        /// The position of the structure
        /// </summary>
        /// <value>The position of the structure</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Vector3i Position { get; set; }

        /// <summary>
        /// True if the structure is powered, false otherwise
        /// </summary>
        /// <value>True if the structure is powered, false otherwise</value>
        [DataMember(Name="powered", EmitDefaultValue=false)]
        public bool? Powered { get; set; }

        /// <summary>
        /// The seed of this structure
        /// </summary>
        /// <value>The seed of this structure</value>
        [DataMember(Name="seed", EmitDefaultValue=false)]
        public long? Seed { get; set; }

        /// <summary>
        /// True if the air blocks for this structure are shown, false otherwise
        /// </summary>
        /// <value>True if the air blocks for this structure are shown, false otherwise</value>
        [DataMember(Name="showAir", EmitDefaultValue=false)]
        public bool? ShowAir { get; set; }

        /// <summary>
        /// True if the bounding box for this structure is shown, false otherwise
        /// </summary>
        /// <value>True if the bounding box for this structure is shown, false otherwise</value>
        [DataMember(Name="showBoundingBox", EmitDefaultValue=false)]
        public bool? ShowBoundingBox { get; set; }

        /// <summary>
        /// The size of this structure
        /// </summary>
        /// <value>The size of this structure</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public Vector3i Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StructureData {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  IgnoreEntities: ").Append(IgnoreEntities).Append("\n");
            sb.Append("  Integrity: ").Append(Integrity).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Powered: ").Append(Powered).Append("\n");
            sb.Append("  Seed: ").Append(Seed).Append("\n");
            sb.Append("  ShowAir: ").Append(ShowAir).Append("\n");
            sb.Append("  ShowBoundingBox: ").Append(ShowBoundingBox).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructureData);
        }

        /// <summary>
        /// Returns true if StructureData instances are equal
        /// </summary>
        /// <param name="input">Instance of StructureData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructureData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.IgnoreEntities == input.IgnoreEntities ||
                    (this.IgnoreEntities != null &&
                    this.IgnoreEntities.Equals(input.IgnoreEntities))
                ) && 
                (
                    this.Integrity == input.Integrity ||
                    (this.Integrity != null &&
                    this.Integrity.Equals(input.Integrity))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Powered == input.Powered ||
                    (this.Powered != null &&
                    this.Powered.Equals(input.Powered))
                ) && 
                (
                    this.Seed == input.Seed ||
                    (this.Seed != null &&
                    this.Seed.Equals(input.Seed))
                ) && 
                (
                    this.ShowAir == input.ShowAir ||
                    (this.ShowAir != null &&
                    this.ShowAir.Equals(input.ShowAir))
                ) && 
                (
                    this.ShowBoundingBox == input.ShowBoundingBox ||
                    (this.ShowBoundingBox != null &&
                    this.ShowBoundingBox.Equals(input.ShowBoundingBox))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.IgnoreEntities != null)
                    hashCode = hashCode * 59 + this.IgnoreEntities.GetHashCode();
                if (this.Integrity != null)
                    hashCode = hashCode * 59 + this.Integrity.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Powered != null)
                    hashCode = hashCode * 59 + this.Powered.GetHashCode();
                if (this.Seed != null)
                    hashCode = hashCode * 59 + this.Seed.GetHashCode();
                if (this.ShowAir != null)
                    hashCode = hashCode * 59 + this.ShowAir.GetHashCode();
                if (this.ShowBoundingBox != null)
                    hashCode = hashCode * 59 + this.ShowBoundingBox.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
