/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PlayerFullFood
    /// </summary>
    [DataContract]
    public partial class PlayerFullFood :  IEquatable<PlayerFullFood>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerFullFood" /> class.
        /// </summary>
        /// <param name="FoodLevel">The current amount of food the player has..</param>
        /// <param name="Exhaustion">How exhausted the player is..</param>
        /// <param name="Saturation">How saturated the player is..</param>
        public PlayerFullFood(decimal? FoodLevel = default(decimal?), decimal? Exhaustion = default(decimal?), decimal? Saturation = default(decimal?))
        {
            this.FoodLevel = FoodLevel;
            this.Exhaustion = Exhaustion;
            this.Saturation = Saturation;
        }
        
        /// <summary>
        /// The current amount of food the player has.
        /// </summary>
        /// <value>The current amount of food the player has.</value>
        [DataMember(Name="foodLevel", EmitDefaultValue=false)]
        public decimal? FoodLevel { get; set; }

        /// <summary>
        /// How exhausted the player is.
        /// </summary>
        /// <value>How exhausted the player is.</value>
        [DataMember(Name="exhaustion", EmitDefaultValue=false)]
        public decimal? Exhaustion { get; set; }

        /// <summary>
        /// How saturated the player is.
        /// </summary>
        /// <value>How saturated the player is.</value>
        [DataMember(Name="saturation", EmitDefaultValue=false)]
        public decimal? Saturation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerFullFood {\n");
            sb.Append("  FoodLevel: ").Append(FoodLevel).Append("\n");
            sb.Append("  Exhaustion: ").Append(Exhaustion).Append("\n");
            sb.Append("  Saturation: ").Append(Saturation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PlayerFullFood);
        }

        /// <summary>
        /// Returns true if PlayerFullFood instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayerFullFood to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerFullFood other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FoodLevel == other.FoodLevel ||
                    this.FoodLevel != null &&
                    this.FoodLevel.Equals(other.FoodLevel)
                ) && 
                (
                    this.Exhaustion == other.Exhaustion ||
                    this.Exhaustion != null &&
                    this.Exhaustion.Equals(other.Exhaustion)
                ) && 
                (
                    this.Saturation == other.Saturation ||
                    this.Saturation != null &&
                    this.Saturation.Equals(other.Saturation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FoodLevel != null)
                    hash = hash * 59 + this.FoodLevel.GetHashCode();
                if (this.Exhaustion != null)
                    hash = hash * 59 + this.Exhaustion.GetHashCode();
                if (this.Saturation != null)
                    hash = hash * 59 + this.Saturation.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
