/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// A parameter that is interpreted by the server and passed to the method.
    /// </summary>
    [DataContract]
    public partial class RawRequestParam :  IEquatable<RawRequestParam>, IValidatableObject
    {
        /// <summary>
        /// The type of the parameter. This defines how the value is interpreted.
        /// </summary>
        /// <value>The type of the parameter. This defines how the value is interpreted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Int for "int"
            /// </summary>
            [EnumMember(Value = "int")]
            Int,
            
            /// <summary>
            /// Enum Integer for "integer"
            /// </summary>
            [EnumMember(Value = "integer")]
            Integer,
            
            /// <summary>
            /// Enum Float for "float"
            /// </summary>
            [EnumMember(Value = "float")]
            Float,
            
            /// <summary>
            /// Enum Double for "double"
            /// </summary>
            [EnumMember(Value = "double")]
            Double,
            
            /// <summary>
            /// Enum Bool for "bool"
            /// </summary>
            [EnumMember(Value = "bool")]
            Bool,
            
            /// <summary>
            /// Enum Boolean for "boolean"
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean,
            
            /// <summary>
            /// Enum Byte for "byte"
            /// </summary>
            [EnumMember(Value = "byte")]
            Byte,
            
            /// <summary>
            /// Enum Char for "char"
            /// </summary>
            [EnumMember(Value = "char")]
            Char,
            
            /// <summary>
            /// Enum Long for "long"
            /// </summary>
            [EnumMember(Value = "long")]
            Long,
            
            /// <summary>
            /// Enum Short for "short"
            /// </summary>
            [EnumMember(Value = "short")]
            Short,
            
            /// <summary>
            /// Enum String for "string"
            /// </summary>
            [EnumMember(Value = "string")]
            String,
            
            /// <summary>
            /// Enum Enum for "enum"
            /// </summary>
            [EnumMember(Value = "enum")]
            Enum,
            
            /// <summary>
            /// Enum Class for "class"
            /// </summary>
            [EnumMember(Value = "class")]
            Class,
            
            /// <summary>
            /// Enum Vector3d for "vector3d"
            /// </summary>
            [EnumMember(Value = "vector3d")]
            Vector3d,
            
            /// <summary>
            /// Enum Vector3i for "vector3i"
            /// </summary>
            [EnumMember(Value = "vector3i")]
            Vector3i,
            
            /// <summary>
            /// Enum Text for "text"
            /// </summary>
            [EnumMember(Value = "text")]
            Text,
            
            /// <summary>
            /// Enum World for "world"
            /// </summary>
            [EnumMember(Value = "world")]
            World,
            
            /// <summary>
            /// Enum Player for "player"
            /// </summary>
            [EnumMember(Value = "player")]
            Player,
            
            /// <summary>
            /// Enum Itemstack for "itemstack"
            /// </summary>
            [EnumMember(Value = "itemstack")]
            Itemstack
        }

        /// <summary>
        /// The type of the parameter. This defines how the value is interpreted.
        /// </summary>
        /// <value>The type of the parameter. This defines how the value is interpreted.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RawRequestParam" /> class.
        /// </summary>
        /// <param name="Type">The type of the parameter. This defines how the value is interpreted..</param>
        /// <param name="Value">The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \&quot;x\&quot;, \&quot;y\&quot; and \&quot;z\&quot; - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \&quot;itemType\&quot; and \&quot;amount\&quot; .</param>
        /// <param name="Optional">True if the value should be wrapped into an optional value, false otherwise..</param>
        public RawRequestParam(TypeEnum? Type = default(TypeEnum?), Object Value = default(Object), bool? Optional = default(bool?))
        {
            this.Type = Type;
            this.Value = Value;
            this.Optional = Optional;
        }
        

        /// <summary>
        /// The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \&quot;x\&quot;, \&quot;y\&quot; and \&quot;z\&quot; - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \&quot;itemType\&quot; and \&quot;amount\&quot; 
        /// </summary>
        /// <value>The value of the parameter. Base types (like integer, float, boolean, etc.) are converted to the correct type and then passed to the method. Some parameters are handled differently, they are listed below along with their usage:  - class: Interpreted as the fully qualified classname of a class which is loaded and passed | - vector3(i/d): Converted to a Vector3(i/d) object. Requires the properties \&quot;x\&quot;, \&quot;y\&quot; and \&quot;z\&quot; - text: Converted to a sponge text - world: Assumed to be the UUID of a world which is fetched and passed - player: Assumed to be the UUID of the player which is fetched and passed. - itemstack: Converted to a new item stack. Requires the properties \&quot;itemType\&quot; and \&quot;amount\&quot; </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// True if the value should be wrapped into an optional value, false otherwise.
        /// </summary>
        /// <value>True if the value should be wrapped into an optional value, false otherwise.</value>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool? Optional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RawRequestParam {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RawRequestParam);
        }

        /// <summary>
        /// Returns true if RawRequestParam instances are equal
        /// </summary>
        /// <param name="other">Instance of RawRequestParam to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RawRequestParam other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Optional == other.Optional ||
                    this.Optional != null &&
                    this.Optional.Equals(other.Optional)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Optional != null)
                    hash = hash * 59 + this.Optional.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
