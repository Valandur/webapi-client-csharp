/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PluginContainer
    /// </summary>
    [DataContract]
    public partial class PluginContainer :  IEquatable<PluginContainer>, IValidatableObject
    {
        /// <summary>
        /// The current loaded state of the plugin
        /// </summary>
        /// <value>The current loaded state of the plugin</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum Loaded for value: Loaded
            /// </summary>
            [EnumMember(Value = "Loaded")]
            Loaded = 1,
            
            /// <summary>
            /// Enum Unloaded for value: Unloaded
            /// </summary>
            [EnumMember(Value = "Unloaded")]
            Unloaded = 2,
            
            /// <summary>
            /// Enum WillBeLoaded for value: WillBeLoaded
            /// </summary>
            [EnumMember(Value = "WillBeLoaded")]
            WillBeLoaded = 3,
            
            /// <summary>
            /// Enum WillBeUnloaded for value: WillBeUnloaded
            /// </summary>
            [EnumMember(Value = "WillBeUnloaded")]
            WillBeUnloaded = 4
        }

        /// <summary>
        /// The current loaded state of the plugin
        /// </summary>
        /// <value>The current loaded state of the plugin</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum State { get; set; }
        /// <summary>
        /// The type of the plugin
        /// </summary>
        /// <value>The type of the plugin</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,
            
            /// <summary>
            /// Enum Sponge for value: Sponge
            /// </summary>
            [EnumMember(Value = "Sponge")]
            Sponge = 2,
            
            /// <summary>
            /// Enum Forge for value: Forge
            /// </summary>
            [EnumMember(Value = "Forge")]
            Forge = 3,
            
            /// <summary>
            /// Enum Minecraft for value: Minecraft
            /// </summary>
            [EnumMember(Value = "Minecraft")]
            Minecraft = 4
        }

        /// <summary>
        /// The type of the plugin
        /// </summary>
        /// <value>The type of the plugin</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginContainer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PluginContainer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginContainer" /> class.
        /// </summary>
        /// <param name="Authors">A list of authors that created this plugin (required).</param>
        /// <param name="Dependencies">Other plugins that this plugin depends on (required).</param>
        /// <param name="Id">The unique id of this plugin (required).</param>
        /// <param name="Name">The name of this plugin (required).</param>
        /// <param name="State">The current loaded state of the plugin (required).</param>
        /// <param name="Type">The type of the plugin (required).</param>
        /// <param name="Description">A description describing what this plugin does (hopefully).</param>
        /// <param name="Source">The file source where the plugin was loaded from..</param>
        /// <param name="Url">The url that was added to the plugin (probably the homepage).</param>
        /// <param name="Version">The current version of the plugin.</param>
        public PluginContainer(List<string> Authors = default(List<string>), List<PluginDependency> Dependencies = default(List<PluginDependency>), string Id = default(string), string Name = default(string), StateEnum State = default(StateEnum), TypeEnum Type = default(TypeEnum), string Description = default(string), string Source = default(string), string Url = default(string), string Version = default(string))
        {
            // to ensure "Authors" is required (not null)
            if (Authors == null)
            {
                throw new InvalidDataException("Authors is a required property for PluginContainer and cannot be null");
            }
            else
            {
                this.Authors = Authors;
            }
            // to ensure "Dependencies" is required (not null)
            if (Dependencies == null)
            {
                throw new InvalidDataException("Dependencies is a required property for PluginContainer and cannot be null");
            }
            else
            {
                this.Dependencies = Dependencies;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for PluginContainer and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for PluginContainer and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for PluginContainer and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for PluginContainer and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this.Description = Description;
            this.Source = Source;
            this.Url = Url;
            this.Version = Version;
        }
        
        /// <summary>
        /// A list of authors that created this plugin
        /// </summary>
        /// <value>A list of authors that created this plugin</value>
        [DataMember(Name="authors", EmitDefaultValue=false)]
        public List<string> Authors { get; set; }

        /// <summary>
        /// Other plugins that this plugin depends on
        /// </summary>
        /// <value>Other plugins that this plugin depends on</value>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public List<PluginDependency> Dependencies { get; set; }

        /// <summary>
        /// The unique id of this plugin
        /// </summary>
        /// <value>The unique id of this plugin</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The API link that can be used to obtain more information about this object
        /// </summary>
        /// <value>The API link that can be used to obtain more information about this object</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; private set; }

        /// <summary>
        /// The name of this plugin
        /// </summary>
        /// <value>The name of this plugin</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }



        /// <summary>
        /// A description describing what this plugin does (hopefully)
        /// </summary>
        /// <value>A description describing what this plugin does (hopefully)</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The file source where the plugin was loaded from.
        /// </summary>
        /// <value>The file source where the plugin was loaded from.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// The url that was added to the plugin (probably the homepage)
        /// </summary>
        /// <value>The url that was added to the plugin (probably the homepage)</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The current version of the plugin
        /// </summary>
        /// <value>The current version of the plugin</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginContainer {\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginContainer);
        }

        /// <summary>
        /// Returns true if PluginContainer instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginContainer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginContainer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Authors == input.Authors ||
                    this.Authors != null &&
                    this.Authors.SequenceEqual(input.Authors)
                ) && 
                (
                    this.Dependencies == input.Dependencies ||
                    this.Dependencies != null &&
                    this.Dependencies.SequenceEqual(input.Dependencies)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Authors != null)
                    hashCode = hashCode * 59 + this.Authors.GetHashCode();
                if (this.Dependencies != null)
                    hashCode = hashCode * 59 + this.Dependencies.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
