/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NationsZone
    /// </summary>
    [DataContract]
    public partial class NationsZone :  IEquatable<NationsZone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NationsZone" /> class.
        /// </summary>
        /// <param name="Uuid">The unique uuid of this zone..</param>
        /// <param name="Name">The name of the zone..</param>
        /// <param name="Rect">Rect.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="CoOwners">The list of co-owners of this zone..</param>
        /// <param name="Flags">A map of boolean flags..</param>
        /// <param name="ForSale">True if this zone is for sale, false otherwise..</param>
        /// <param name="Price">The price of this zone. **This is a string because this number might be too large to hold in a regular number object.**.</param>
        public NationsZone(string Uuid = default(string), string Name = default(string), NationsRect Rect = default(NationsRect), Player Owner = default(Player), List<Player> CoOwners = default(List<Player>), Object Flags = default(Object), bool? ForSale = default(bool?), string Price = default(string))
        {
            this.Uuid = Uuid;
            this.Name = Name;
            this.Rect = Rect;
            this.Owner = Owner;
            this.CoOwners = CoOwners;
            this.Flags = Flags;
            this.ForSale = ForSale;
            this.Price = Price;
        }
        
        /// <summary>
        /// The unique uuid of this zone.
        /// </summary>
        /// <value>The unique uuid of this zone.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The name of the zone.
        /// </summary>
        /// <value>The name of the zone.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Rect
        /// </summary>
        [DataMember(Name="rect", EmitDefaultValue=false)]
        public NationsRect Rect { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public Player Owner { get; set; }

        /// <summary>
        /// The list of co-owners of this zone.
        /// </summary>
        /// <value>The list of co-owners of this zone.</value>
        [DataMember(Name="coOwners", EmitDefaultValue=false)]
        public List<Player> CoOwners { get; set; }

        /// <summary>
        /// A map of boolean flags.
        /// </summary>
        /// <value>A map of boolean flags.</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public Object Flags { get; set; }

        /// <summary>
        /// True if this zone is for sale, false otherwise.
        /// </summary>
        /// <value>True if this zone is for sale, false otherwise.</value>
        [DataMember(Name="forSale", EmitDefaultValue=false)]
        public bool? ForSale { get; set; }

        /// <summary>
        /// The price of this zone. **This is a string because this number might be too large to hold in a regular number object.**
        /// </summary>
        /// <value>The price of this zone. **This is a string because this number might be too large to hold in a regular number object.**</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NationsZone {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rect: ").Append(Rect).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  CoOwners: ").Append(CoOwners).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  ForSale: ").Append(ForSale).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NationsZone);
        }

        /// <summary>
        /// Returns true if NationsZone instances are equal
        /// </summary>
        /// <param name="other">Instance of NationsZone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NationsZone other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Rect == other.Rect ||
                    this.Rect != null &&
                    this.Rect.Equals(other.Rect)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.CoOwners == other.CoOwners ||
                    this.CoOwners != null &&
                    this.CoOwners.SequenceEqual(other.CoOwners)
                ) && 
                (
                    this.Flags == other.Flags ||
                    this.Flags != null &&
                    this.Flags.Equals(other.Flags)
                ) && 
                (
                    this.ForSale == other.ForSale ||
                    this.ForSale != null &&
                    this.ForSale.Equals(other.ForSale)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Rect != null)
                    hash = hash * 59 + this.Rect.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.CoOwners != null)
                    hash = hash * 59 + this.CoOwners.GetHashCode();
                if (this.Flags != null)
                    hash = hash * 59 + this.Flags.GetHashCode();
                if (this.ForSale != null)
                    hash = hash * 59 + this.ForSale.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
