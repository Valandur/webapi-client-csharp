/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServerInfo
    /// </summary>
    [DataContract]
    public partial class ServerInfo :  IEquatable<ServerInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ServerInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerInfo" /> class.
        /// </summary>
        /// <param name="Api">Api (required).</param>
        /// <param name="Game">Game (required).</param>
        /// <param name="HasWhitelist">True if the server has activated the whitelist, false otherwise (required).</param>
        /// <param name="Implementation">Implementation (required).</param>
        /// <param name="MaxPlayers">The maximum amount of players allowed on the server (required).</param>
        /// <param name="MinecraftVersion">The Minecraft version running on the server (required).</param>
        /// <param name="Motd">The message of the day set on the server (required).</param>
        /// <param name="OnlineMode">True if the server is in online mode and verifies connections, false otherwise (required).</param>
        /// <param name="Players">The amount of players currently playing on the server (required).</param>
        /// <param name="Tps">The average ticks per second the server is running with (required).</param>
        /// <param name="UptimeTicks">The number of ticks the server has been running (required).</param>
        /// <param name="Address">The address that the server is bound to.</param>
        /// <param name="ResourcePack">The name of the resource pack this is used on the server.</param>
        public ServerInfo(PluginContainer Api = default(PluginContainer), PluginContainer Game = default(PluginContainer), bool? HasWhitelist = default(bool?), PluginContainer Implementation = default(PluginContainer), int? MaxPlayers = default(int?), string MinecraftVersion = default(string), string Motd = default(string), bool? OnlineMode = default(bool?), int? Players = default(int?), double? Tps = default(double?), int? UptimeTicks = default(int?), string Address = default(string), string ResourcePack = default(string))
        {
            // to ensure "Api" is required (not null)
            if (Api == null)
            {
                throw new InvalidDataException("Api is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.Api = Api;
            }
            // to ensure "Game" is required (not null)
            if (Game == null)
            {
                throw new InvalidDataException("Game is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.Game = Game;
            }
            // to ensure "HasWhitelist" is required (not null)
            if (HasWhitelist == null)
            {
                throw new InvalidDataException("HasWhitelist is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.HasWhitelist = HasWhitelist;
            }
            // to ensure "Implementation" is required (not null)
            if (Implementation == null)
            {
                throw new InvalidDataException("Implementation is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.Implementation = Implementation;
            }
            // to ensure "MaxPlayers" is required (not null)
            if (MaxPlayers == null)
            {
                throw new InvalidDataException("MaxPlayers is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.MaxPlayers = MaxPlayers;
            }
            // to ensure "MinecraftVersion" is required (not null)
            if (MinecraftVersion == null)
            {
                throw new InvalidDataException("MinecraftVersion is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.MinecraftVersion = MinecraftVersion;
            }
            // to ensure "Motd" is required (not null)
            if (Motd == null)
            {
                throw new InvalidDataException("Motd is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.Motd = Motd;
            }
            // to ensure "OnlineMode" is required (not null)
            if (OnlineMode == null)
            {
                throw new InvalidDataException("OnlineMode is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.OnlineMode = OnlineMode;
            }
            // to ensure "Players" is required (not null)
            if (Players == null)
            {
                throw new InvalidDataException("Players is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.Players = Players;
            }
            // to ensure "Tps" is required (not null)
            if (Tps == null)
            {
                throw new InvalidDataException("Tps is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.Tps = Tps;
            }
            // to ensure "UptimeTicks" is required (not null)
            if (UptimeTicks == null)
            {
                throw new InvalidDataException("UptimeTicks is a required property for ServerInfo and cannot be null");
            }
            else
            {
                this.UptimeTicks = UptimeTicks;
            }
            this.Address = Address;
            this.ResourcePack = ResourcePack;
        }
        
        /// <summary>
        /// Gets or Sets Api
        /// </summary>
        [DataMember(Name="api", EmitDefaultValue=false)]
        public PluginContainer Api { get; set; }

        /// <summary>
        /// Gets or Sets Game
        /// </summary>
        [DataMember(Name="game", EmitDefaultValue=false)]
        public PluginContainer Game { get; set; }

        /// <summary>
        /// True if the server has activated the whitelist, false otherwise
        /// </summary>
        /// <value>True if the server has activated the whitelist, false otherwise</value>
        [DataMember(Name="hasWhitelist", EmitDefaultValue=false)]
        public bool? HasWhitelist { get; set; }

        /// <summary>
        /// Gets or Sets Implementation
        /// </summary>
        [DataMember(Name="implementation", EmitDefaultValue=false)]
        public PluginContainer Implementation { get; set; }

        /// <summary>
        /// The maximum amount of players allowed on the server
        /// </summary>
        /// <value>The maximum amount of players allowed on the server</value>
        [DataMember(Name="maxPlayers", EmitDefaultValue=false)]
        public int? MaxPlayers { get; set; }

        /// <summary>
        /// The Minecraft version running on the server
        /// </summary>
        /// <value>The Minecraft version running on the server</value>
        [DataMember(Name="minecraftVersion", EmitDefaultValue=false)]
        public string MinecraftVersion { get; set; }

        /// <summary>
        /// The message of the day set on the server
        /// </summary>
        /// <value>The message of the day set on the server</value>
        [DataMember(Name="motd", EmitDefaultValue=false)]
        public string Motd { get; set; }

        /// <summary>
        /// True if the server is in online mode and verifies connections, false otherwise
        /// </summary>
        /// <value>True if the server is in online mode and verifies connections, false otherwise</value>
        [DataMember(Name="onlineMode", EmitDefaultValue=false)]
        public bool? OnlineMode { get; set; }

        /// <summary>
        /// The amount of players currently playing on the server
        /// </summary>
        /// <value>The amount of players currently playing on the server</value>
        [DataMember(Name="players", EmitDefaultValue=false)]
        public int? Players { get; set; }

        /// <summary>
        /// The average ticks per second the server is running with
        /// </summary>
        /// <value>The average ticks per second the server is running with</value>
        [DataMember(Name="tps", EmitDefaultValue=false)]
        public double? Tps { get; set; }

        /// <summary>
        /// The number of ticks the server has been running
        /// </summary>
        /// <value>The number of ticks the server has been running</value>
        [DataMember(Name="uptimeTicks", EmitDefaultValue=false)]
        public int? UptimeTicks { get; set; }

        /// <summary>
        /// The address that the server is bound to
        /// </summary>
        /// <value>The address that the server is bound to</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The name of the resource pack this is used on the server
        /// </summary>
        /// <value>The name of the resource pack this is used on the server</value>
        [DataMember(Name="resourcePack", EmitDefaultValue=false)]
        public string ResourcePack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerInfo {\n");
            sb.Append("  Api: ").Append(Api).Append("\n");
            sb.Append("  Game: ").Append(Game).Append("\n");
            sb.Append("  HasWhitelist: ").Append(HasWhitelist).Append("\n");
            sb.Append("  Implementation: ").Append(Implementation).Append("\n");
            sb.Append("  MaxPlayers: ").Append(MaxPlayers).Append("\n");
            sb.Append("  MinecraftVersion: ").Append(MinecraftVersion).Append("\n");
            sb.Append("  Motd: ").Append(Motd).Append("\n");
            sb.Append("  OnlineMode: ").Append(OnlineMode).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("  Tps: ").Append(Tps).Append("\n");
            sb.Append("  UptimeTicks: ").Append(UptimeTicks).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ResourcePack: ").Append(ResourcePack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerInfo);
        }

        /// <summary>
        /// Returns true if ServerInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Api == input.Api ||
                    (this.Api != null &&
                    this.Api.Equals(input.Api))
                ) && 
                (
                    this.Game == input.Game ||
                    (this.Game != null &&
                    this.Game.Equals(input.Game))
                ) && 
                (
                    this.HasWhitelist == input.HasWhitelist ||
                    (this.HasWhitelist != null &&
                    this.HasWhitelist.Equals(input.HasWhitelist))
                ) && 
                (
                    this.Implementation == input.Implementation ||
                    (this.Implementation != null &&
                    this.Implementation.Equals(input.Implementation))
                ) && 
                (
                    this.MaxPlayers == input.MaxPlayers ||
                    (this.MaxPlayers != null &&
                    this.MaxPlayers.Equals(input.MaxPlayers))
                ) && 
                (
                    this.MinecraftVersion == input.MinecraftVersion ||
                    (this.MinecraftVersion != null &&
                    this.MinecraftVersion.Equals(input.MinecraftVersion))
                ) && 
                (
                    this.Motd == input.Motd ||
                    (this.Motd != null &&
                    this.Motd.Equals(input.Motd))
                ) && 
                (
                    this.OnlineMode == input.OnlineMode ||
                    (this.OnlineMode != null &&
                    this.OnlineMode.Equals(input.OnlineMode))
                ) && 
                (
                    this.Players == input.Players ||
                    (this.Players != null &&
                    this.Players.Equals(input.Players))
                ) && 
                (
                    this.Tps == input.Tps ||
                    (this.Tps != null &&
                    this.Tps.Equals(input.Tps))
                ) && 
                (
                    this.UptimeTicks == input.UptimeTicks ||
                    (this.UptimeTicks != null &&
                    this.UptimeTicks.Equals(input.UptimeTicks))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ResourcePack == input.ResourcePack ||
                    (this.ResourcePack != null &&
                    this.ResourcePack.Equals(input.ResourcePack))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Api != null)
                    hashCode = hashCode * 59 + this.Api.GetHashCode();
                if (this.Game != null)
                    hashCode = hashCode * 59 + this.Game.GetHashCode();
                if (this.HasWhitelist != null)
                    hashCode = hashCode * 59 + this.HasWhitelist.GetHashCode();
                if (this.Implementation != null)
                    hashCode = hashCode * 59 + this.Implementation.GetHashCode();
                if (this.MaxPlayers != null)
                    hashCode = hashCode * 59 + this.MaxPlayers.GetHashCode();
                if (this.MinecraftVersion != null)
                    hashCode = hashCode * 59 + this.MinecraftVersion.GetHashCode();
                if (this.Motd != null)
                    hashCode = hashCode * 59 + this.Motd.GetHashCode();
                if (this.OnlineMode != null)
                    hashCode = hashCode * 59 + this.OnlineMode.GetHashCode();
                if (this.Players != null)
                    hashCode = hashCode * 59 + this.Players.GetHashCode();
                if (this.Tps != null)
                    hashCode = hashCode * 59 + this.Tps.GetHashCode();
                if (this.UptimeTicks != null)
                    hashCode = hashCode * 59 + this.UptimeTicks.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ResourcePack != null)
                    hashCode = hashCode * 59 + this.ResourcePack.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
