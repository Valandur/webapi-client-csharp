/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlockOperation
    /// </summary>
    [DataContract]
    public partial class BlockOperation :  IEquatable<BlockOperation>, IValidatableObject
    {
        /// <summary>
        /// The type of action that is being performed by this operation.
        /// </summary>
        /// <value>The type of action that is being performed by this operation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum GET for "GET"
            /// </summary>
            [EnumMember(Value = "GET")]
            GET,
            
            /// <summary>
            /// Enum UPDATE for "UPDATE"
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATE
        }

        /// <summary>
        /// The type of action that is being performed by this operation.
        /// </summary>
        /// <value>The type of action that is being performed by this operation.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockOperation" /> class.
        /// </summary>
        /// <param name="Uuid">The UUID of the block update operation..</param>
        /// <param name="Type">The type of action that is being performed by this operation..</param>
        /// <param name="Status">The current status of the operation, one of: INIT, RUNNING, PAUSED, DONE, ERRORED. .</param>
        /// <param name="Progress">The update progress of this operation, from 0 (nothing done) to 1 (completely done)..</param>
        /// <param name="EstTimeRemaining">The estimated amount of seconds remaining before this operation is completed..</param>
        /// <param name="Link">The Web-API url to access for details about this operation..</param>
        public BlockOperation(string Uuid = default(string), TypeEnum? Type = default(TypeEnum?), string Status = default(string), float? Progress = default(float?), decimal? EstTimeRemaining = default(decimal?), string Link = default(string))
        {
            this.Uuid = Uuid;
            this.Type = Type;
            this.Status = Status;
            this.Progress = Progress;
            this.EstTimeRemaining = EstTimeRemaining;
            this.Link = Link;
        }
        
        /// <summary>
        /// The UUID of the block update operation.
        /// </summary>
        /// <value>The UUID of the block update operation.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }


        /// <summary>
        /// The current status of the operation, one of: INIT, RUNNING, PAUSED, DONE, ERRORED. 
        /// </summary>
        /// <value>The current status of the operation, one of: INIT, RUNNING, PAUSED, DONE, ERRORED. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The update progress of this operation, from 0 (nothing done) to 1 (completely done).
        /// </summary>
        /// <value>The update progress of this operation, from 0 (nothing done) to 1 (completely done).</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public float? Progress { get; set; }

        /// <summary>
        /// The estimated amount of seconds remaining before this operation is completed.
        /// </summary>
        /// <value>The estimated amount of seconds remaining before this operation is completed.</value>
        [DataMember(Name="estTimeRemaining", EmitDefaultValue=false)]
        public decimal? EstTimeRemaining { get; set; }

        /// <summary>
        /// The Web-API url to access for details about this operation.
        /// </summary>
        /// <value>The Web-API url to access for details about this operation.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockOperation {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  EstTimeRemaining: ").Append(EstTimeRemaining).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BlockOperation);
        }

        /// <summary>
        /// Returns true if BlockOperation instances are equal
        /// </summary>
        /// <param name="other">Instance of BlockOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockOperation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Progress == other.Progress ||
                    this.Progress != null &&
                    this.Progress.Equals(other.Progress)
                ) && 
                (
                    this.EstTimeRemaining == other.EstTimeRemaining ||
                    this.EstTimeRemaining != null &&
                    this.EstTimeRemaining.Equals(other.EstTimeRemaining)
                ) && 
                (
                    this.Link == other.Link ||
                    this.Link != null &&
                    this.Link.Equals(other.Link)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Progress != null)
                    hash = hash * 59 + this.Progress.GetHashCode();
                if (this.EstTimeRemaining != null)
                    hash = hash * 59 + this.EstTimeRemaining.GetHashCode();
                if (this.Link != null)
                    hash = hash * 59 + this.Link.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
