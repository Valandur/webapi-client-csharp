/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BlockOperation
    /// </summary>
    [DataContract]
    public partial class BlockOperation :  IEquatable<BlockOperation>, IValidatableObject
    {
        /// <summary>
        /// The current status of the block operation
        /// </summary>
        /// <value>The current status of the block operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum INIT for value: INIT
            /// </summary>
            [EnumMember(Value = "INIT")]
            INIT = 1,
            
            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 2,
            
            /// <summary>
            /// Enum PAUSED for value: PAUSED
            /// </summary>
            [EnumMember(Value = "PAUSED")]
            PAUSED = 3,
            
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 4,
            
            /// <summary>
            /// Enum ERRORED for value: ERRORED
            /// </summary>
            [EnumMember(Value = "ERRORED")]
            ERRORED = 5,
            
            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 6
        }

        /// <summary>
        /// The current status of the block operation
        /// </summary>
        /// <value>The current status of the block operation</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// The type of block operation
        /// </summary>
        /// <value>The type of block operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1,
            
            /// <summary>
            /// Enum CHANGE for value: CHANGE
            /// </summary>
            [EnumMember(Value = "CHANGE")]
            CHANGE = 2
        }

        /// <summary>
        /// The type of block operation
        /// </summary>
        /// <value>The type of block operation</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockOperation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BlockOperation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockOperation" /> class.
        /// </summary>
        /// <param name="Error">The error message, if any (required).</param>
        /// <param name="Errored">True if this block operation produced errors, false otherwise. (required).</param>
        /// <param name="EstimatedSecondsRemaining">The estimated amount of time remaining until this block operation is complete (in seconds) (required).</param>
        /// <param name="Max">The maximum block belonging to this operation (required).</param>
        /// <param name="Min">The minimum block belonging to this operation (required).</param>
        /// <param name="Progress">The current progress of the block operation, from 0 (&#x3D;started) to 1 (&#x3D;finished) (required).</param>
        /// <param name="Status">The current status of the block operation (required).</param>
        /// <param name="Type">The type of block operation (required).</param>
        /// <param name="Uuid">The unique UUID identifying this block operation (required).</param>
        /// <param name="World">The world in which this block operation is running (required).</param>
        public BlockOperation(string Error = default(string), bool? Errored = default(bool?), float? EstimatedSecondsRemaining = default(float?), Vector3i Max = default(Vector3i), Vector3i Min = default(Vector3i), float? Progress = default(float?), StatusEnum Status = default(StatusEnum), TypeEnum Type = default(TypeEnum), Guid? Uuid = default(Guid?), World World = default(World))
        {
            // to ensure "Error" is required (not null)
            if (Error == null)
            {
                throw new InvalidDataException("Error is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Error = Error;
            }
            // to ensure "Errored" is required (not null)
            if (Errored == null)
            {
                throw new InvalidDataException("Errored is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Errored = Errored;
            }
            // to ensure "EstimatedSecondsRemaining" is required (not null)
            if (EstimatedSecondsRemaining == null)
            {
                throw new InvalidDataException("EstimatedSecondsRemaining is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.EstimatedSecondsRemaining = EstimatedSecondsRemaining;
            }
            // to ensure "Max" is required (not null)
            if (Max == null)
            {
                throw new InvalidDataException("Max is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Max = Max;
            }
            // to ensure "Min" is required (not null)
            if (Min == null)
            {
                throw new InvalidDataException("Min is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Min = Min;
            }
            // to ensure "Progress" is required (not null)
            if (Progress == null)
            {
                throw new InvalidDataException("Progress is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Progress = Progress;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Uuid" is required (not null)
            if (Uuid == null)
            {
                throw new InvalidDataException("Uuid is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.Uuid = Uuid;
            }
            // to ensure "World" is required (not null)
            if (World == null)
            {
                throw new InvalidDataException("World is a required property for BlockOperation and cannot be null");
            }
            else
            {
                this.World = World;
            }
        }
        
        /// <summary>
        /// The error message, if any
        /// </summary>
        /// <value>The error message, if any</value>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// True if this block operation produced errors, false otherwise.
        /// </summary>
        /// <value>True if this block operation produced errors, false otherwise.</value>
        [DataMember(Name="errored", EmitDefaultValue=false)]
        public bool? Errored { get; set; }

        /// <summary>
        /// The estimated amount of time remaining until this block operation is complete (in seconds)
        /// </summary>
        /// <value>The estimated amount of time remaining until this block operation is complete (in seconds)</value>
        [DataMember(Name="estimatedSecondsRemaining", EmitDefaultValue=false)]
        public float? EstimatedSecondsRemaining { get; set; }

        /// <summary>
        /// The API link that can be used to obtain more information about this object
        /// </summary>
        /// <value>The API link that can be used to obtain more information about this object</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; private set; }

        /// <summary>
        /// The maximum block belonging to this operation
        /// </summary>
        /// <value>The maximum block belonging to this operation</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public Vector3i Max { get; set; }

        /// <summary>
        /// The minimum block belonging to this operation
        /// </summary>
        /// <value>The minimum block belonging to this operation</value>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public Vector3i Min { get; set; }

        /// <summary>
        /// The current progress of the block operation, from 0 (&#x3D;started) to 1 (&#x3D;finished)
        /// </summary>
        /// <value>The current progress of the block operation, from 0 (&#x3D;started) to 1 (&#x3D;finished)</value>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public float? Progress { get; set; }



        /// <summary>
        /// The unique UUID identifying this block operation
        /// </summary>
        /// <value>The unique UUID identifying this block operation</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid? Uuid { get; set; }

        /// <summary>
        /// The world in which this block operation is running
        /// </summary>
        /// <value>The world in which this block operation is running</value>
        [DataMember(Name="world", EmitDefaultValue=false)]
        public World World { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockOperation {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Errored: ").Append(Errored).Append("\n");
            sb.Append("  EstimatedSecondsRemaining: ").Append(EstimatedSecondsRemaining).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  World: ").Append(World).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockOperation);
        }

        /// <summary>
        /// Returns true if BlockOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Errored == input.Errored ||
                    (this.Errored != null &&
                    this.Errored.Equals(input.Errored))
                ) && 
                (
                    this.EstimatedSecondsRemaining == input.EstimatedSecondsRemaining ||
                    (this.EstimatedSecondsRemaining != null &&
                    this.EstimatedSecondsRemaining.Equals(input.EstimatedSecondsRemaining))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.World == input.World ||
                    (this.World != null &&
                    this.World.Equals(input.World))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Errored != null)
                    hashCode = hashCode * 59 + this.Errored.GetHashCode();
                if (this.EstimatedSecondsRemaining != null)
                    hashCode = hashCode * 59 + this.EstimatedSecondsRemaining.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                if (this.Min != null)
                    hashCode = hashCode * 59 + this.Min.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.World != null)
                    hashCode = hashCode * 59 + this.World.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
