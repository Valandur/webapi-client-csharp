/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHuskyCratesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Detailed crate info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>HuskyCrateResponse</returns>
        HuskyCrateResponse GetCrate (string id);

        /// <summary>
        /// Detailed crate info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>ApiResponse of HuskyCrateResponse</returns>
        ApiResponse<HuskyCrateResponse> GetCrateWithHttpInfo (string id);
        /// <summary>
        /// Crate list
        /// </summary>
        /// <remarks>
        /// Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>HuskyCratesResponse</returns>
        HuskyCratesResponse GetCrates (string details = null);

        /// <summary>
        /// Crate list
        /// </summary>
        /// <remarks>
        /// Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>ApiResponse of HuskyCratesResponse</returns>
        ApiResponse<HuskyCratesResponse> GetCratesWithHttpInfo (string details = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Detailed crate info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>Task of HuskyCrateResponse</returns>
        System.Threading.Tasks.Task<HuskyCrateResponse> GetCrateAsync (string id);

        /// <summary>
        /// Detailed crate info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>Task of ApiResponse (HuskyCrateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HuskyCrateResponse>> GetCrateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Crate list
        /// </summary>
        /// <remarks>
        /// Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>Task of HuskyCratesResponse</returns>
        System.Threading.Tasks.Task<HuskyCratesResponse> GetCratesAsync (string details = null);

        /// <summary>
        /// Crate list
        /// </summary>
        /// <remarks>
        /// Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>Task of ApiResponse (HuskyCratesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HuskyCratesResponse>> GetCratesAsyncWithHttpInfo (string details = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HuskyCratesApi : IHuskyCratesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HuskyCratesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HuskyCratesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HuskyCratesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HuskyCratesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Detailed crate info Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>HuskyCrateResponse</returns>
        public HuskyCrateResponse GetCrate (string id)
        {
             ApiResponse<HuskyCrateResponse> localVarResponse = GetCrateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed crate info Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>ApiResponse of HuskyCrateResponse</returns>
        public ApiResponse< HuskyCrateResponse > GetCrateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling HuskyCratesApi->GetCrate");

            var localVarPath = "/husky/crate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HuskyCrateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HuskyCrateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HuskyCrateResponse)));
        }

        /// <summary>
        /// Detailed crate info Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>Task of HuskyCrateResponse</returns>
        public async System.Threading.Tasks.Task<HuskyCrateResponse> GetCrateAsync (string id)
        {
             ApiResponse<HuskyCrateResponse> localVarResponse = await GetCrateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed crate info Get detailed information about a crate.  &gt; Required permission: husky.crate.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the crate to get detailed information about.</param>
        /// <returns>Task of ApiResponse (HuskyCrateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HuskyCrateResponse>> GetCrateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling HuskyCratesApi->GetCrate");

            var localVarPath = "/husky/crate/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HuskyCrateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HuskyCrateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HuskyCrateResponse)));
        }

        /// <summary>
        /// Crate list Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>HuskyCratesResponse</returns>
        public HuskyCratesResponse GetCrates (string details = null)
        {
             ApiResponse<HuskyCratesResponse> localVarResponse = GetCratesWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Crate list Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>ApiResponse of HuskyCratesResponse</returns>
        public ApiResponse< HuskyCratesResponse > GetCratesWithHttpInfo (string details = null)
        {

            var localVarPath = "/husky/crate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HuskyCratesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HuskyCratesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HuskyCratesResponse)));
        }

        /// <summary>
        /// Crate list Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>Task of HuskyCratesResponse</returns>
        public async System.Threading.Tasks.Task<HuskyCratesResponse> GetCratesAsync (string details = null)
        {
             ApiResponse<HuskyCratesResponse> localVarResponse = await GetCratesAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Crate list Get a list of all the crates on the server.  &gt; Required permission: husky.crate.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each crate. (optional)</param>
        /// <returns>Task of ApiResponse (HuskyCratesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HuskyCratesResponse>> GetCratesAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/husky/crate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCrates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HuskyCratesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HuskyCratesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HuskyCratesResponse)));
        }

    }
}
