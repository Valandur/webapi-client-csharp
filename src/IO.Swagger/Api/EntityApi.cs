/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Edit entity
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>EntityResponse</returns>
        EntityResponse ChangeEntity (string uuid, UpdateEntityRequest updateEntityRequest);

        /// <summary>
        /// Edit entity
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>ApiResponse of EntityResponse</returns>
        ApiResponse<EntityResponse> ChangeEntityWithHttpInfo (string uuid, UpdateEntityRequest updateEntityRequest);
        /// <summary>
        /// Create an entity
        /// </summary>
        /// <remarks>
        /// Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>EntityResponse</returns>
        EntityResponse CreateEntity (CreateEntityRequest createEntityRequest);

        /// <summary>
        /// Create an entity
        /// </summary>
        /// <remarks>
        /// Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>ApiResponse of EntityResponse</returns>
        ApiResponse<EntityResponse> CreateEntityWithHttpInfo (CreateEntityRequest createEntityRequest);
        /// <summary>
        /// Destroy an entity
        /// </summary>
        /// <remarks>
        /// Destroys an entity.  &gt; Required permission: entity.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>EntityResponse</returns>
        EntityResponse DestroyEntity (string uuid);

        /// <summary>
        /// Destroy an entity
        /// </summary>
        /// <remarks>
        /// Destroys an entity.  &gt; Required permission: entity.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>ApiResponse of EntityResponse</returns>
        ApiResponse<EntityResponse> DestroyEntityWithHttpInfo (string uuid);
        /// <summary>
        /// Execute entity method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>EntityMethodResult</returns>
        EntityMethodResult ExecuteEntityMethod (string uuid, RawRequest request);

        /// <summary>
        /// Execute entity method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of EntityMethodResult</returns>
        ApiResponse<EntityMethodResult> ExecuteEntityMethodWithHttpInfo (string uuid, RawRequest request);
        /// <summary>
        /// Entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>EntitiesList</returns>
        EntitiesList GetEntities (string details = null);

        /// <summary>
        /// Entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>ApiResponse of EntitiesList</returns>
        ApiResponse<EntitiesList> GetEntitiesWithHttpInfo (string details = null);
        /// <summary>
        /// Detailed entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>EntityResponse</returns>
        EntityResponse GetEntity (string uuid, string fields = null, string methods = null);

        /// <summary>
        /// Detailed entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of EntityResponse</returns>
        ApiResponse<EntityResponse> GetEntityWithHttpInfo (string uuid, string fields = null, string methods = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Edit entity
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>Task of EntityResponse</returns>
        System.Threading.Tasks.Task<EntityResponse> ChangeEntityAsync (string uuid, UpdateEntityRequest updateEntityRequest);

        /// <summary>
        /// Edit entity
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityResponse>> ChangeEntityAsyncWithHttpInfo (string uuid, UpdateEntityRequest updateEntityRequest);
        /// <summary>
        /// Create an entity
        /// </summary>
        /// <remarks>
        /// Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>Task of EntityResponse</returns>
        System.Threading.Tasks.Task<EntityResponse> CreateEntityAsync (CreateEntityRequest createEntityRequest);

        /// <summary>
        /// Create an entity
        /// </summary>
        /// <remarks>
        /// Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityResponse>> CreateEntityAsyncWithHttpInfo (CreateEntityRequest createEntityRequest);
        /// <summary>
        /// Destroy an entity
        /// </summary>
        /// <remarks>
        /// Destroys an entity.  &gt; Required permission: entity.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>Task of EntityResponse</returns>
        System.Threading.Tasks.Task<EntityResponse> DestroyEntityAsync (string uuid);

        /// <summary>
        /// Destroy an entity
        /// </summary>
        /// <remarks>
        /// Destroys an entity.  &gt; Required permission: entity.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityResponse>> DestroyEntityAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Execute entity method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of EntityMethodResult</returns>
        System.Threading.Tasks.Task<EntityMethodResult> ExecuteEntityMethodAsync (string uuid, RawRequest request);

        /// <summary>
        /// Execute entity method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (EntityMethodResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityMethodResult>> ExecuteEntityMethodAsyncWithHttpInfo (string uuid, RawRequest request);
        /// <summary>
        /// Entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>Task of EntitiesList</returns>
        System.Threading.Tasks.Task<EntitiesList> GetEntitiesAsync (string details = null);

        /// <summary>
        /// Entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>Task of ApiResponse (EntitiesList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitiesList>> GetEntitiesAsyncWithHttpInfo (string details = null);
        /// <summary>
        /// Detailed entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of EntityResponse</returns>
        System.Threading.Tasks.Task<EntityResponse> GetEntityAsync (string uuid, string fields = null, string methods = null);

        /// <summary>
        /// Detailed entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntityResponse>> GetEntityAsyncWithHttpInfo (string uuid, string fields = null, string methods = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityApi : IEntityApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Edit entity Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>EntityResponse</returns>
        public EntityResponse ChangeEntity (string uuid, UpdateEntityRequest updateEntityRequest)
        {
             ApiResponse<EntityResponse> localVarResponse = ChangeEntityWithHttpInfo(uuid, updateEntityRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit entity Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>ApiResponse of EntityResponse</returns>
        public ApiResponse< EntityResponse > ChangeEntityWithHttpInfo (string uuid, UpdateEntityRequest updateEntityRequest)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->ChangeEntity");
            // verify the required parameter 'updateEntityRequest' is set
            if (updateEntityRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateEntityRequest' when calling EntityApi->ChangeEntity");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (updateEntityRequest != null && updateEntityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateEntityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEntityRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Edit entity Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>Task of EntityResponse</returns>
        public async System.Threading.Tasks.Task<EntityResponse> ChangeEntityAsync (string uuid, UpdateEntityRequest updateEntityRequest)
        {
             ApiResponse<EntityResponse> localVarResponse = await ChangeEntityAsyncWithHttpInfo(uuid, updateEntityRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit entity Update the properties of an existing entity.  &gt; Required permission: entity.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="updateEntityRequest">The new properties of the entity</param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityResponse>> ChangeEntityAsyncWithHttpInfo (string uuid, UpdateEntityRequest updateEntityRequest)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->ChangeEntity");
            // verify the required parameter 'updateEntityRequest' is set
            if (updateEntityRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateEntityRequest' when calling EntityApi->ChangeEntity");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (updateEntityRequest != null && updateEntityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateEntityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateEntityRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Create an entity Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>EntityResponse</returns>
        public EntityResponse CreateEntity (CreateEntityRequest createEntityRequest)
        {
             ApiResponse<EntityResponse> localVarResponse = CreateEntityWithHttpInfo(createEntityRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an entity Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>ApiResponse of EntityResponse</returns>
        public ApiResponse< EntityResponse > CreateEntityWithHttpInfo (CreateEntityRequest createEntityRequest)
        {
            // verify the required parameter 'createEntityRequest' is set
            if (createEntityRequest == null)
                throw new ApiException(400, "Missing required parameter 'createEntityRequest' when calling EntityApi->CreateEntity");

            var localVarPath = "/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createEntityRequest != null && createEntityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createEntityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createEntityRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Create an entity Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>Task of EntityResponse</returns>
        public async System.Threading.Tasks.Task<EntityResponse> CreateEntityAsync (CreateEntityRequest createEntityRequest)
        {
             ApiResponse<EntityResponse> localVarResponse = await CreateEntityAsyncWithHttpInfo(createEntityRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an entity Creates &amp; Spawns a new entity with the specified properties.  &gt; Required permission: entity.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEntityRequest"></param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityResponse>> CreateEntityAsyncWithHttpInfo (CreateEntityRequest createEntityRequest)
        {
            // verify the required parameter 'createEntityRequest' is set
            if (createEntityRequest == null)
                throw new ApiException(400, "Missing required parameter 'createEntityRequest' when calling EntityApi->CreateEntity");

            var localVarPath = "/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createEntityRequest != null && createEntityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createEntityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createEntityRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Destroy an entity Destroys an entity.  &gt; Required permission: entity.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>EntityResponse</returns>
        public EntityResponse DestroyEntity (string uuid)
        {
             ApiResponse<EntityResponse> localVarResponse = DestroyEntityWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Destroy an entity Destroys an entity.  &gt; Required permission: entity.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>ApiResponse of EntityResponse</returns>
        public ApiResponse< EntityResponse > DestroyEntityWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->DestroyEntity");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Destroy an entity Destroys an entity.  &gt; Required permission: entity.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>Task of EntityResponse</returns>
        public async System.Threading.Tasks.Task<EntityResponse> DestroyEntityAsync (string uuid)
        {
             ApiResponse<EntityResponse> localVarResponse = await DestroyEntityAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Destroy an entity Destroys an entity.  &gt; Required permission: entity.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityResponse>> DestroyEntityAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->DestroyEntity");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DestroyEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Execute entity method Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>EntityMethodResult</returns>
        public EntityMethodResult ExecuteEntityMethod (string uuid, RawRequest request)
        {
             ApiResponse<EntityMethodResult> localVarResponse = ExecuteEntityMethodWithHttpInfo(uuid, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute entity method Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of EntityMethodResult</returns>
        public ApiResponse< EntityMethodResult > ExecuteEntityMethodWithHttpInfo (string uuid, RawRequest request)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->ExecuteEntityMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EntityApi->ExecuteEntityMethod");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteEntityMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityMethodResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityMethodResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityMethodResult)));
        }

        /// <summary>
        /// Execute entity method Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of EntityMethodResult</returns>
        public async System.Threading.Tasks.Task<EntityMethodResult> ExecuteEntityMethodAsync (string uuid, RawRequest request)
        {
             ApiResponse<EntityMethodResult> localVarResponse = await ExecuteEntityMethodAsyncWithHttpInfo(uuid, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute entity method Provides direct access to the underlaying entity object and can execute any method on it.  &gt; Required permission: entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (EntityMethodResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityMethodResult>> ExecuteEntityMethodAsyncWithHttpInfo (string uuid, RawRequest request)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->ExecuteEntityMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EntityApi->ExecuteEntityMethod");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteEntityMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityMethodResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityMethodResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityMethodResult)));
        }

        /// <summary>
        /// Entities list Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>EntitiesList</returns>
        public EntitiesList GetEntities (string details = null)
        {
             ApiResponse<EntitiesList> localVarResponse = GetEntitiesWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Entities list Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>ApiResponse of EntitiesList</returns>
        public ApiResponse< EntitiesList > GetEntitiesWithHttpInfo (string details = null)
        {

            var localVarPath = "/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitiesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitiesList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitiesList)));
        }

        /// <summary>
        /// Entities list Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>Task of EntitiesList</returns>
        public async System.Threading.Tasks.Task<EntitiesList> GetEntitiesAsync (string details = null)
        {
             ApiResponse<EntitiesList> localVarResponse = await GetEntitiesAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Entities list Get a list of all entities on the server (in all worlds).  &gt; Required permission: entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each entity. (optional)</param>
        /// <returns>Task of ApiResponse (EntitiesList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitiesList>> GetEntitiesAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitiesList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitiesList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitiesList)));
        }

        /// <summary>
        /// Detailed entity info Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>EntityResponse</returns>
        public EntityResponse GetEntity (string uuid, string fields = null, string methods = null)
        {
             ApiResponse<EntityResponse> localVarResponse = GetEntityWithHttpInfo(uuid, fields, methods);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed entity info Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of EntityResponse</returns>
        public ApiResponse< EntityResponse > GetEntityWithHttpInfo (string uuid, string fields = null, string methods = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->GetEntity");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

        /// <summary>
        /// Detailed entity info Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of EntityResponse</returns>
        public async System.Threading.Tasks.Task<EntityResponse> GetEntityAsync (string uuid, string fields = null, string methods = null)
        {
             ApiResponse<EntityResponse> localVarResponse = await GetEntityAsyncWithHttpInfo(uuid, fields, methods);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed entity info Get detailed information about an entity.  &gt; Required permission: entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the entity to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (EntityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntityResponse>> GetEntityAsyncWithHttpInfo (string uuid, string fields = null, string methods = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling EntityApi->GetEntity");

            var localVarPath = "/entity/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntityResponse)));
        }

    }
}
