/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INucleusApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Detailed jail info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>NucleusJailResponse</returns>
        NucleusJailResponse GetJail (string name);

        /// <summary>
        /// Detailed jail info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>ApiResponse of NucleusJailResponse</returns>
        ApiResponse<NucleusJailResponse> GetJailWithHttpInfo (string name);
        /// <summary>
        /// Jail list
        /// </summary>
        /// <remarks>
        /// Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>NucleusJailsResponse</returns>
        NucleusJailsResponse GetJails (string details = null);

        /// <summary>
        /// Jail list
        /// </summary>
        /// <remarks>
        /// Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>ApiResponse of NucleusJailsResponse</returns>
        ApiResponse<NucleusJailsResponse> GetJailsWithHttpInfo (string details = null);
        /// <summary>
        /// Detailed kit info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>NucleusKitResponse</returns>
        NucleusKitResponse GetKit (string name);

        /// <summary>
        /// Detailed kit info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>ApiResponse of NucleusKitResponse</returns>
        ApiResponse<NucleusKitResponse> GetKitWithHttpInfo (string name);
        /// <summary>
        /// Kit list
        /// </summary>
        /// <remarks>
        /// Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>NucleusKitsResponse</returns>
        NucleusKitsResponse GetKits (string details = null);

        /// <summary>
        /// Kit list
        /// </summary>
        /// <remarks>
        /// Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>ApiResponse of NucleusKitsResponse</returns>
        ApiResponse<NucleusKitsResponse> GetKitsWithHttpInfo (string details = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Detailed jail info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>Task of NucleusJailResponse</returns>
        System.Threading.Tasks.Task<NucleusJailResponse> GetJailAsync (string name);

        /// <summary>
        /// Detailed jail info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>Task of ApiResponse (NucleusJailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NucleusJailResponse>> GetJailAsyncWithHttpInfo (string name);
        /// <summary>
        /// Jail list
        /// </summary>
        /// <remarks>
        /// Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>Task of NucleusJailsResponse</returns>
        System.Threading.Tasks.Task<NucleusJailsResponse> GetJailsAsync (string details = null);

        /// <summary>
        /// Jail list
        /// </summary>
        /// <remarks>
        /// Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>Task of ApiResponse (NucleusJailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NucleusJailsResponse>> GetJailsAsyncWithHttpInfo (string details = null);
        /// <summary>
        /// Detailed kit info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>Task of NucleusKitResponse</returns>
        System.Threading.Tasks.Task<NucleusKitResponse> GetKitAsync (string name);

        /// <summary>
        /// Detailed kit info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>Task of ApiResponse (NucleusKitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NucleusKitResponse>> GetKitAsyncWithHttpInfo (string name);
        /// <summary>
        /// Kit list
        /// </summary>
        /// <remarks>
        /// Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>Task of NucleusKitsResponse</returns>
        System.Threading.Tasks.Task<NucleusKitsResponse> GetKitsAsync (string details = null);

        /// <summary>
        /// Kit list
        /// </summary>
        /// <remarks>
        /// Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>Task of ApiResponse (NucleusKitsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NucleusKitsResponse>> GetKitsAsyncWithHttpInfo (string details = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NucleusApi : INucleusApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NucleusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NucleusApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NucleusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NucleusApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Detailed jail info Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>NucleusJailResponse</returns>
        public NucleusJailResponse GetJail (string name)
        {
             ApiResponse<NucleusJailResponse> localVarResponse = GetJailWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed jail info Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>ApiResponse of NucleusJailResponse</returns>
        public ApiResponse< NucleusJailResponse > GetJailWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling NucleusApi->GetJail");

            var localVarPath = "/nucleus/jail/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusJailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusJailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusJailResponse)));
        }

        /// <summary>
        /// Detailed jail info Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>Task of NucleusJailResponse</returns>
        public async System.Threading.Tasks.Task<NucleusJailResponse> GetJailAsync (string name)
        {
             ApiResponse<NucleusJailResponse> localVarResponse = await GetJailAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed jail info Get detailed information about a jail.  &gt; Required permission: nucleus.jail.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the jail to get detailed information about.</param>
        /// <returns>Task of ApiResponse (NucleusJailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NucleusJailResponse>> GetJailAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling NucleusApi->GetJail");

            var localVarPath = "/nucleus/jail/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusJailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusJailResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusJailResponse)));
        }

        /// <summary>
        /// Jail list Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>NucleusJailsResponse</returns>
        public NucleusJailsResponse GetJails (string details = null)
        {
             ApiResponse<NucleusJailsResponse> localVarResponse = GetJailsWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Jail list Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>ApiResponse of NucleusJailsResponse</returns>
        public ApiResponse< NucleusJailsResponse > GetJailsWithHttpInfo (string details = null)
        {

            var localVarPath = "/nucleus/jail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusJailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusJailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusJailsResponse)));
        }

        /// <summary>
        /// Jail list Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>Task of NucleusJailsResponse</returns>
        public async System.Threading.Tasks.Task<NucleusJailsResponse> GetJailsAsync (string details = null)
        {
             ApiResponse<NucleusJailsResponse> localVarResponse = await GetJailsAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Jail list Get a list of all the jails on the server.  &gt; Required permission: nucleus.jail.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each jail. (optional)</param>
        /// <returns>Task of ApiResponse (NucleusJailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NucleusJailsResponse>> GetJailsAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/nucleus/jail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusJailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusJailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusJailsResponse)));
        }

        /// <summary>
        /// Detailed kit info Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>NucleusKitResponse</returns>
        public NucleusKitResponse GetKit (string name)
        {
             ApiResponse<NucleusKitResponse> localVarResponse = GetKitWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed kit info Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>ApiResponse of NucleusKitResponse</returns>
        public ApiResponse< NucleusKitResponse > GetKitWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling NucleusApi->GetKit");

            var localVarPath = "/nucleus/kit/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusKitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusKitResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusKitResponse)));
        }

        /// <summary>
        /// Detailed kit info Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>Task of NucleusKitResponse</returns>
        public async System.Threading.Tasks.Task<NucleusKitResponse> GetKitAsync (string name)
        {
             ApiResponse<NucleusKitResponse> localVarResponse = await GetKitAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed kit info Get detailed information about a kit.  &gt; Required permission: nucleus.kit.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the kit to get detailed information about.</param>
        /// <returns>Task of ApiResponse (NucleusKitResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NucleusKitResponse>> GetKitAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling NucleusApi->GetKit");

            var localVarPath = "/nucleus/kit/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusKitResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusKitResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusKitResponse)));
        }

        /// <summary>
        /// Kit list Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>NucleusKitsResponse</returns>
        public NucleusKitsResponse GetKits (string details = null)
        {
             ApiResponse<NucleusKitsResponse> localVarResponse = GetKitsWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Kit list Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>ApiResponse of NucleusKitsResponse</returns>
        public ApiResponse< NucleusKitsResponse > GetKitsWithHttpInfo (string details = null)
        {

            var localVarPath = "/nucleus/kit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusKitsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusKitsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusKitsResponse)));
        }

        /// <summary>
        /// Kit list Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>Task of NucleusKitsResponse</returns>
        public async System.Threading.Tasks.Task<NucleusKitsResponse> GetKitsAsync (string details = null)
        {
             ApiResponse<NucleusKitsResponse> localVarResponse = await GetKitsAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Kit list Get a list of all the kits on the server.  &gt; Required permission: nucleus.kit.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each kit. (optional)</param>
        /// <returns>Task of ApiResponse (NucleusKitsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NucleusKitsResponse>> GetKitsAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/nucleus/kit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NucleusKitsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NucleusKitsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(NucleusKitsResponse)));
        }

    }
}
