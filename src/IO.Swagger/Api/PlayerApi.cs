/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Edit player
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>PlayerResponse</returns>
        PlayerResponse ChangePlayer (string uuid, UpdatePlayerRequest updatePlayerRequest);

        /// <summary>
        /// Edit player
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        ApiResponse<PlayerResponse> ChangePlayerWithHttpInfo (string uuid, UpdatePlayerRequest updatePlayerRequest);
        /// <summary>
        /// Execute player method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ExecutePlayerMethodResponse</returns>
        ExecutePlayerMethodResponse ExecutePlayerMethod (string uuid, RawRequest request);

        /// <summary>
        /// Execute player method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of ExecutePlayerMethodResponse</returns>
        ApiResponse<ExecutePlayerMethodResponse> ExecutePlayerMethodWithHttpInfo (string uuid, RawRequest request);
        /// <summary>
        /// Detailed player info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a player.  &gt; Required permission: player.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>PlayerResponse</returns>
        PlayerResponse GetPlayer (string uuid, string fields = null, string methods = null);

        /// <summary>
        /// Detailed player info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a player.  &gt; Required permission: player.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        ApiResponse<PlayerResponse> GetPlayerWithHttpInfo (string uuid, string fields = null, string methods = null);
        /// <summary>
        /// Player list
        /// </summary>
        /// <remarks>
        /// Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PlayersList</returns>
        PlayersList GetPlayers ();

        /// <summary>
        /// Player list
        /// </summary>
        /// <remarks>
        /// Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PlayersList</returns>
        ApiResponse<PlayersList> GetPlayersWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Edit player
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>Task of PlayerResponse</returns>
        System.Threading.Tasks.Task<PlayerResponse> ChangePlayerAsync (string uuid, UpdatePlayerRequest updatePlayerRequest);

        /// <summary>
        /// Edit player
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> ChangePlayerAsyncWithHttpInfo (string uuid, UpdatePlayerRequest updatePlayerRequest);
        /// <summary>
        /// Execute player method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ExecutePlayerMethodResponse</returns>
        System.Threading.Tasks.Task<ExecutePlayerMethodResponse> ExecutePlayerMethodAsync (string uuid, RawRequest request);

        /// <summary>
        /// Execute player method
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (ExecutePlayerMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecutePlayerMethodResponse>> ExecutePlayerMethodAsyncWithHttpInfo (string uuid, RawRequest request);
        /// <summary>
        /// Detailed player info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a player.  &gt; Required permission: player.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of PlayerResponse</returns>
        System.Threading.Tasks.Task<PlayerResponse> GetPlayerAsync (string uuid, string fields = null, string methods = null);

        /// <summary>
        /// Detailed player info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a player.  &gt; Required permission: player.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> GetPlayerAsyncWithHttpInfo (string uuid, string fields = null, string methods = null);
        /// <summary>
        /// Player list
        /// </summary>
        /// <remarks>
        /// Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PlayersList</returns>
        System.Threading.Tasks.Task<PlayersList> GetPlayersAsync ();

        /// <summary>
        /// Player list
        /// </summary>
        /// <remarks>
        /// Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PlayersList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayersList>> GetPlayersAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayerApi : IPlayerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Edit player Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>PlayerResponse</returns>
        public PlayerResponse ChangePlayer (string uuid, UpdatePlayerRequest updatePlayerRequest)
        {
             ApiResponse<PlayerResponse> localVarResponse = ChangePlayerWithHttpInfo(uuid, updatePlayerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit player Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        public ApiResponse< PlayerResponse > ChangePlayerWithHttpInfo (string uuid, UpdatePlayerRequest updatePlayerRequest)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PlayerApi->ChangePlayer");
            // verify the required parameter 'updatePlayerRequest' is set
            if (updatePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePlayerRequest' when calling PlayerApi->ChangePlayer");

            var localVarPath = "/player/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (updatePlayerRequest != null && updatePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updatePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlayerRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlayerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerResponse)));
        }

        /// <summary>
        /// Edit player Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>Task of PlayerResponse</returns>
        public async System.Threading.Tasks.Task<PlayerResponse> ChangePlayerAsync (string uuid, UpdatePlayerRequest updatePlayerRequest)
        {
             ApiResponse<PlayerResponse> localVarResponse = await ChangePlayerAsyncWithHttpInfo(uuid, updatePlayerRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit player Update the properties of an existing player.  &gt; Required permission: player.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="updatePlayerRequest">The new properties of the player</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> ChangePlayerAsyncWithHttpInfo (string uuid, UpdatePlayerRequest updatePlayerRequest)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PlayerApi->ChangePlayer");
            // verify the required parameter 'updatePlayerRequest' is set
            if (updatePlayerRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePlayerRequest' when calling PlayerApi->ChangePlayer");

            var localVarPath = "/player/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (updatePlayerRequest != null && updatePlayerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updatePlayerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePlayerRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlayerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerResponse)));
        }

        /// <summary>
        /// Execute player method Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ExecutePlayerMethodResponse</returns>
        public ExecutePlayerMethodResponse ExecutePlayerMethod (string uuid, RawRequest request)
        {
             ApiResponse<ExecutePlayerMethodResponse> localVarResponse = ExecutePlayerMethodWithHttpInfo(uuid, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute player method Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of ExecutePlayerMethodResponse</returns>
        public ApiResponse< ExecutePlayerMethodResponse > ExecutePlayerMethodWithHttpInfo (string uuid, RawRequest request)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PlayerApi->ExecutePlayerMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PlayerApi->ExecutePlayerMethod");

            var localVarPath = "/player/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePlayerMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePlayerMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutePlayerMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePlayerMethodResponse)));
        }

        /// <summary>
        /// Execute player method Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ExecutePlayerMethodResponse</returns>
        public async System.Threading.Tasks.Task<ExecutePlayerMethodResponse> ExecutePlayerMethodAsync (string uuid, RawRequest request)
        {
             ApiResponse<ExecutePlayerMethodResponse> localVarResponse = await ExecutePlayerMethodAsyncWithHttpInfo(uuid, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute player method Provides direct access to the underlaying player object and can execute any method on it.  &gt; Required permission: player.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (ExecutePlayerMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecutePlayerMethodResponse>> ExecutePlayerMethodAsyncWithHttpInfo (string uuid, RawRequest request)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PlayerApi->ExecutePlayerMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling PlayerApi->ExecutePlayerMethod");

            var localVarPath = "/player/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutePlayerMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecutePlayerMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecutePlayerMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecutePlayerMethodResponse)));
        }

        /// <summary>
        /// Detailed player info Get detailed information about a player.  &gt; Required permission: player.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>PlayerResponse</returns>
        public PlayerResponse GetPlayer (string uuid, string fields = null, string methods = null)
        {
             ApiResponse<PlayerResponse> localVarResponse = GetPlayerWithHttpInfo(uuid, fields, methods);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed player info Get detailed information about a player.  &gt; Required permission: player.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        public ApiResponse< PlayerResponse > GetPlayerWithHttpInfo (string uuid, string fields = null, string methods = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PlayerApi->GetPlayer");

            var localVarPath = "/player/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlayerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerResponse)));
        }

        /// <summary>
        /// Detailed player info Get detailed information about a player.  &gt; Required permission: player.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of PlayerResponse</returns>
        public async System.Threading.Tasks.Task<PlayerResponse> GetPlayerAsync (string uuid, string fields = null, string methods = null)
        {
             ApiResponse<PlayerResponse> localVarResponse = await GetPlayerAsyncWithHttpInfo(uuid, fields, methods);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed player info Get detailed information about a player.  &gt; Required permission: player.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the player to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> GetPlayerAsyncWithHttpInfo (string uuid, string fields = null, string methods = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PlayerApi->GetPlayer");

            var localVarPath = "/player/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlayerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayerResponse)));
        }

        /// <summary>
        /// Player list Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PlayersList</returns>
        public PlayersList GetPlayers ()
        {
             ApiResponse<PlayersList> localVarResponse = GetPlayersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Player list Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PlayersList</returns>
        public ApiResponse< PlayersList > GetPlayersWithHttpInfo ()
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlayersList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayersList)));
        }

        /// <summary>
        /// Player list Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PlayersList</returns>
        public async System.Threading.Tasks.Task<PlayersList> GetPlayersAsync ()
        {
             ApiResponse<PlayersList> localVarResponse = await GetPlayersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Player list Get a list of all the players on the server.  &gt; Required permission: player.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PlayersList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PlayersList>> GetPlayersAsyncWithHttpInfo ()
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PlayersList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PlayersList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PlayersList)));
        }

    }
}
