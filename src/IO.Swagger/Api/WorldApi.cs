/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorldApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Edit world
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>WorldResponse</returns>
        WorldResponse ChangeWorld (string uuid, UpdateWorldRequest updateWorldRequest);

        /// <summary>
        /// Edit world
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>ApiResponse of WorldResponse</returns>
        ApiResponse<WorldResponse> ChangeWorldWithHttpInfo (string uuid, UpdateWorldRequest updateWorldRequest);
        /// <summary>
        /// Create a world
        /// </summary>
        /// <remarks>
        /// Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>WorldResponse</returns>
        WorldResponse CreateWorld (CreateWorldRequest createWorldRequest);

        /// <summary>
        /// Create a world
        /// </summary>
        /// <remarks>
        /// Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>ApiResponse of WorldResponse</returns>
        ApiResponse<WorldResponse> CreateWorldWithHttpInfo (CreateWorldRequest createWorldRequest);
        /// <summary>
        /// Delete a world
        /// </summary>
        /// <remarks>
        /// Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>WorldResponse</returns>
        WorldResponse DeleteWorld (string uuid);

        /// <summary>
        /// Delete a world
        /// </summary>
        /// <remarks>
        /// Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>ApiResponse of WorldResponse</returns>
        ApiResponse<WorldResponse> DeleteWorldWithHttpInfo (string uuid);
        /// <summary>
        /// Execute world methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ExecuteWorldMethodResponse</returns>
        ExecuteWorldMethodResponse ExecuteWorldMethod (string uuid, RawRequest request);

        /// <summary>
        /// Execute world methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of ExecuteWorldMethodResponse</returns>
        ApiResponse<ExecuteWorldMethodResponse> ExecuteWorldMethodWithHttpInfo (string uuid, RawRequest request);
        /// <summary>
        /// Detailed chunk info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>ChunkResponse</returns>
        ChunkResponse GetChunk (string uuid, int? x, int? z);

        /// <summary>
        /// Detailed chunk info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>ApiResponse of ChunkResponse</returns>
        ApiResponse<ChunkResponse> GetChunkWithHttpInfo (string uuid, int? x, int? z);
        /// <summary>
        /// Loaded chunk list
        /// </summary>
        /// <remarks>
        /// Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>ChunksResponse</returns>
        ChunksResponse GetChunks (string uuid);

        /// <summary>
        /// Loaded chunk list
        /// </summary>
        /// <remarks>
        /// Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>ApiResponse of ChunksResponse</returns>
        ApiResponse<ChunksResponse> GetChunksWithHttpInfo (string uuid);
        /// <summary>
        /// Detailed world info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a world.  &gt; Required permission: world.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>WorldResponse</returns>
        WorldResponse GetWorld (string uuid, string fields = null, string methods = null);

        /// <summary>
        /// Detailed world info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a world.  &gt; Required permission: world.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of WorldResponse</returns>
        ApiResponse<WorldResponse> GetWorldWithHttpInfo (string uuid, string fields = null, string methods = null);
        /// <summary>
        /// World list
        /// </summary>
        /// <remarks>
        /// Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>WorldsResponse</returns>
        WorldsResponse GetWorlds (string details = null);

        /// <summary>
        /// World list
        /// </summary>
        /// <remarks>
        /// Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>ApiResponse of WorldsResponse</returns>
        ApiResponse<WorldsResponse> GetWorldsWithHttpInfo (string details = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Edit world
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>Task of WorldResponse</returns>
        System.Threading.Tasks.Task<WorldResponse> ChangeWorldAsync (string uuid, UpdateWorldRequest updateWorldRequest);

        /// <summary>
        /// Edit world
        /// </summary>
        /// <remarks>
        /// Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldResponse>> ChangeWorldAsyncWithHttpInfo (string uuid, UpdateWorldRequest updateWorldRequest);
        /// <summary>
        /// Create a world
        /// </summary>
        /// <remarks>
        /// Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>Task of WorldResponse</returns>
        System.Threading.Tasks.Task<WorldResponse> CreateWorldAsync (CreateWorldRequest createWorldRequest);

        /// <summary>
        /// Create a world
        /// </summary>
        /// <remarks>
        /// Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldResponse>> CreateWorldAsyncWithHttpInfo (CreateWorldRequest createWorldRequest);
        /// <summary>
        /// Delete a world
        /// </summary>
        /// <remarks>
        /// Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of WorldResponse</returns>
        System.Threading.Tasks.Task<WorldResponse> DeleteWorldAsync (string uuid);

        /// <summary>
        /// Delete a world
        /// </summary>
        /// <remarks>
        /// Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldResponse>> DeleteWorldAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Execute world methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ExecuteWorldMethodResponse</returns>
        System.Threading.Tasks.Task<ExecuteWorldMethodResponse> ExecuteWorldMethodAsync (string uuid, RawRequest request);

        /// <summary>
        /// Execute world methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (ExecuteWorldMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteWorldMethodResponse>> ExecuteWorldMethodAsyncWithHttpInfo (string uuid, RawRequest request);
        /// <summary>
        /// Detailed chunk info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>Task of ChunkResponse</returns>
        System.Threading.Tasks.Task<ChunkResponse> GetChunkAsync (string uuid, int? x, int? z);

        /// <summary>
        /// Detailed chunk info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>Task of ApiResponse (ChunkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChunkResponse>> GetChunkAsyncWithHttpInfo (string uuid, int? x, int? z);
        /// <summary>
        /// Loaded chunk list
        /// </summary>
        /// <remarks>
        /// Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of ChunksResponse</returns>
        System.Threading.Tasks.Task<ChunksResponse> GetChunksAsync (string uuid);

        /// <summary>
        /// Loaded chunk list
        /// </summary>
        /// <remarks>
        /// Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of ApiResponse (ChunksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChunksResponse>> GetChunksAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Detailed world info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a world.  &gt; Required permission: world.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of WorldResponse</returns>
        System.Threading.Tasks.Task<WorldResponse> GetWorldAsync (string uuid, string fields = null, string methods = null);

        /// <summary>
        /// Detailed world info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a world.  &gt; Required permission: world.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldResponse>> GetWorldAsyncWithHttpInfo (string uuid, string fields = null, string methods = null);
        /// <summary>
        /// World list
        /// </summary>
        /// <remarks>
        /// Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>Task of WorldsResponse</returns>
        System.Threading.Tasks.Task<WorldsResponse> GetWorldsAsync (string details = null);

        /// <summary>
        /// World list
        /// </summary>
        /// <remarks>
        /// Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>Task of ApiResponse (WorldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorldsResponse>> GetWorldsAsyncWithHttpInfo (string details = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorldApi : IWorldApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorldApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorldApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorldApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Edit world Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>WorldResponse</returns>
        public WorldResponse ChangeWorld (string uuid, UpdateWorldRequest updateWorldRequest)
        {
             ApiResponse<WorldResponse> localVarResponse = ChangeWorldWithHttpInfo(uuid, updateWorldRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit world Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>ApiResponse of WorldResponse</returns>
        public ApiResponse< WorldResponse > ChangeWorldWithHttpInfo (string uuid, UpdateWorldRequest updateWorldRequest)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->ChangeWorld");
            // verify the required parameter 'updateWorldRequest' is set
            if (updateWorldRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateWorldRequest' when calling WorldApi->ChangeWorld");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (updateWorldRequest != null && updateWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWorldRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Edit world Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>Task of WorldResponse</returns>
        public async System.Threading.Tasks.Task<WorldResponse> ChangeWorldAsync (string uuid, UpdateWorldRequest updateWorldRequest)
        {
             ApiResponse<WorldResponse> localVarResponse = await ChangeWorldAsyncWithHttpInfo(uuid, updateWorldRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit world Update the properties of an existing world.  &gt; Required permission: world.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="updateWorldRequest">The new properties of the world</param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldResponse>> ChangeWorldAsyncWithHttpInfo (string uuid, UpdateWorldRequest updateWorldRequest)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->ChangeWorld");
            // verify the required parameter 'updateWorldRequest' is set
            if (updateWorldRequest == null)
                throw new ApiException(400, "Missing required parameter 'updateWorldRequest' when calling WorldApi->ChangeWorld");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (updateWorldRequest != null && updateWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateWorldRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Create a world Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>WorldResponse</returns>
        public WorldResponse CreateWorld (CreateWorldRequest createWorldRequest)
        {
             ApiResponse<WorldResponse> localVarResponse = CreateWorldWithHttpInfo(createWorldRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a world Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>ApiResponse of WorldResponse</returns>
        public ApiResponse< WorldResponse > CreateWorldWithHttpInfo (CreateWorldRequest createWorldRequest)
        {
            // verify the required parameter 'createWorldRequest' is set
            if (createWorldRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWorldRequest' when calling WorldApi->CreateWorld");

            var localVarPath = "/world";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createWorldRequest != null && createWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWorldRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Create a world Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>Task of WorldResponse</returns>
        public async System.Threading.Tasks.Task<WorldResponse> CreateWorldAsync (CreateWorldRequest createWorldRequest)
        {
             ApiResponse<WorldResponse> localVarResponse = await CreateWorldAsyncWithHttpInfo(createWorldRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a world Creates a new world with the specified settings. This does not yet load the world.  &gt; Required permission: world.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorldRequest"></param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldResponse>> CreateWorldAsyncWithHttpInfo (CreateWorldRequest createWorldRequest)
        {
            // verify the required parameter 'createWorldRequest' is set
            if (createWorldRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWorldRequest' when calling WorldApi->CreateWorld");

            var localVarPath = "/world";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createWorldRequest != null && createWorldRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createWorldRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWorldRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Delete a world Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>WorldResponse</returns>
        public WorldResponse DeleteWorld (string uuid)
        {
             ApiResponse<WorldResponse> localVarResponse = DeleteWorldWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a world Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>ApiResponse of WorldResponse</returns>
        public ApiResponse< WorldResponse > DeleteWorldWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->DeleteWorld");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Delete a world Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of WorldResponse</returns>
        public async System.Threading.Tasks.Task<WorldResponse> DeleteWorldAsync (string uuid)
        {
             ApiResponse<WorldResponse> localVarResponse = await DeleteWorldAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a world Deletes an existing world. **The world must be unloaded before deleting it**  &gt; Required permission: world.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldResponse>> DeleteWorldAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->DeleteWorld");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Execute world methods Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ExecuteWorldMethodResponse</returns>
        public ExecuteWorldMethodResponse ExecuteWorldMethod (string uuid, RawRequest request)
        {
             ApiResponse<ExecuteWorldMethodResponse> localVarResponse = ExecuteWorldMethodWithHttpInfo(uuid, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute world methods Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of ExecuteWorldMethodResponse</returns>
        public ApiResponse< ExecuteWorldMethodResponse > ExecuteWorldMethodWithHttpInfo (string uuid, RawRequest request)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->ExecuteWorldMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WorldApi->ExecuteWorldMethod");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteWorldMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteWorldMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteWorldMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteWorldMethodResponse)));
        }

        /// <summary>
        /// Execute world methods Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ExecuteWorldMethodResponse</returns>
        public async System.Threading.Tasks.Task<ExecuteWorldMethodResponse> ExecuteWorldMethodAsync (string uuid, RawRequest request)
        {
             ApiResponse<ExecuteWorldMethodResponse> localVarResponse = await ExecuteWorldMethodAsyncWithHttpInfo(uuid, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute world methods Provides direct access to the underlaying world object and can execute any method on it.  &gt; Required permission: world.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (ExecuteWorldMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecuteWorldMethodResponse>> ExecuteWorldMethodAsyncWithHttpInfo (string uuid, RawRequest request)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->ExecuteWorldMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling WorldApi->ExecuteWorldMethod");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteWorldMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteWorldMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteWorldMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteWorldMethodResponse)));
        }

        /// <summary>
        /// Detailed chunk info Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>ChunkResponse</returns>
        public ChunkResponse GetChunk (string uuid, int? x, int? z)
        {
             ApiResponse<ChunkResponse> localVarResponse = GetChunkWithHttpInfo(uuid, x, z);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed chunk info Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>ApiResponse of ChunkResponse</returns>
        public ApiResponse< ChunkResponse > GetChunkWithHttpInfo (string uuid, int? x, int? z)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->GetChunk");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling WorldApi->GetChunk");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling WorldApi->GetChunk");

            var localVarPath = "/world/{uuid}/chunk/{x}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChunkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChunkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChunkResponse)));
        }

        /// <summary>
        /// Detailed chunk info Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>Task of ChunkResponse</returns>
        public async System.Threading.Tasks.Task<ChunkResponse> GetChunkAsync (string uuid, int? x, int? z)
        {
             ApiResponse<ChunkResponse> localVarResponse = await GetChunkAsyncWithHttpInfo(uuid, x, z);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed chunk info Get detailed information about a chunk  &gt; Required permission: world.chunk.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <param name="x">The x-coordinate of the chunk.</param>
        /// <param name="z">The z-coordinate of the chunk.</param>
        /// <returns>Task of ApiResponse (ChunkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChunkResponse>> GetChunkAsyncWithHttpInfo (string uuid, int? x, int? z)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->GetChunk");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling WorldApi->GetChunk");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling WorldApi->GetChunk");

            var localVarPath = "/world/{uuid}/chunk/{x}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChunk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChunkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChunkResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChunkResponse)));
        }

        /// <summary>
        /// Loaded chunk list Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>ChunksResponse</returns>
        public ChunksResponse GetChunks (string uuid)
        {
             ApiResponse<ChunksResponse> localVarResponse = GetChunksWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loaded chunk list Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>ApiResponse of ChunksResponse</returns>
        public ApiResponse< ChunksResponse > GetChunksWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->GetChunks");

            var localVarPath = "/world/{uuid}/chunk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChunks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChunksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChunksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChunksResponse)));
        }

        /// <summary>
        /// Loaded chunk list Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of ChunksResponse</returns>
        public async System.Threading.Tasks.Task<ChunksResponse> GetChunksAsync (string uuid)
        {
             ApiResponse<ChunksResponse> localVarResponse = await GetChunksAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loaded chunk list Gets a list of all the loaded chunks for the specified world.  &gt; Required permission: world.chunk.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world.</param>
        /// <returns>Task of ApiResponse (ChunksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChunksResponse>> GetChunksAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->GetChunks");

            var localVarPath = "/world/{uuid}/chunk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChunks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChunksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChunksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChunksResponse)));
        }

        /// <summary>
        /// Detailed world info Get detailed information about a world.  &gt; Required permission: world.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>WorldResponse</returns>
        public WorldResponse GetWorld (string uuid, string fields = null, string methods = null)
        {
             ApiResponse<WorldResponse> localVarResponse = GetWorldWithHttpInfo(uuid, fields, methods);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed world info Get detailed information about a world.  &gt; Required permission: world.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of WorldResponse</returns>
        public ApiResponse< WorldResponse > GetWorldWithHttpInfo (string uuid, string fields = null, string methods = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->GetWorld");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// Detailed world info Get detailed information about a world.  &gt; Required permission: world.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of WorldResponse</returns>
        public async System.Threading.Tasks.Task<WorldResponse> GetWorldAsync (string uuid, string fields = null, string methods = null)
        {
             ApiResponse<WorldResponse> localVarResponse = await GetWorldAsyncWithHttpInfo(uuid, fields, methods);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed world info Get detailed information about a world.  &gt; Required permission: world.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the world to get detailed information about.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (WorldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldResponse>> GetWorldAsyncWithHttpInfo (string uuid, string fields = null, string methods = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling WorldApi->GetWorld");

            var localVarPath = "/world/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorld", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldResponse)));
        }

        /// <summary>
        /// World list Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>WorldsResponse</returns>
        public WorldsResponse GetWorlds (string details = null)
        {
             ApiResponse<WorldsResponse> localVarResponse = GetWorldsWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// World list Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>ApiResponse of WorldsResponse</returns>
        public ApiResponse< WorldsResponse > GetWorldsWithHttpInfo (string details = null)
        {

            var localVarPath = "/world";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldsResponse)));
        }

        /// <summary>
        /// World list Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>Task of WorldsResponse</returns>
        public async System.Threading.Tasks.Task<WorldsResponse> GetWorldsAsync (string details = null)
        {
             ApiResponse<WorldsResponse> localVarResponse = await GetWorldsAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// World list Get a list of all the worlds on the server.  &gt; Required permission: world.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each world. (optional)</param>
        /// <returns>Task of ApiResponse (WorldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorldsResponse>> GetWorldsAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/world";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWorlds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WorldsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorldsResponse)));
        }

    }
}
