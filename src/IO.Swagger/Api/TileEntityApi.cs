/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITileEntityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Execute tile entity methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ExecuteTileEntityMethodResponse</returns>
        ExecuteTileEntityMethodResponse ExecuteTileEntityMethod (string worldUuid, int? x, int? y, int? z, RawRequest request);

        /// <summary>
        /// Execute tile entity methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of ExecuteTileEntityMethodResponse</returns>
        ApiResponse<ExecuteTileEntityMethodResponse> ExecuteTileEntityMethodWithHttpInfo (string worldUuid, int? x, int? y, int? z, RawRequest request);
        /// <summary>
        /// Tile entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>TileEntitiesResponse</returns>
        TileEntitiesResponse GetTileEntities (string world = null, string type = null, string limit = null);

        /// <summary>
        /// Tile entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>ApiResponse of TileEntitiesResponse</returns>
        ApiResponse<TileEntitiesResponse> GetTileEntitiesWithHttpInfo (string world = null, string type = null, string limit = null);
        /// <summary>
        /// Detailed tile entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>TileEntityResponse</returns>
        TileEntityResponse GetTileEntity (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null);

        /// <summary>
        /// Detailed tile entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of TileEntityResponse</returns>
        ApiResponse<TileEntityResponse> GetTileEntityWithHttpInfo (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Execute tile entity methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ExecuteTileEntityMethodResponse</returns>
        System.Threading.Tasks.Task<ExecuteTileEntityMethodResponse> ExecuteTileEntityMethodAsync (string worldUuid, int? x, int? y, int? z, RawRequest request);

        /// <summary>
        /// Execute tile entity methods
        /// </summary>
        /// <remarks>
        /// Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (ExecuteTileEntityMethodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExecuteTileEntityMethodResponse>> ExecuteTileEntityMethodAsyncWithHttpInfo (string worldUuid, int? x, int? y, int? z, RawRequest request);
        /// <summary>
        /// Tile entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>Task of TileEntitiesResponse</returns>
        System.Threading.Tasks.Task<TileEntitiesResponse> GetTileEntitiesAsync (string world = null, string type = null, string limit = null);

        /// <summary>
        /// Tile entities list
        /// </summary>
        /// <remarks>
        /// Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>Task of ApiResponse (TileEntitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TileEntitiesResponse>> GetTileEntitiesAsyncWithHttpInfo (string world = null, string type = null, string limit = null);
        /// <summary>
        /// Detailed tile entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of TileEntityResponse</returns>
        System.Threading.Tasks.Task<TileEntityResponse> GetTileEntityAsync (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null);

        /// <summary>
        /// Detailed tile entity info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (TileEntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TileEntityResponse>> GetTileEntityAsyncWithHttpInfo (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TileEntityApi : ITileEntityApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TileEntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TileEntityApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TileEntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TileEntityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Execute tile entity methods Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ExecuteTileEntityMethodResponse</returns>
        public ExecuteTileEntityMethodResponse ExecuteTileEntityMethod (string worldUuid, int? x, int? y, int? z, RawRequest request)
        {
             ApiResponse<ExecuteTileEntityMethodResponse> localVarResponse = ExecuteTileEntityMethodWithHttpInfo(worldUuid, x, y, z, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute tile entity methods Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>ApiResponse of ExecuteTileEntityMethodResponse</returns>
        public ApiResponse< ExecuteTileEntityMethodResponse > ExecuteTileEntityMethodWithHttpInfo (string worldUuid, int? x, int? y, int? z, RawRequest request)
        {
            // verify the required parameter 'worldUuid' is set
            if (worldUuid == null)
                throw new ApiException(400, "Missing required parameter 'worldUuid' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TileEntityApi->ExecuteTileEntityMethod");

            var localVarPath = "/tile-entity/{worldUuid}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldUuid != null) localVarPathParams.Add("worldUuid", Configuration.ApiClient.ParameterToString(worldUuid)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteTileEntityMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteTileEntityMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteTileEntityMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteTileEntityMethodResponse)));
        }

        /// <summary>
        /// Execute tile entity methods Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ExecuteTileEntityMethodResponse</returns>
        public async System.Threading.Tasks.Task<ExecuteTileEntityMethodResponse> ExecuteTileEntityMethodAsync (string worldUuid, int? x, int? y, int? z, RawRequest request)
        {
             ApiResponse<ExecuteTileEntityMethodResponse> localVarResponse = await ExecuteTileEntityMethodAsyncWithHttpInfo(worldUuid, x, y, z, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute tile entity methods Provides direct access to the underlaying tile entity object and can execute any method on it.  &gt; Required permission: tile-entity.method 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="request">Information about which method to execute.</param>
        /// <returns>Task of ApiResponse (ExecuteTileEntityMethodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExecuteTileEntityMethodResponse>> ExecuteTileEntityMethodAsyncWithHttpInfo (string worldUuid, int? x, int? y, int? z, RawRequest request)
        {
            // verify the required parameter 'worldUuid' is set
            if (worldUuid == null)
                throw new ApiException(400, "Missing required parameter 'worldUuid' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TileEntityApi->ExecuteTileEntityMethod");
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling TileEntityApi->ExecuteTileEntityMethod");

            var localVarPath = "/tile-entity/{worldUuid}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldUuid != null) localVarPathParams.Add("worldUuid", Configuration.ApiClient.ParameterToString(worldUuid)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteTileEntityMethod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExecuteTileEntityMethodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExecuteTileEntityMethodResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExecuteTileEntityMethodResponse)));
        }

        /// <summary>
        /// Tile entities list Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>TileEntitiesResponse</returns>
        public TileEntitiesResponse GetTileEntities (string world = null, string type = null, string limit = null)
        {
             ApiResponse<TileEntitiesResponse> localVarResponse = GetTileEntitiesWithHttpInfo(world, type, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tile entities list Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>ApiResponse of TileEntitiesResponse</returns>
        public ApiResponse< TileEntitiesResponse > GetTileEntitiesWithHttpInfo (string world = null, string type = null, string limit = null)
        {

            var localVarPath = "/tile-entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (world != null) localVarQueryParams.Add("world", Configuration.ApiClient.ParameterToString(world)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTileEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TileEntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TileEntitiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TileEntitiesResponse)));
        }

        /// <summary>
        /// Tile entities list Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>Task of TileEntitiesResponse</returns>
        public async System.Threading.Tasks.Task<TileEntitiesResponse> GetTileEntitiesAsync (string world = null, string type = null, string limit = null)
        {
             ApiResponse<TileEntitiesResponse> localVarResponse = await GetTileEntitiesAsyncWithHttpInfo(world, type, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tile entities list Get a list of all tile entities on the server (in all worlds, unless specified).  &gt; Required permission: tile-entity.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to filter entities by. (optional)</param>
        /// <param name="type">The TileEntityType id to filter the tile entities by. (optional)</param>
        /// <param name="limit">The maximum amount of tile entities to return. (optional)</param>
        /// <returns>Task of ApiResponse (TileEntitiesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TileEntitiesResponse>> GetTileEntitiesAsyncWithHttpInfo (string world = null, string type = null, string limit = null)
        {

            var localVarPath = "/tile-entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (world != null) localVarQueryParams.Add("world", Configuration.ApiClient.ParameterToString(world)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTileEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TileEntitiesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TileEntitiesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TileEntitiesResponse)));
        }

        /// <summary>
        /// Detailed tile entity info Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>TileEntityResponse</returns>
        public TileEntityResponse GetTileEntity (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null)
        {
             ApiResponse<TileEntityResponse> localVarResponse = GetTileEntityWithHttpInfo(worldUuid, x, y, z, fields, methods);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed tile entity info Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>ApiResponse of TileEntityResponse</returns>
        public ApiResponse< TileEntityResponse > GetTileEntityWithHttpInfo (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null)
        {
            // verify the required parameter 'worldUuid' is set
            if (worldUuid == null)
                throw new ApiException(400, "Missing required parameter 'worldUuid' when calling TileEntityApi->GetTileEntity");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling TileEntityApi->GetTileEntity");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling TileEntityApi->GetTileEntity");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TileEntityApi->GetTileEntity");

            var localVarPath = "/tile-entity/{worldUuid}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldUuid != null) localVarPathParams.Add("worldUuid", Configuration.ApiClient.ParameterToString(worldUuid)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTileEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TileEntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TileEntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TileEntityResponse)));
        }

        /// <summary>
        /// Detailed tile entity info Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of TileEntityResponse</returns>
        public async System.Threading.Tasks.Task<TileEntityResponse> GetTileEntityAsync (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null)
        {
             ApiResponse<TileEntityResponse> localVarResponse = await GetTileEntityAsyncWithHttpInfo(worldUuid, x, y, z, fields, methods);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed tile entity info Get detailed information about a tile entity.  &gt; Required permission: tile-entity.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="worldUuid">The uuid of the world the tile entity is in.</param>
        /// <param name="x">The x-coordinate of the tile entity.</param>
        /// <param name="y">The y-coordinate of the tile entity.</param>
        /// <param name="z">The z-coordinate of the tile entity.</param>
        /// <param name="fields">An optional list of additional fields to get. (optional)</param>
        /// <param name="methods">An optional list of additional methods to get. (optional)</param>
        /// <returns>Task of ApiResponse (TileEntityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TileEntityResponse>> GetTileEntityAsyncWithHttpInfo (string worldUuid, int? x, int? y, int? z, string fields = null, string methods = null)
        {
            // verify the required parameter 'worldUuid' is set
            if (worldUuid == null)
                throw new ApiException(400, "Missing required parameter 'worldUuid' when calling TileEntityApi->GetTileEntity");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling TileEntityApi->GetTileEntity");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling TileEntityApi->GetTileEntity");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling TileEntityApi->GetTileEntity");

            var localVarPath = "/tile-entity/{worldUuid}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (worldUuid != null) localVarPathParams.Add("worldUuid", Configuration.ApiClient.ParameterToString(worldUuid)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (methods != null) localVarQueryParams.Add("methods", Configuration.ApiClient.ParameterToString(methods)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTileEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TileEntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TileEntityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TileEntityResponse)));
        }

    }
}
