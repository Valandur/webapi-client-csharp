/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMenuApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add element
        /// </summary>
        /// <remarks>
        /// Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        MegaMenusElement AddElement (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Add element
        /// </summary>
        /// <remarks>
        /// Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        ApiResponse<MegaMenusElement> AddElementWithHttpInfo (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Close renderer
        /// </summary>
        /// <remarks>
        /// Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        MegaMenusRenderer CloseRenderer (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Close renderer
        /// </summary>
        /// <remarks>
        /// Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        ApiResponse<MegaMenusRenderer> CloseRendererWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        MenuMenusMenu CreateMenu (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        ApiResponse<MenuMenusMenu> CreateMenuWithHttpInfo (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        MegaMenusRenderer CreateRenderer (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        ApiResponse<MegaMenusRenderer> CreateRendererWithHttpInfo (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        MegaMenusElement DeleteElement (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        ApiResponse<MegaMenusElement> DeleteElementWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        MenuMenusMenu DeleteMenu (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        ApiResponse<MenuMenusMenu> DeleteMenuWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete a page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        MenuMenusMenu DeletePage (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete a page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        ApiResponse<MenuMenusMenu> DeletePageWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        MegaMenusRenderer DeleteRenderer (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        ApiResponse<MegaMenusRenderer> DeleteRendererWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get the renderer for viewer
        /// </summary>
        /// <remarks>
        /// Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        MegaMenusRenderer FindRenderer (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get the renderer for viewer
        /// </summary>
        /// <remarks>
        /// Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        ApiResponse<MegaMenusRenderer> FindRendererWithHttpInfo (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        MegaMenusElement GetElement (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        ApiResponse<MegaMenusElement> GetElementWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        MenuMenusMenu GetMenu (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        ApiResponse<MenuMenusMenu> GetMenuWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Reads a single page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MegaMenusElement&gt;</returns>
        List<MegaMenusElement> GetPage (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Reads a single page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MegaMenusElement&gt;</returns>
        ApiResponse<List<MegaMenusElement>> GetPageWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get the renderer for this menu
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        MegaMenusRenderer GetRenderer (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get the renderer for this menu
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        ApiResponse<MegaMenusRenderer> GetRendererWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List menus
        /// </summary>
        /// <remarks>
        /// Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MenuMenusMenu&gt;</returns>
        List<MenuMenusMenu> ListMenus (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List menus
        /// </summary>
        /// <remarks>
        /// Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MenuMenusMenu&gt;</returns>
        ApiResponse<List<MenuMenusMenu>> ListMenusWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List renderer
        /// </summary>
        /// <remarks>
        /// Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MegaMenusRenderer&gt;</returns>
        List<MegaMenusRenderer> ListRenderer (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List renderer
        /// </summary>
        /// <remarks>
        /// Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MegaMenusRenderer&gt;</returns>
        ApiResponse<List<MegaMenusRenderer>> ListRendererWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Open renderer
        /// </summary>
        /// <remarks>
        /// Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        MegaMenusRenderer OpenRenderer (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Open renderer
        /// </summary>
        /// <remarks>
        /// Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        ApiResponse<MegaMenusRenderer> OpenRendererWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        MegaMenusElement SetElement (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        ApiResponse<MegaMenusElement> SetElementWithHttpInfo (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        MenuMenusMenu SetMenu (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        ApiResponse<MenuMenusMenu> SetMenuWithHttpInfo (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add element
        /// </summary>
        /// <remarks>
        /// Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        System.Threading.Tasks.Task<MegaMenusElement> AddElementAsync (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Add element
        /// </summary>
        /// <remarks>
        /// Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> AddElementAsyncWithHttpInfo (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Close renderer
        /// </summary>
        /// <remarks>
        /// Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        System.Threading.Tasks.Task<MegaMenusRenderer> CloseRendererAsync (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Close renderer
        /// </summary>
        /// <remarks>
        /// Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> CloseRendererAsyncWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        System.Threading.Tasks.Task<MenuMenusMenu> CreateMenuAsync (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> CreateMenuAsyncWithHttpInfo (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        System.Threading.Tasks.Task<MegaMenusRenderer> CreateRendererAsync (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create menu
        /// </summary>
        /// <remarks>
        /// Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> CreateRendererAsyncWithHttpInfo (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        System.Threading.Tasks.Task<MegaMenusElement> DeleteElementAsync (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> DeleteElementAsyncWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        System.Threading.Tasks.Task<MenuMenusMenu> DeleteMenuAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> DeleteMenuAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete a page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        System.Threading.Tasks.Task<MenuMenusMenu> DeletePageAsync (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete a page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> DeletePageAsyncWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        System.Threading.Tasks.Task<MegaMenusRenderer> DeleteRendererAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete menu
        /// </summary>
        /// <remarks>
        /// Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> DeleteRendererAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get the renderer for viewer
        /// </summary>
        /// <remarks>
        /// Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        System.Threading.Tasks.Task<MegaMenusRenderer> FindRendererAsync (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get the renderer for viewer
        /// </summary>
        /// <remarks>
        /// Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> FindRendererAsyncWithHttpInfo (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        System.Threading.Tasks.Task<MegaMenusElement> GetElementAsync (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> GetElementAsyncWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        System.Threading.Tasks.Task<MenuMenusMenu> GetMenuAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get menu
        /// </summary>
        /// <remarks>
        /// Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> GetMenuAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Reads a single page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MegaMenusElement&gt;</returns>
        System.Threading.Tasks.Task<List<MegaMenusElement>> GetPageAsync (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Reads a single page of elements
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MegaMenusElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MegaMenusElement>>> GetPageAsyncWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get the renderer for this menu
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        System.Threading.Tasks.Task<MegaMenusRenderer> GetRendererAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get the renderer for this menu
        /// </summary>
        /// <remarks>
        ///      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> GetRendererAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List menus
        /// </summary>
        /// <remarks>
        /// Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MenuMenusMenu&gt;</returns>
        System.Threading.Tasks.Task<List<MenuMenusMenu>> ListMenusAsync (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List menus
        /// </summary>
        /// <remarks>
        /// Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MenuMenusMenu&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MenuMenusMenu>>> ListMenusAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List renderer
        /// </summary>
        /// <remarks>
        /// Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MegaMenusRenderer&gt;</returns>
        System.Threading.Tasks.Task<List<MegaMenusRenderer>> ListRendererAsync (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List renderer
        /// </summary>
        /// <remarks>
        /// Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MegaMenusRenderer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MegaMenusRenderer>>> ListRendererAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Open renderer
        /// </summary>
        /// <remarks>
        /// Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        System.Threading.Tasks.Task<MegaMenusRenderer> OpenRendererAsync (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Open renderer
        /// </summary>
        /// <remarks>
        /// Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> OpenRendererAsyncWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        System.Threading.Tasks.Task<MegaMenusElement> SetElementAsync (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> SetElementAsyncWithHttpInfo (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        System.Threading.Tasks.Task<MenuMenusMenu> SetMenuAsync (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Update menu
        /// </summary>
        /// <remarks>
        /// This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> SetMenuAsyncWithHttpInfo (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MenuApi : IMenuApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MenuApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MenuApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MenuApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add element Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        public MegaMenusElement AddElement (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = AddElementWithHttpInfo(mid, page, y, x, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add element Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        public ApiResponse< MegaMenusElement > AddElementWithHttpInfo (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->AddElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->AddElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->AddElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->AddElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Add element Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        public async System.Threading.Tasks.Task<MegaMenusElement> AddElementAsync (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = await AddElementAsyncWithHttpInfo(mid, page, y, x, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add element Adds an element to the menu     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="y"></param>
        /// <param name="x"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> AddElementAsyncWithHttpInfo (Guid? mid, int? page, int? y, int? x, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->AddElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->AddElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->AddElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->AddElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Close renderer Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        public MegaMenusRenderer CloseRenderer (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = CloseRendererWithHttpInfo(mid, viewer, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Close renderer Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        public ApiResponse< MegaMenusRenderer > CloseRendererWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->CloseRenderer");
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling MenuApi->CloseRenderer");

            var localVarPath = "/megamenus/render/{mid}/{viewer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (viewer != null) localVarPathParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Close renderer Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        public async System.Threading.Tasks.Task<MegaMenusRenderer> CloseRendererAsync (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = await CloseRendererAsyncWithHttpInfo(mid, viewer, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Close renderer Close the renderer for this viewer     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> CloseRendererAsyncWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->CloseRenderer");
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling MenuApi->CloseRenderer");

            var localVarPath = "/megamenus/render/{mid}/{viewer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (viewer != null) localVarPathParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        public MenuMenusMenu CreateMenu (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = CreateMenuWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        public ApiResponse< MenuMenusMenu > CreateMenuWithHttpInfo (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/megamenus/menu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        public async System.Threading.Tasks.Task<MenuMenusMenu> CreateMenuAsync (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = await CreateMenuAsyncWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.menu.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> CreateMenuAsyncWithHttpInfo (MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/megamenus/menu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        public MegaMenusRenderer CreateRenderer (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = CreateRendererWithHttpInfo(mid, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        public ApiResponse< MegaMenusRenderer > CreateRendererWithHttpInfo (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->CreateRenderer");

            var localVarPath = "/megamenus/render/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        public async System.Threading.Tasks.Task<MegaMenusRenderer> CreateRendererAsync (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = await CreateRendererAsyncWithHttpInfo(mid, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create menu Creates a new menu     **Required permissions:**    - **megamenus.megamenus.renderer.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> CreateRendererAsyncWithHttpInfo (Guid? mid, MegaMenusRenderer body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->CreateRenderer");

            var localVarPath = "/megamenus/render/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Delete menu Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        public MegaMenusElement DeleteElement (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = DeleteElementWithHttpInfo(mid, page, x, y, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete menu Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        public ApiResponse< MegaMenusElement > DeleteElementWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeleteElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->DeleteElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->DeleteElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->DeleteElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Delete menu Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        public async System.Threading.Tasks.Task<MegaMenusElement> DeleteElementAsync (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = await DeleteElementAsyncWithHttpInfo(mid, page, x, y, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete menu Deletes a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> DeleteElementAsyncWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeleteElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->DeleteElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->DeleteElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->DeleteElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Delete menu Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        public MenuMenusMenu DeleteMenu (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = DeleteMenuWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete menu Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        public ApiResponse< MenuMenusMenu > DeleteMenuWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeleteMenu");

            var localVarPath = "/megamenus/menu/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Delete menu Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        public async System.Threading.Tasks.Task<MenuMenusMenu> DeleteMenuAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = await DeleteMenuAsyncWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete menu Deletes a menu     **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> DeleteMenuAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeleteMenu");

            var localVarPath = "/megamenus/menu/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Delete a page of elements      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        public MenuMenusMenu DeletePage (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = DeletePageWithHttpInfo(mid, page, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a page of elements      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        public ApiResponse< MenuMenusMenu > DeletePageWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeletePage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->DeletePage");

            var localVarPath = "/megamenus/menu/{mid}/{page}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Delete a page of elements      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        public async System.Threading.Tasks.Task<MenuMenusMenu> DeletePageAsync (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = await DeletePageAsyncWithHttpInfo(mid, page, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a page of elements      **Required permissions:**    - **megamenus.megamenus.menu.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> DeletePageAsyncWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeletePage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->DeletePage");

            var localVarPath = "/megamenus/menu/{mid}/{page}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Delete menu Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        public MegaMenusRenderer DeleteRenderer (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = DeleteRendererWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete menu Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        public ApiResponse< MegaMenusRenderer > DeleteRendererWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeleteRenderer");

            var localVarPath = "/megamenus/renderer/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Delete menu Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        public async System.Threading.Tasks.Task<MegaMenusRenderer> DeleteRendererAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = await DeleteRendererAsyncWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete menu Closes this renderer for all currently active viewers     **Required permissions:**    - **megamenus.megamenus.renderer.close**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> DeleteRendererAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->DeleteRenderer");

            var localVarPath = "/megamenus/renderer/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Get the renderer for viewer Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        public MegaMenusRenderer FindRenderer (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = FindRendererWithHttpInfo(viewer, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the renderer for viewer Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        public ApiResponse< MegaMenusRenderer > FindRendererWithHttpInfo (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling MenuApi->FindRenderer");

            var localVarPath = "/megamenus/render/find/{viewer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewer != null) localVarPathParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Get the renderer for viewer Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        public async System.Threading.Tasks.Task<MegaMenusRenderer> FindRendererAsync (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = await FindRendererAsyncWithHttpInfo(viewer, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the renderer for viewer Returns the renderer the viewer is currently subject to     **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> FindRendererAsyncWithHttpInfo (Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling MenuApi->FindRenderer");

            var localVarPath = "/megamenus/render/find/{viewer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewer != null) localVarPathParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        public MegaMenusElement GetElement (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = GetElementWithHttpInfo(mid, page, x, y, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        public ApiResponse< MegaMenusElement > GetElementWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->GetElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->GetElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->GetElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        public async System.Threading.Tasks.Task<MegaMenusElement> GetElementAsync (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = await GetElementAsyncWithHttpInfo(mid, page, x, y, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> GetElementAsyncWithHttpInfo (Guid? mid, int? page, int? x, int? y, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->GetElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->GetElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->GetElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        public MenuMenusMenu GetMenu (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = GetMenuWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        public ApiResponse< MenuMenusMenu > GetMenuWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetMenu");

            var localVarPath = "/megamenus/menu/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        public async System.Threading.Tasks.Task<MenuMenusMenu> GetMenuAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = await GetMenuAsyncWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get menu Read a menu with all elements     **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> GetMenuAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetMenu");

            var localVarPath = "/megamenus/menu/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Reads a single page of elements      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MegaMenusElement&gt;</returns>
        public List<MegaMenusElement> GetPage (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MegaMenusElement>> localVarResponse = GetPageWithHttpInfo(mid, page, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reads a single page of elements      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MegaMenusElement&gt;</returns>
        public ApiResponse< List<MegaMenusElement> > GetPageWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetPage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->GetPage");

            var localVarPath = "/megamenus/menu/{mid}/{page}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MegaMenusElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MegaMenusElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MegaMenusElement>)));
        }

        /// <summary>
        /// Reads a single page of elements      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MegaMenusElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<MegaMenusElement>> GetPageAsync (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MegaMenusElement>> localVarResponse = await GetPageAsyncWithHttpInfo(mid, page, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reads a single page of elements      **Required permissions:**    - **megamenus.megamenus.menu.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MegaMenusElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MegaMenusElement>>> GetPageAsyncWithHttpInfo (Guid? mid, int? page, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetPage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->GetPage");

            var localVarPath = "/megamenus/menu/{mid}/{page}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MegaMenusElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MegaMenusElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MegaMenusElement>)));
        }

        /// <summary>
        /// Get the renderer for this menu      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        public MegaMenusRenderer GetRenderer (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = GetRendererWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the renderer for this menu      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        public ApiResponse< MegaMenusRenderer > GetRendererWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetRenderer");

            var localVarPath = "/megamenus/render/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Get the renderer for this menu      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        public async System.Threading.Tasks.Task<MegaMenusRenderer> GetRendererAsync (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = await GetRendererAsyncWithHttpInfo(mid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the renderer for this menu      **Required permissions:**    - **megamenus.megamenus.renderer.get**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> GetRendererAsyncWithHttpInfo (Guid? mid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->GetRenderer");

            var localVarPath = "/megamenus/render/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// List menus Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MenuMenusMenu&gt;</returns>
        public List<MenuMenusMenu> ListMenus (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MenuMenusMenu>> localVarResponse = ListMenusWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List menus Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MenuMenusMenu&gt;</returns>
        public ApiResponse< List<MenuMenusMenu> > ListMenusWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/megamenus/menu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMenus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MenuMenusMenu>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MenuMenusMenu>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MenuMenusMenu>)));
        }

        /// <summary>
        /// List menus Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MenuMenusMenu&gt;</returns>
        public async System.Threading.Tasks.Task<List<MenuMenusMenu>> ListMenusAsync (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MenuMenusMenu>> localVarResponse = await ListMenusAsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List menus Returns a list of all menus     **Required permissions:**    - **megamenus.megamenus.menu.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MenuMenusMenu&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MenuMenusMenu>>> ListMenusAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/megamenus/menu";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMenus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MenuMenusMenu>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MenuMenusMenu>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MenuMenusMenu>)));
        }

        /// <summary>
        /// List renderer Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MegaMenusRenderer&gt;</returns>
        public List<MegaMenusRenderer> ListRenderer (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MegaMenusRenderer>> localVarResponse = ListRendererWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List renderer Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MegaMenusRenderer&gt;</returns>
        public ApiResponse< List<MegaMenusRenderer> > ListRendererWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/megamenus/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MegaMenusRenderer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MegaMenusRenderer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MegaMenusRenderer>)));
        }

        /// <summary>
        /// List renderer Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MegaMenusRenderer&gt;</returns>
        public async System.Threading.Tasks.Task<List<MegaMenusRenderer>> ListRendererAsync (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MegaMenusRenderer>> localVarResponse = await ListRendererAsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List renderer Returns a list of all renderer for menus created with WebAPI     **Required permissions:**    - **megamenus.megamenus.renderer.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MegaMenusRenderer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MegaMenusRenderer>>> ListRendererAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/megamenus/render";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MegaMenusRenderer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MegaMenusRenderer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MegaMenusRenderer>)));
        }

        /// <summary>
        /// Open renderer Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusRenderer</returns>
        public MegaMenusRenderer OpenRenderer (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = OpenRendererWithHttpInfo(mid, viewer, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Open renderer Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusRenderer</returns>
        public ApiResponse< MegaMenusRenderer > OpenRendererWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->OpenRenderer");
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling MenuApi->OpenRenderer");

            var localVarPath = "/megamenus/render/{mid}/{viewer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (viewer != null) localVarPathParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Open renderer Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusRenderer</returns>
        public async System.Threading.Tasks.Task<MegaMenusRenderer> OpenRendererAsync (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusRenderer> localVarResponse = await OpenRendererAsyncWithHttpInfo(mid, viewer, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Open renderer Opens the renderer to viewer, effectively opening the menu     **Required permissions:**    - **megamenus.megamenus.renderer.open**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="viewer"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusRenderer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusRenderer>> OpenRendererAsyncWithHttpInfo (Guid? mid, Guid? viewer, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->OpenRenderer");
            // verify the required parameter 'viewer' is set
            if (viewer == null)
                throw new ApiException(400, "Missing required parameter 'viewer' when calling MenuApi->OpenRenderer");

            var localVarPath = "/megamenus/render/{mid}/{viewer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (viewer != null) localVarPathParams.Add("viewer", this.Configuration.ApiClient.ParameterToString(viewer)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenRenderer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusRenderer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusRenderer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusRenderer)));
        }

        /// <summary>
        /// Update menu Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MegaMenusElement</returns>
        public MegaMenusElement SetElement (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = SetElementWithHttpInfo(mid, page, x, y, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update menu Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MegaMenusElement</returns>
        public ApiResponse< MegaMenusElement > SetElementWithHttpInfo (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->SetElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->SetElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->SetElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->SetElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Update menu Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MegaMenusElement</returns>
        public async System.Threading.Tasks.Task<MegaMenusElement> SetElementAsync (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MegaMenusElement> localVarResponse = await SetElementAsyncWithHttpInfo(mid, page, x, y, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update menu Update a menu element     **Required permissions:**    - **megamenus.megamenus.menu.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="page"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MegaMenusElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MegaMenusElement>> SetElementAsyncWithHttpInfo (Guid? mid, int? page, int? x, int? y, MegaMenusElement body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->SetElement");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MenuApi->SetElement");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling MenuApi->SetElement");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling MenuApi->SetElement");

            var localVarPath = "/megamenus/menu/{mid}/{page}/{y}/{x}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MegaMenusElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MegaMenusElement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MegaMenusElement)));
        }

        /// <summary>
        /// Update menu This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MenuMenusMenu</returns>
        public MenuMenusMenu SetMenu (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = SetMenuWithHttpInfo(mid, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update menu This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MenuMenusMenu</returns>
        public ApiResponse< MenuMenusMenu > SetMenuWithHttpInfo (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->SetMenu");

            var localVarPath = "/megamenus/menu/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

        /// <summary>
        /// Update menu This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MenuMenusMenu</returns>
        public async System.Threading.Tasks.Task<MenuMenusMenu> SetMenuAsync (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MenuMenusMenu> localVarResponse = await SetMenuAsyncWithHttpInfo(mid, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update menu This will only update the title, elements have to be addressed through the respective endpoints     **Required permissions:**    - **megamenus.megamenus.menu.update**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mid"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MenuMenusMenu)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MenuMenusMenu>> SetMenuAsyncWithHttpInfo (Guid? mid, MenuMenusMenu body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'mid' is set
            if (mid == null)
                throw new ApiException(400, "Missing required parameter 'mid' when calling MenuApi->SetMenu");

            var localVarPath = "/megamenus/menu/{mid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mid != null) localVarPathParams.Add("mid", this.Configuration.ApiClient.ParameterToString(mid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetMenu", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MenuMenusMenu>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MenuMenusMenu) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MenuMenusMenu)));
        }

    }
}
