/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Detailed message info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.  &gt; Required permission: message.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns></returns>
        void GetMessage (string uuid);

        /// <summary>
        /// Detailed message info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.  &gt; Required permission: message.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetMessageWithHttpInfo (string uuid);
        /// <summary>
        /// Message list
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>MessagesResponse</returns>
        MessagesResponse GetMessages (string details = null);

        /// <summary>
        /// Message list
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>ApiResponse of MessagesResponse</returns>
        ApiResponse<MessagesResponse> GetMessagesWithHttpInfo (string details = null);
        /// <summary>
        /// Send an interactive message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>MessageResponse</returns>
        MessageResponse SendMessage (MessageRequest request);

        /// <summary>
        /// Send an interactive message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>ApiResponse of MessageResponse</returns>
        ApiResponse<MessageResponse> SendMessageWithHttpInfo (MessageRequest request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Detailed message info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.  &gt; Required permission: message.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetMessageAsync (string uuid);

        /// <summary>
        /// Detailed message info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.  &gt; Required permission: message.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetMessageAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Message list
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>Task of MessagesResponse</returns>
        System.Threading.Tasks.Task<MessagesResponse> GetMessagesAsync (string details = null);

        /// <summary>
        /// Message list
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>Task of ApiResponse (MessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesResponse>> GetMessagesAsyncWithHttpInfo (string details = null);
        /// <summary>
        /// Send an interactive message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>Task of MessageResponse</returns>
        System.Threading.Tasks.Task<MessageResponse> SendMessageAsync (MessageRequest request);

        /// <summary>
        /// Send an interactive message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageResponse>> SendMessageAsyncWithHttpInfo (MessageRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessageApi : IMessageApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MessageApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MessageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Detailed message info Get detailed information about a message.  &gt; Required permission: message.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns></returns>
        public void GetMessage (string uuid)
        {
             GetMessageWithHttpInfo(uuid);
        }

        /// <summary>
        /// Detailed message info Get detailed information about a message.  &gt; Required permission: message.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetMessageWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling MessageApi->GetMessage");

            var localVarPath = "/message/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detailed message info Get detailed information about a message.  &gt; Required permission: message.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetMessageAsync (string uuid)
        {
             await GetMessageAsyncWithHttpInfo(uuid);

        }

        /// <summary>
        /// Detailed message info Get detailed information about a message.  &gt; Required permission: message.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the message to get detailed information about.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetMessageAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling MessageApi->GetMessage");

            var localVarPath = "/message/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Message list Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>MessagesResponse</returns>
        public MessagesResponse GetMessages (string details = null)
        {
             ApiResponse<MessagesResponse> localVarResponse = GetMessagesWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Message list Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>ApiResponse of MessagesResponse</returns>
        public ApiResponse< MessagesResponse > GetMessagesWithHttpInfo (string details = null)
        {

            var localVarPath = "/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesResponse)));
        }

        /// <summary>
        /// Message list Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>Task of MessagesResponse</returns>
        public async System.Threading.Tasks.Task<MessagesResponse> GetMessagesAsync (string details = null)
        {
             ApiResponse<MessagesResponse> localVarResponse = await GetMessagesAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Message list Get a list of all the messages that were sent through the message endpoint since the server started.  &gt; Required permission: message.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each message. (optional)</param>
        /// <returns>Task of ApiResponse (MessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesResponse>> GetMessagesAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesResponse)));
        }

        /// <summary>
        /// Send an interactive message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>MessageResponse</returns>
        public MessageResponse SendMessage (MessageRequest request)
        {
             ApiResponse<MessageResponse> localVarResponse = SendMessageWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an interactive message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>ApiResponse of MessageResponse</returns>
        public ApiResponse< MessageResponse > SendMessageWithHttpInfo (MessageRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MessageApi->SendMessage");

            var localVarPath = "/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageResponse)));
        }

        /// <summary>
        /// Send an interactive message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>Task of MessageResponse</returns>
        public async System.Threading.Tasks.Task<MessageResponse> SendMessageAsync (MessageRequest request)
        {
             ApiResponse<MessageResponse> localVarResponse = await SendMessageAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an interactive message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.  &gt; Required permission: message.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Details of the message sent to the player</param>
        /// <returns>Task of ApiResponse (MessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageResponse>> SendMessageAsyncWithHttpInfo (MessageRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling MessageApi->SendMessage");

            var localVarPath = "/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageResponse)));
        }

    }
}
