/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>BlockOperationResponse</returns>
        BlockOperationResponse CancelBlockOperation (string uuid);

        /// <summary>
        /// Cancel block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        ApiResponse<BlockOperationResponse> CancelBlockOperationWithHttpInfo (string uuid);
        /// <summary>
        /// Modify block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>BlockOperationResponse</returns>
        BlockOperationResponse ChangeBlockOperation (string uuid, Data data);

        /// <summary>
        /// Modify block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        ApiResponse<BlockOperationResponse> ChangeBlockOperationWithHttpInfo (string uuid, Data data);
        /// <summary>
        /// Get one block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>SingleBlock</returns>
        SingleBlock GetBlock (string world, int? x, int? y, int? z);

        /// <summary>
        /// Get one block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>ApiResponse of SingleBlock</returns>
        ApiResponse<SingleBlock> GetBlockWithHttpInfo (string world, int? x, int? y, int? z);
        /// <summary>
        /// Block operation details
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>BlockOperationResponse</returns>
        BlockOperationResponse GetBlockOperation (string uuid);

        /// <summary>
        /// Block operation details
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        ApiResponse<BlockOperationResponse> GetBlockOperationWithHttpInfo (string uuid);
        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockOperationsList</returns>
        BlockOperationsList GetBlockOperations ();

        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockOperationsList</returns>
        ApiResponse<BlockOperationsList> GetBlockOperationsWithHttpInfo ();
        /// <summary>
        /// Create block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>BlockOperationResponse</returns>
        BlockOperationResponse StartBlockOperation (List<BlockOperationNew> request);

        /// <summary>
        /// Create block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        ApiResponse<BlockOperationResponse> StartBlockOperationWithHttpInfo (List<BlockOperationNew> request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of BlockOperationResponse</returns>
        System.Threading.Tasks.Task<BlockOperationResponse> CancelBlockOperationAsync (string uuid);

        /// <summary>
        /// Cancel block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> CancelBlockOperationAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// Modify block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>Task of BlockOperationResponse</returns>
        System.Threading.Tasks.Task<BlockOperationResponse> ChangeBlockOperationAsync (string uuid, Data data);

        /// <summary>
        /// Modify block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> ChangeBlockOperationAsyncWithHttpInfo (string uuid, Data data);
        /// <summary>
        /// Get one block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>Task of SingleBlock</returns>
        System.Threading.Tasks.Task<SingleBlock> GetBlockAsync (string world, int? x, int? y, int? z);

        /// <summary>
        /// Get one block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>Task of ApiResponse (SingleBlock)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingleBlock>> GetBlockAsyncWithHttpInfo (string world, int? x, int? y, int? z);
        /// <summary>
        /// Block operation details
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of BlockOperationResponse</returns>
        System.Threading.Tasks.Task<BlockOperationResponse> GetBlockOperationAsync (string uuid);

        /// <summary>
        /// Block operation details
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> GetBlockOperationAsyncWithHttpInfo (string uuid);
        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockOperationsList</returns>
        System.Threading.Tasks.Task<BlockOperationsList> GetBlockOperationsAsync ();

        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockOperationsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperationsList>> GetBlockOperationsAsyncWithHttpInfo ();
        /// <summary>
        /// Create block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>Task of BlockOperationResponse</returns>
        System.Threading.Tasks.Task<BlockOperationResponse> StartBlockOperationAsync (List<BlockOperationNew> request);

        /// <summary>
        /// Create block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> StartBlockOperationAsyncWithHttpInfo (List<BlockOperationNew> request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlockApi : IBlockApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlockApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlockApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>BlockOperationResponse</returns>
        public BlockOperationResponse CancelBlockOperation (string uuid)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = CancelBlockOperationWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        public ApiResponse< BlockOperationResponse > CancelBlockOperationWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->CancelBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// Cancel block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of BlockOperationResponse</returns>
        public async System.Threading.Tasks.Task<BlockOperationResponse> CancelBlockOperationAsync (string uuid)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = await CancelBlockOperationAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**  &gt; Required permission: block.op.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> CancelBlockOperationAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->CancelBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// Modify block operation Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>BlockOperationResponse</returns>
        public BlockOperationResponse ChangeBlockOperation (string uuid, Data data)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = ChangeBlockOperationWithHttpInfo(uuid, data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify block operation Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        public ApiResponse< BlockOperationResponse > ChangeBlockOperationWithHttpInfo (string uuid, Data data)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->ChangeBlockOperation");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling BlockApi->ChangeBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// Modify block operation Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>Task of BlockOperationResponse</returns>
        public async System.Threading.Tasks.Task<BlockOperationResponse> ChangeBlockOperationAsync (string uuid, Data data)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = await ChangeBlockOperationAsyncWithHttpInfo(uuid, data);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify block operation Modify an existing block operation to either pause or continue it.  &gt; Required permission: block.op.change 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <param name="data">The new data applied to the block operation.</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> ChangeBlockOperationAsyncWithHttpInfo (string uuid, Data data)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->ChangeBlockOperation");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling BlockApi->ChangeBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// Get one block Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>SingleBlock</returns>
        public SingleBlock GetBlock (string world, int? x, int? y, int? z)
        {
             ApiResponse<SingleBlock> localVarResponse = GetBlockWithHttpInfo(world, x, y, z);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get one block Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>ApiResponse of SingleBlock</returns>
        public ApiResponse< SingleBlock > GetBlockWithHttpInfo (string world, int? x, int? y, int? z)
        {
            // verify the required parameter 'world' is set
            if (world == null)
                throw new ApiException(400, "Missing required parameter 'world' when calling BlockApi->GetBlock");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling BlockApi->GetBlock");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling BlockApi->GetBlock");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling BlockApi->GetBlock");

            var localVarPath = "/block/{world}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (world != null) localVarPathParams.Add("world", Configuration.ApiClient.ParameterToString(world)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleBlock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleBlock) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleBlock)));
        }

        /// <summary>
        /// Get one block Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>Task of SingleBlock</returns>
        public async System.Threading.Tasks.Task<SingleBlock> GetBlockAsync (string world, int? x, int? y, int? z)
        {
             ApiResponse<SingleBlock> localVarResponse = await GetBlockAsyncWithHttpInfo(world, x, y, z);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get one block Gets information about one block in the world.  &gt; Required permission: block.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world the block is in.</param>
        /// <param name="x">The x-coordinate of the block.</param>
        /// <param name="y">The y-coordinate of the block.</param>
        /// <param name="z">The z-coordinate of the block.</param>
        /// <returns>Task of ApiResponse (SingleBlock)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SingleBlock>> GetBlockAsyncWithHttpInfo (string world, int? x, int? y, int? z)
        {
            // verify the required parameter 'world' is set
            if (world == null)
                throw new ApiException(400, "Missing required parameter 'world' when calling BlockApi->GetBlock");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling BlockApi->GetBlock");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling BlockApi->GetBlock");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling BlockApi->GetBlock");

            var localVarPath = "/block/{world}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (world != null) localVarPathParams.Add("world", Configuration.ApiClient.ParameterToString(world)); // path parameter
            if (x != null) localVarPathParams.Add("x", Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", Configuration.ApiClient.ParameterToString(z)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SingleBlock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SingleBlock) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SingleBlock)));
        }

        /// <summary>
        /// Block operation details Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>BlockOperationResponse</returns>
        public BlockOperationResponse GetBlockOperation (string uuid)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = GetBlockOperationWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Block operation details Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        public ApiResponse< BlockOperationResponse > GetBlockOperationWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->GetBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// Block operation details Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of BlockOperationResponse</returns>
        public async System.Threading.Tasks.Task<BlockOperationResponse> GetBlockOperationAsync (string uuid)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = await GetBlockOperationAsyncWithHttpInfo(uuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Block operation details Gets details about a specific block operation  &gt; Required permission: block.op.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation.</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> GetBlockOperationAsyncWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->GetBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockOperationsList</returns>
        public BlockOperationsList GetBlockOperations ()
        {
             ApiResponse<BlockOperationsList> localVarResponse = GetBlockOperationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockOperationsList</returns>
        public ApiResponse< BlockOperationsList > GetBlockOperationsWithHttpInfo ()
        {

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockOperations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationsList)));
        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockOperationsList</returns>
        public async System.Threading.Tasks.Task<BlockOperationsList> GetBlockOperationsAsync ()
        {
             ApiResponse<BlockOperationsList> localVarResponse = await GetBlockOperationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.  &gt; Required permission: block.op.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockOperationsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperationsList>> GetBlockOperationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockOperations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationsList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationsList)));
        }

        /// <summary>
        /// Create block operation Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>BlockOperationResponse</returns>
        public BlockOperationResponse StartBlockOperation (List<BlockOperationNew> request)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = StartBlockOperationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create block operation Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>ApiResponse of BlockOperationResponse</returns>
        public ApiResponse< BlockOperationResponse > StartBlockOperationWithHttpInfo (List<BlockOperationNew> request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BlockApi->StartBlockOperation");

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

        /// <summary>
        /// Create block operation Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>Task of BlockOperationResponse</returns>
        public async System.Threading.Tasks.Task<BlockOperationResponse> StartBlockOperationAsync (List<BlockOperationNew> request)
        {
             ApiResponse<BlockOperationResponse> localVarResponse = await StartBlockOperationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create block operation Start a request to get or change blocks on the server.  &gt; Required permission: block.op.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The requested changes to blocks</param>
        /// <returns>Task of ApiResponse (BlockOperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperationResponse>> StartBlockOperationAsyncWithHttpInfo (List<BlockOperationNew> request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BlockApi->StartBlockOperation");

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperationResponse)));
        }

    }
}
