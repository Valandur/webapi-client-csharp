/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlockApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        BlockOperation CreateBlockOperation (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create a block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        ApiResponse<BlockOperation> CreateBlockOperationWithHttpInfo (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Stop a block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        BlockOperation DeleteBlockOperation (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Stop a block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        ApiResponse<BlockOperation> DeleteBlockOperationWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockState</returns>
        BlockState GetBlock (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockState</returns>
        ApiResponse<BlockState> GetBlockWithHttpInfo (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a block operation
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        BlockOperation GetBlockOperation (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a block operation
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        ApiResponse<BlockOperation> GetBlockOperationWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;BlockOperation&gt;</returns>
        List<BlockOperation> ListBlockOperations (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockOperation&gt;</returns>
        ApiResponse<List<BlockOperation>> ListBlockOperationsWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Modify a block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        BlockOperation ModifyBlockOperation (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Modify a block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        ApiResponse<BlockOperation> ModifyBlockOperationWithHttpInfo (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        System.Threading.Tasks.Task<BlockOperation> CreateBlockOperationAsync (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create a block operation
        /// </summary>
        /// <remarks>
        /// Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperation>> CreateBlockOperationAsyncWithHttpInfo (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Stop a block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        System.Threading.Tasks.Task<BlockOperation> DeleteBlockOperationAsync (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Stop a block operation
        /// </summary>
        /// <remarks>
        /// Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperation>> DeleteBlockOperationAsyncWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockState</returns>
        System.Threading.Tasks.Task<BlockState> GetBlockAsync (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a block
        /// </summary>
        /// <remarks>
        /// Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockState)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockState>> GetBlockAsyncWithHttpInfo (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a block operation
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        System.Threading.Tasks.Task<BlockOperation> GetBlockOperationAsync (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a block operation
        /// </summary>
        /// <remarks>
        /// Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperation>> GetBlockOperationAsyncWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;BlockOperation&gt;</returns>
        System.Threading.Tasks.Task<List<BlockOperation>> ListBlockOperationsAsync (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List block operations
        /// </summary>
        /// <remarks>
        /// Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BlockOperation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockOperation>>> ListBlockOperationsAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Modify a block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        System.Threading.Tasks.Task<BlockOperation> ModifyBlockOperationAsync (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Modify a block operation
        /// </summary>
        /// <remarks>
        /// Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockOperation>> ModifyBlockOperationAsyncWithHttpInfo (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlockApi : IBlockApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlockApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlockApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a block operation Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        public BlockOperation CreateBlockOperation (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = CreateBlockOperationWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a block operation Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        public ApiResponse< BlockOperation > CreateBlockOperationWithHttpInfo (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// Create a block operation Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        public async System.Threading.Tasks.Task<BlockOperation> CreateBlockOperationAsync (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = await CreateBlockOperationAsyncWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a block operation Start a request to get or change blocks on the server.     **Required permissions:**    - **block.op.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperation>> CreateBlockOperationAsyncWithHttpInfo (CreateBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// Stop a block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        public BlockOperation DeleteBlockOperation (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = DeleteBlockOperationWithHttpInfo(uuid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        public ApiResponse< BlockOperation > DeleteBlockOperationWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->DeleteBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// Stop a block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        public async System.Threading.Tasks.Task<BlockOperation> DeleteBlockOperationAsync (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = await DeleteBlockOperationAsyncWithHttpInfo(uuid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop a block operation Cancel a pending or running block operation. **THIS DOES NOT UNDO THE BLOCK CHANGES**     **Required permissions:**    - **block.op.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperation>> DeleteBlockOperationAsyncWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->DeleteBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// Get a block Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockState</returns>
        public BlockState GetBlock (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockState> localVarResponse = GetBlockWithHttpInfo(world, x, y, z, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a block Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockState</returns>
        public ApiResponse< BlockState > GetBlockWithHttpInfo (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'world' is set
            if (world == null)
                throw new ApiException(400, "Missing required parameter 'world' when calling BlockApi->GetBlock");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling BlockApi->GetBlock");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling BlockApi->GetBlock");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling BlockApi->GetBlock");

            var localVarPath = "/block/{world}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (world != null) localVarPathParams.Add("world", this.Configuration.ApiClient.ParameterToString(world)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockState)));
        }

        /// <summary>
        /// Get a block Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockState</returns>
        public async System.Threading.Tasks.Task<BlockState> GetBlockAsync (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockState> localVarResponse = await GetBlockAsyncWithHttpInfo(world, x, y, z, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a block Gets information about one block in the world.     **Required permissions:**    - **block.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="world">The uuid of the world to get the block from</param>
        /// <param name="x">The x-coordinate of the block</param>
        /// <param name="y">The y-coordinate of the block</param>
        /// <param name="z">The z-coordinate of the block</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockState)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockState>> GetBlockAsyncWithHttpInfo (string world, int? x, int? y, int? z, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'world' is set
            if (world == null)
                throw new ApiException(400, "Missing required parameter 'world' when calling BlockApi->GetBlock");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling BlockApi->GetBlock");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling BlockApi->GetBlock");
            // verify the required parameter 'z' is set
            if (z == null)
                throw new ApiException(400, "Missing required parameter 'z' when calling BlockApi->GetBlock");

            var localVarPath = "/block/{world}/{x}/{y}/{z}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (world != null) localVarPathParams.Add("world", this.Configuration.ApiClient.ParameterToString(world)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (z != null) localVarPathParams.Add("z", this.Configuration.ApiClient.ParameterToString(z)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlock", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockState>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockState) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockState)));
        }

        /// <summary>
        /// Get a block operation Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        public BlockOperation GetBlockOperation (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = GetBlockOperationWithHttpInfo(uuid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a block operation Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        public ApiResponse< BlockOperation > GetBlockOperationWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->GetBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// Get a block operation Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        public async System.Threading.Tasks.Task<BlockOperation> GetBlockOperationAsync (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = await GetBlockOperationAsyncWithHttpInfo(uuid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a block operation Gets details about a specific block operation     **Required permissions:**    - **block.op.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperation>> GetBlockOperationAsyncWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->GetBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;BlockOperation&gt;</returns>
        public List<BlockOperation> ListBlockOperations (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<BlockOperation>> localVarResponse = ListBlockOperationsWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockOperation&gt;</returns>
        public ApiResponse< List<BlockOperation> > ListBlockOperationsWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlockOperations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlockOperation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BlockOperation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlockOperation>)));
        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;BlockOperation&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockOperation>> ListBlockOperationsAsync (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<BlockOperation>> localVarResponse = await ListBlockOperationsAsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List block operations Returns a list of all the currently running block operations.     **Required permissions:**    - **block.op.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BlockOperation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BlockOperation>>> ListBlockOperationsAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/block/op";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBlockOperations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlockOperation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BlockOperation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlockOperation>)));
        }

        /// <summary>
        /// Modify a block operation Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>BlockOperation</returns>
        public BlockOperation ModifyBlockOperation (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = ModifyBlockOperationWithHttpInfo(uuid, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a block operation Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of BlockOperation</returns>
        public ApiResponse< BlockOperation > ModifyBlockOperationWithHttpInfo (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->ModifyBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

        /// <summary>
        /// Modify a block operation Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of BlockOperation</returns>
        public async System.Threading.Tasks.Task<BlockOperation> ModifyBlockOperationAsync (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<BlockOperation> localVarResponse = await ModifyBlockOperationAsyncWithHttpInfo(uuid, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify a block operation Modify an existing block operation to either pause or continue it.     **Required permissions:**    - **block.op.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the block operation</param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (BlockOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockOperation>> ModifyBlockOperationAsyncWithHttpInfo (Guid? uuid, ModifyBlockOperationRequest body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling BlockApi->ModifyBlockOperation");

            var localVarPath = "/block/op/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyBlockOperation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockOperation)));
        }

    }
}
