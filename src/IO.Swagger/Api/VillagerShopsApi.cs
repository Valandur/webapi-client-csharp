/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVillagerShopsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        VillagerShopsStockItem AddShopItem (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        ApiResponse<VillagerShopsStockItem> AddShopItemWithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        VillagerShopsStockItem AddShopItem_0 (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        ApiResponse<VillagerShopsStockItem> AddShopItem_0WithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop CreateShop (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> CreateShopWithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop CreateShop_0 (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> CreateShop_0WithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop DeleteShop (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> DeleteShopWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop DeleteShopItem (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> DeleteShopItemWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop DeleteShopItem_0 (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> DeleteShopItem_0WithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop DeleteShop_0 (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> DeleteShop_0WithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop GetShop (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> GetShopWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        VillagerShopsStockItem GetShopItem (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        ApiResponse<VillagerShopsStockItem> GetShopItemWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        VillagerShopsStockItem GetShopItem_0 (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        ApiResponse<VillagerShopsStockItem> GetShopItem_0WithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop GetShop_0 (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> GetShop_0WithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsStockItem&gt;</returns>
        List<VillagerShopsStockItem> ListShopItems (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsStockItem&gt;</returns>
        ApiResponse<List<VillagerShopsStockItem>> ListShopItemsWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsStockItem&gt;</returns>
        List<VillagerShopsStockItem> ListShopItems_0 (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsStockItem&gt;</returns>
        ApiResponse<List<VillagerShopsStockItem>> ListShopItems_0WithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsShop&gt;</returns>
        List<VillagerShopsShop> ListShops (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsShop&gt;</returns>
        ApiResponse<List<VillagerShopsShop>> ListShopsWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsShop&gt;</returns>
        List<VillagerShopsShop> ListShops_0 (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsShop&gt;</returns>
        ApiResponse<List<VillagerShopsShop>> ListShops_0WithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop UpdateShop (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> UpdateShopWithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        VillagerShopsStockItem UpdateShopItem (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        ApiResponse<VillagerShopsStockItem> UpdateShopItemWithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        VillagerShopsStockItem UpdateShopItem_0 (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        ApiResponse<VillagerShopsStockItem> UpdateShopItem_0WithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        VillagerShopsShop UpdateShop_0 (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        ApiResponse<VillagerShopsShop> UpdateShop_0WithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        System.Threading.Tasks.Task<VillagerShopsStockItem> AddShopItemAsync (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> AddShopItemAsyncWithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        System.Threading.Tasks.Task<VillagerShopsStockItem> AddShopItem_0Async (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Add Shop Item
        /// </summary>
        /// <remarks>
        /// Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> AddShopItem_0AsyncWithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> CreateShopAsync (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> CreateShopAsyncWithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> CreateShop_0Async (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Create Shops
        /// </summary>
        /// <remarks>
        /// Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> CreateShop_0AsyncWithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> DeleteShopAsync (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShopAsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> DeleteShopItemAsync (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShopItemAsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> DeleteShopItem_0Async (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Removes a Shop Item
        /// </summary>
        /// <remarks>
        /// Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShopItem_0AsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> DeleteShop_0Async (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Delete a Shop
        /// </summary>
        /// <remarks>
        /// Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShop_0AsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> GetShopAsync (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> GetShopAsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        System.Threading.Tasks.Task<VillagerShopsStockItem> GetShopItemAsync (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> GetShopItemAsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        System.Threading.Tasks.Task<VillagerShopsStockItem> GetShopItem_0Async (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> GetShopItem_0AsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> GetShop_0Async (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a Shop
        /// </summary>
        /// <remarks>
        /// Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> GetShop_0AsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsStockItem&gt;</returns>
        System.Threading.Tasks.Task<List<VillagerShopsStockItem>> ListShopItemsAsync (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsStockItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsStockItem>>> ListShopItemsAsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsStockItem&gt;</returns>
        System.Threading.Tasks.Task<List<VillagerShopsStockItem>> ListShopItems_0Async (Guid? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shop Items
        /// </summary>
        /// <remarks>
        /// Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsStockItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsStockItem>>> ListShopItems_0AsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsShop&gt;</returns>
        System.Threading.Tasks.Task<List<VillagerShopsShop>> ListShopsAsync (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsShop&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsShop>>> ListShopsAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsShop&gt;</returns>
        System.Threading.Tasks.Task<List<VillagerShopsShop>> ListShops_0Async (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List Shops
        /// </summary>
        /// <remarks>
        /// Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsShop&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsShop>>> ListShops_0AsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> UpdateShopAsync (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> UpdateShopAsyncWithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        System.Threading.Tasks.Task<VillagerShopsStockItem> UpdateShopItemAsync (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> UpdateShopItemAsyncWithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        System.Threading.Tasks.Task<VillagerShopsStockItem> UpdateShopItem_0Async (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop Item
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> UpdateShopItem_0AsyncWithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        System.Threading.Tasks.Task<VillagerShopsShop> UpdateShop_0Async (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Change Shop
        /// </summary>
        /// <remarks>
        /// Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> UpdateShop_0AsyncWithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VillagerShopsApi : IVillagerShopsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VillagerShopsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VillagerShopsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VillagerShopsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VillagerShopsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        public VillagerShopsStockItem AddShopItem (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = AddShopItemWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        public ApiResponse< VillagerShopsStockItem > AddShopItemWithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->AddShopItem");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        public async System.Threading.Tasks.Task<VillagerShopsStockItem> AddShopItemAsync (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = await AddShopItemAsyncWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> AddShopItemAsyncWithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->AddShopItem");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        public VillagerShopsStockItem AddShopItem_0 (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = AddShopItem_0WithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        public ApiResponse< VillagerShopsStockItem > AddShopItem_0WithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->AddShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        public async System.Threading.Tasks.Task<VillagerShopsStockItem> AddShopItem_0Async (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = await AddShopItem_0AsyncWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Shop Item Add a item to the shops listing     **Required permissions:**    - **vshop.vshop.item.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> AddShopItem_0AsyncWithHttpInfo (Guid? id, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->AddShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop CreateShop (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = CreateShopWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > CreateShopWithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> CreateShopAsync (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await CreateShopAsyncWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> CreateShopAsyncWithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop CreateShop_0 (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = CreateShop_0WithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > CreateShop_0WithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> CreateShop_0Async (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await CreateShop_0AsyncWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Shops Spawn a new shop with base values; Some values are only set by update     **Required permissions:**    - **vshop.vshop.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> CreateShop_0AsyncWithHttpInfo (VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop DeleteShop (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = DeleteShopWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > DeleteShopWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShop");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> DeleteShopAsync (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await DeleteShopAsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShopAsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShop");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop DeleteShopItem (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = DeleteShopItemWithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > DeleteShopItemWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShopItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->DeleteShopItem");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> DeleteShopItemAsync (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await DeleteShopItemAsyncWithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShopItemAsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShopItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->DeleteShopItem");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop DeleteShopItem_0 (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = DeleteShopItem_0WithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > DeleteShopItem_0WithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShopItem_0");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->DeleteShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> DeleteShopItem_0Async (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await DeleteShopItem_0AsyncWithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a Shop Item Remove an item from this shop     **Required permissions:**    - **vshop.vshop.item.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShopItem_0AsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShopItem_0");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->DeleteShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop DeleteShop_0 (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = DeleteShop_0WithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > DeleteShop_0WithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShop_0");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> DeleteShop_0Async (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await DeleteShop_0AsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Shop Permanently delete a shop from the server     **Required permissions:**    - **vshop.vshop.delete**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> DeleteShop_0AsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->DeleteShop_0");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop GetShop (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = GetShopWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > GetShopWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShop");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> GetShopAsync (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await GetShopAsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> GetShopAsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShop");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        public VillagerShopsStockItem GetShopItem (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = GetShopItemWithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        public ApiResponse< VillagerShopsStockItem > GetShopItemWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShopItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->GetShopItem");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        public async System.Threading.Tasks.Task<VillagerShopsStockItem> GetShopItemAsync (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = await GetShopItemAsyncWithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> GetShopItemAsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShopItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->GetShopItem");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        public VillagerShopsStockItem GetShopItem_0 (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = GetShopItem_0WithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        public ApiResponse< VillagerShopsStockItem > GetShopItem_0WithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShopItem_0");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->GetShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        public async System.Threading.Tasks.Task<VillagerShopsStockItem> GetShopItem_0Async (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = await GetShopItem_0AsyncWithHttpInfo(id, item, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop item     **Required permissions:**    - **vshop.vshop.item.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> GetShopItem_0AsyncWithHttpInfo (Guid? id, int? item, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShopItem_0");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->GetShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop GetShop_0 (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = GetShop_0WithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > GetShop_0WithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShop_0");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> GetShop_0Async (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await GetShop_0AsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Shop Get detailed information about a shop     **Required permissions:**    - **vshop.vshop.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> GetShop_0AsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->GetShop_0");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsStockItem&gt;</returns>
        public List<VillagerShopsStockItem> ListShopItems (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsStockItem>> localVarResponse = ListShopItemsWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsStockItem&gt;</returns>
        public ApiResponse< List<VillagerShopsStockItem> > ListShopItemsWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->ListShopItems");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShopItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsStockItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsStockItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsStockItem>)));
        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsStockItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<VillagerShopsStockItem>> ListShopItemsAsync (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsStockItem>> localVarResponse = await ListShopItemsAsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsStockItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsStockItem>>> ListShopItemsAsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->ListShopItems");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShopItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsStockItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsStockItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsStockItem>)));
        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsStockItem&gt;</returns>
        public List<VillagerShopsStockItem> ListShopItems_0 (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsStockItem>> localVarResponse = ListShopItems_0WithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsStockItem&gt;</returns>
        public ApiResponse< List<VillagerShopsStockItem> > ListShopItems_0WithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->ListShopItems_0");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShopItems_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsStockItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsStockItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsStockItem>)));
        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsStockItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<VillagerShopsStockItem>> ListShopItems_0Async (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsStockItem>> localVarResponse = await ListShopItems_0AsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Shop Items Return a list of all shops items     **Required permissions:**    - **vshop.vshop.item.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsStockItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsStockItem>>> ListShopItems_0AsyncWithHttpInfo (Guid? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->ListShopItems_0");

            var localVarPath = "/vshop/shop/{id}/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShopItems_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsStockItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsStockItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsStockItem>)));
        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsShop&gt;</returns>
        public List<VillagerShopsShop> ListShops (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsShop>> localVarResponse = ListShopsWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsShop&gt;</returns>
        public ApiResponse< List<VillagerShopsShop> > ListShopsWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShops", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsShop>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsShop>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsShop>)));
        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsShop&gt;</returns>
        public async System.Threading.Tasks.Task<List<VillagerShopsShop>> ListShopsAsync (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsShop>> localVarResponse = await ListShopsAsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsShop&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsShop>>> ListShopsAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShops", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsShop>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsShop>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsShop>)));
        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;VillagerShopsShop&gt;</returns>
        public List<VillagerShopsShop> ListShops_0 (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsShop>> localVarResponse = ListShops_0WithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;VillagerShopsShop&gt;</returns>
        public ApiResponse< List<VillagerShopsShop> > ListShops_0WithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShops_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsShop>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsShop>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsShop>)));
        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;VillagerShopsShop&gt;</returns>
        public async System.Threading.Tasks.Task<List<VillagerShopsShop>> ListShops_0Async (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<VillagerShopsShop>> localVarResponse = await ListShops_0AsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Shops Return a list of all shops     **Required permissions:**    - **vshop.vshop.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VillagerShopsShop&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VillagerShopsShop>>> ListShops_0AsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/vshop/shop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListShops_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VillagerShopsShop>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VillagerShopsShop>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VillagerShopsShop>)));
        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop UpdateShop (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = UpdateShopWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > UpdateShopWithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShop");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> UpdateShopAsync (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await UpdateShopAsyncWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> UpdateShopAsyncWithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShop");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShop", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        public VillagerShopsStockItem UpdateShopItem (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = UpdateShopItemWithHttpInfo(id, item, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        public ApiResponse< VillagerShopsStockItem > UpdateShopItemWithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShopItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->UpdateShopItem");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        public async System.Threading.Tasks.Task<VillagerShopsStockItem> UpdateShopItemAsync (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = await UpdateShopItemAsyncWithHttpInfo(id, item, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> UpdateShopItemAsyncWithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShopItem");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->UpdateShopItem");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShopItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsStockItem</returns>
        public VillagerShopsStockItem UpdateShopItem_0 (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = UpdateShopItem_0WithHttpInfo(id, item, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsStockItem</returns>
        public ApiResponse< VillagerShopsStockItem > UpdateShopItem_0WithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShopItem_0");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->UpdateShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsStockItem</returns>
        public async System.Threading.Tasks.Task<VillagerShopsStockItem> UpdateShopItem_0Async (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsStockItem> localVarResponse = await UpdateShopItem_0AsyncWithHttpInfo(id, item, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change Shop Item Modifies values for this shop item     **Required permissions:**    - **vshop.vshop.item.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="item"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsStockItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsStockItem>> UpdateShopItem_0AsyncWithHttpInfo (Guid? id, int? item, VillagerShopsStockItem body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShopItem_0");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling VillagerShopsApi->UpdateShopItem_0");

            var localVarPath = "/vshop/shop/{id}/item/{item}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null) localVarPathParams.Add("item", this.Configuration.ApiClient.ParameterToString(item)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShopItem_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsStockItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsStockItem) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsStockItem)));
        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>VillagerShopsShop</returns>
        public VillagerShopsShop UpdateShop_0 (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = UpdateShop_0WithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of VillagerShopsShop</returns>
        public ApiResponse< VillagerShopsShop > UpdateShop_0WithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShop_0");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of VillagerShopsShop</returns>
        public async System.Threading.Tasks.Task<VillagerShopsShop> UpdateShop_0Async (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<VillagerShopsShop> localVarResponse = await UpdateShop_0AsyncWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change Shop Modifies values for this shop, but items     **Required permissions:**    - **vshop.vshop.edit**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (VillagerShopsShop)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VillagerShopsShop>> UpdateShop_0AsyncWithHttpInfo (Guid? id, VillagerShopsShop body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VillagerShopsApi->UpdateShop_0");

            var localVarPath = "/vshop/shop/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = this.Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateShop_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VillagerShopsShop>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VillagerShopsShop) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VillagerShopsShop)));
        }

    }
}
