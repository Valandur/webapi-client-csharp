/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: @version@
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMMCTicketsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a ticket
        /// </summary>
        /// <remarks>
        /// Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MMCTicketsTicket</returns>
        MMCTicketsTicket GetTicket (int? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a ticket
        /// </summary>
        /// <remarks>
        /// Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MMCTicketsTicket</returns>
        ApiResponse<MMCTicketsTicket> GetTicketWithHttpInfo (int? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List tickets
        /// </summary>
        /// <remarks>
        /// Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MMCTicketsTicket&gt;</returns>
        List<MMCTicketsTicket> ListTickets (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List tickets
        /// </summary>
        /// <remarks>
        /// Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MMCTicketsTicket&gt;</returns>
        ApiResponse<List<MMCTicketsTicket>> ListTicketsWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Modify a ticket
        /// </summary>
        /// <remarks>
        /// Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MMCTicketsTicket</returns>
        MMCTicketsTicket ModifyTicket (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Modify a ticket
        /// </summary>
        /// <remarks>
        /// Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MMCTicketsTicket</returns>
        ApiResponse<MMCTicketsTicket> ModifyTicketWithHttpInfo (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a ticket
        /// </summary>
        /// <remarks>
        /// Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MMCTicketsTicket</returns>
        System.Threading.Tasks.Task<MMCTicketsTicket> GetTicketAsync (int? id, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a ticket
        /// </summary>
        /// <remarks>
        /// Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MMCTicketsTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<MMCTicketsTicket>> GetTicketAsyncWithHttpInfo (int? id, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List tickets
        /// </summary>
        /// <remarks>
        /// Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MMCTicketsTicket&gt;</returns>
        System.Threading.Tasks.Task<List<MMCTicketsTicket>> ListTicketsAsync (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List tickets
        /// </summary>
        /// <remarks>
        /// Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MMCTicketsTicket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MMCTicketsTicket>>> ListTicketsAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Modify a ticket
        /// </summary>
        /// <remarks>
        /// Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MMCTicketsTicket</returns>
        System.Threading.Tasks.Task<MMCTicketsTicket> ModifyTicketAsync (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Modify a ticket
        /// </summary>
        /// <remarks>
        /// Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MMCTicketsTicket)</returns>
        System.Threading.Tasks.Task<ApiResponse<MMCTicketsTicket>> ModifyTicketAsyncWithHttpInfo (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MMCTicketsApi : IMMCTicketsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MMCTicketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MMCTicketsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MMCTicketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MMCTicketsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a ticket Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MMCTicketsTicket</returns>
        public MMCTicketsTicket GetTicket (int? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MMCTicketsTicket> localVarResponse = GetTicketWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a ticket Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MMCTicketsTicket</returns>
        public ApiResponse< MMCTicketsTicket > GetTicketWithHttpInfo (int? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MMCTicketsApi->GetTicket");

            var localVarPath = "/mmc-tickets/ticket/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MMCTicketsTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MMCTicketsTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MMCTicketsTicket)));
        }

        /// <summary>
        /// Get a ticket Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MMCTicketsTicket</returns>
        public async System.Threading.Tasks.Task<MMCTicketsTicket> GetTicketAsync (int? id, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MMCTicketsTicket> localVarResponse = await GetTicketAsyncWithHttpInfo(id, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a ticket Get detailed information about a ticket.     **Required permissions:**    - **mmc-tickets.ticket.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MMCTicketsTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MMCTicketsTicket>> GetTicketAsyncWithHttpInfo (int? id, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MMCTicketsApi->GetTicket");

            var localVarPath = "/mmc-tickets/ticket/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MMCTicketsTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MMCTicketsTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MMCTicketsTicket)));
        }

        /// <summary>
        /// List tickets Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;MMCTicketsTicket&gt;</returns>
        public List<MMCTicketsTicket> ListTickets (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MMCTicketsTicket>> localVarResponse = ListTicketsWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List tickets Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;MMCTicketsTicket&gt;</returns>
        public ApiResponse< List<MMCTicketsTicket> > ListTicketsWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/mmc-tickets/ticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MMCTicketsTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MMCTicketsTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MMCTicketsTicket>)));
        }

        /// <summary>
        /// List tickets Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;MMCTicketsTicket&gt;</returns>
        public async System.Threading.Tasks.Task<List<MMCTicketsTicket>> ListTicketsAsync (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<MMCTicketsTicket>> localVarResponse = await ListTicketsAsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List tickets Get a list of all the tickets on the server.     **Required permissions:**    - **mmc-tickets.ticket.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MMCTicketsTicket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MMCTicketsTicket>>> ListTicketsAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/mmc-tickets/ticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTickets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MMCTicketsTicket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MMCTicketsTicket>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MMCTicketsTicket>)));
        }

        /// <summary>
        /// Modify a ticket Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>MMCTicketsTicket</returns>
        public MMCTicketsTicket ModifyTicket (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MMCTicketsTicket> localVarResponse = ModifyTicketWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify a ticket Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of MMCTicketsTicket</returns>
        public ApiResponse< MMCTicketsTicket > ModifyTicketWithHttpInfo (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MMCTicketsApi->ModifyTicket");

            var localVarPath = "/mmc-tickets/ticket/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MMCTicketsTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MMCTicketsTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MMCTicketsTicket)));
        }

        /// <summary>
        /// Modify a ticket Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of MMCTicketsTicket</returns>
        public async System.Threading.Tasks.Task<MMCTicketsTicket> ModifyTicketAsync (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<MMCTicketsTicket> localVarResponse = await ModifyTicketAsyncWithHttpInfo(id, body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify a ticket Modify the properties of an existing ticket.     **Required permissions:**    - **mmc-tickets.ticket.modify**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (MMCTicketsTicket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MMCTicketsTicket>> ModifyTicketAsyncWithHttpInfo (int? id, MMCTicketsTicket body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MMCTicketsApi->ModifyTicket");

            var localVarPath = "/mmc-tickets/ticket/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyTicket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MMCTicketsTicket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MMCTicketsTicket) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MMCTicketsTicket)));
        }

    }
}
