/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInteractiveMessageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>InteractiveMessage</returns>
        InteractiveMessage GetMessage (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of InteractiveMessage</returns>
        ApiResponse<InteractiveMessage> GetMessageWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;InteractiveMessage&gt;</returns>
        List<InteractiveMessage> ListMessages (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;InteractiveMessage&gt;</returns>
        ApiResponse<List<InteractiveMessage>> ListMessagesWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>InteractiveMessage</returns>
        InteractiveMessage SendMessage (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of InteractiveMessage</returns>
        ApiResponse<InteractiveMessage> SendMessageWithHttpInfo (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of InteractiveMessage</returns>
        System.Threading.Tasks.Task<InteractiveMessage> GetMessageAsync (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Get a message
        /// </summary>
        /// <remarks>
        /// Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (InteractiveMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<InteractiveMessage>> GetMessageAsyncWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;InteractiveMessage&gt;</returns>
        System.Threading.Tasks.Task<List<InteractiveMessage>> ListMessagesAsync (bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// List messages
        /// </summary>
        /// <remarks>
        /// Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InteractiveMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InteractiveMessage>>> ListMessagesAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null);
        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of InteractiveMessage</returns>
        System.Threading.Tasks.Task<InteractiveMessage> SendMessageAsync (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null);

        /// <summary>
        /// Send a message
        /// </summary>
        /// <remarks>
        /// Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (InteractiveMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<InteractiveMessage>> SendMessageAsyncWithHttpInfo (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InteractiveMessageApi : IInteractiveMessageApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InteractiveMessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InteractiveMessageApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InteractiveMessageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InteractiveMessageApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a message Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>InteractiveMessage</returns>
        public InteractiveMessage GetMessage (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<InteractiveMessage> localVarResponse = GetMessageWithHttpInfo(uuid, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a message Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of InteractiveMessage</returns>
        public ApiResponse< InteractiveMessage > GetMessageWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling InteractiveMessageApi->GetMessage");

            var localVarPath = "/interactive-message/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InteractiveMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InteractiveMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InteractiveMessage)));
        }

        /// <summary>
        /// Get a message Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of InteractiveMessage</returns>
        public async System.Threading.Tasks.Task<InteractiveMessage> GetMessageAsync (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<InteractiveMessage> localVarResponse = await GetMessageAsyncWithHttpInfo(uuid, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a message Get detailed information about a message.     **Required permissions:**    - **interactive-message.one**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The uuid of the sent message</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (InteractiveMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InteractiveMessage>> GetMessageAsyncWithHttpInfo (Guid? uuid, bool? details = null, string accept = null, bool? pretty = null)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling InteractiveMessageApi->GetMessage");

            var localVarPath = "/interactive-message/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", Configuration.ApiClient.ParameterToString(uuid)); // path parameter
            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InteractiveMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InteractiveMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InteractiveMessage)));
        }

        /// <summary>
        /// List messages Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>List&lt;InteractiveMessage&gt;</returns>
        public List<InteractiveMessage> ListMessages (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<InteractiveMessage>> localVarResponse = ListMessagesWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List messages Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of List&lt;InteractiveMessage&gt;</returns>
        public ApiResponse< List<InteractiveMessage> > ListMessagesWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/interactive-message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InteractiveMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InteractiveMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InteractiveMessage>)));
        }

        /// <summary>
        /// List messages Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of List&lt;InteractiveMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<InteractiveMessage>> ListMessagesAsync (bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<List<InteractiveMessage>> localVarResponse = await ListMessagesAsyncWithHttpInfo(details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List messages Get a list of all the messages that were sent through the message endpoint since the server started.     **Required permissions:**    - **interactive-message.list**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InteractiveMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InteractiveMessage>>> ListMessagesAsyncWithHttpInfo (bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/interactive-message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InteractiveMessage>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InteractiveMessage>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InteractiveMessage>)));
        }

        /// <summary>
        /// Send a message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>InteractiveMessage</returns>
        public InteractiveMessage SendMessage (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<InteractiveMessage> localVarResponse = SendMessageWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>ApiResponse of InteractiveMessage</returns>
        public ApiResponse< InteractiveMessage > SendMessageWithHttpInfo (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/interactive-message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InteractiveMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InteractiveMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InteractiveMessage)));
        }

        /// <summary>
        /// Send a message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of InteractiveMessage</returns>
        public async System.Threading.Tasks.Task<InteractiveMessage> SendMessageAsync (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null)
        {
             ApiResponse<InteractiveMessage> localVarResponse = await SendMessageAsyncWithHttpInfo(body, details, accept, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a message Send an interactive message to a player. Make sure to have an event hook for \&quot;custom_message\&quot; to receive the response.     **Required permissions:**    - **interactive-message.create**   
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <param name="details">Add to include additional details, omit or false otherwise (optional)</param>
        /// <param name="accept">Override the &#39;Accept&#39; request header (useful for debugging your requests) (optional)</param>
        /// <param name="pretty">Add to make the Web-API pretty print the response (useful for debugging your requests) (optional)</param>
        /// <returns>Task of ApiResponse (InteractiveMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InteractiveMessage>> SendMessageAsyncWithHttpInfo (InteractiveMessage body = null, bool? details = null, string accept = null, bool? pretty = null)
        {

            var localVarPath = "/interactive-message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "details", details)); // query parameter
            if (accept != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "accept", accept)); // query parameter
            if (pretty != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pretty", pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (ApiKeyHeader) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-WebAPI-Key")))
            {
                localVarHeaderParams["X-WebAPI-Key"] = Configuration.GetApiKeyWithPrefix("X-WebAPI-Key");
            }
            // authentication (ApiKeyQuery) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "key", Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InteractiveMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InteractiveMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InteractiveMessage)));
        }

    }
}
