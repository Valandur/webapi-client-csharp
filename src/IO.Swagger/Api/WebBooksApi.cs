/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebBooksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create web book
        /// </summary>
        /// <remarks>
        /// Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>WebBooksResponse1</returns>
        WebBooksResponse1 CreateBook (CreateWebBookRequest createWebBookRequest);

        /// <summary>
        /// Create web book
        /// </summary>
        /// <remarks>
        /// Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>ApiResponse of WebBooksResponse1</returns>
        ApiResponse<WebBooksResponse1> CreateBookWithHttpInfo (CreateWebBookRequest createWebBookRequest);
        /// <summary>
        /// Delete a web book
        /// </summary>
        /// <remarks>
        /// Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns></returns>
        void DeleteBook (string id);

        /// <summary>
        /// Delete a web book
        /// </summary>
        /// <remarks>
        /// Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBookWithHttpInfo (string id);
        /// <summary>
        /// Detailed web book info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>WebBooksResponse1</returns>
        WebBooksResponse1 GetBook (string id);

        /// <summary>
        /// Detailed web book info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>ApiResponse of WebBooksResponse1</returns>
        ApiResponse<WebBooksResponse1> GetBookWithHttpInfo (string id);
        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>string</returns>
        string GetBookHtml (string id);

        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetBookHtmlWithHttpInfo (string id);
        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>string</returns>
        string GetBookHtmlPost (string id);

        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetBookHtmlPostWithHttpInfo (string id);
        /// <summary>
        /// Books list
        /// </summary>
        /// <remarks>
        /// Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>WebBooksResponse</returns>
        WebBooksResponse GetBooks (string details = null);

        /// <summary>
        /// Books list
        /// </summary>
        /// <remarks>
        /// Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>ApiResponse of WebBooksResponse</returns>
        ApiResponse<WebBooksResponse> GetBooksWithHttpInfo (string details = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create web book
        /// </summary>
        /// <remarks>
        /// Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>Task of WebBooksResponse1</returns>
        System.Threading.Tasks.Task<WebBooksResponse1> CreateBookAsync (CreateWebBookRequest createWebBookRequest);

        /// <summary>
        /// Create web book
        /// </summary>
        /// <remarks>
        /// Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>Task of ApiResponse (WebBooksResponse1)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebBooksResponse1>> CreateBookAsyncWithHttpInfo (CreateWebBookRequest createWebBookRequest);
        /// <summary>
        /// Delete a web book
        /// </summary>
        /// <remarks>
        /// Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBookAsync (string id);

        /// <summary>
        /// Delete a web book
        /// </summary>
        /// <remarks>
        /// Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBookAsyncWithHttpInfo (string id);
        /// <summary>
        /// Detailed web book info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>Task of WebBooksResponse1</returns>
        System.Threading.Tasks.Task<WebBooksResponse1> GetBookAsync (string id);

        /// <summary>
        /// Detailed web book info
        /// </summary>
        /// <remarks>
        /// Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>Task of ApiResponse (WebBooksResponse1)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebBooksResponse1>> GetBookAsyncWithHttpInfo (string id);
        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetBookHtmlAsync (string id);

        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetBookHtmlAsyncWithHttpInfo (string id);
        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetBookHtmlPostAsync (string id);

        /// <summary>
        /// Web Book HTML
        /// </summary>
        /// <remarks>
        /// Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetBookHtmlPostAsyncWithHttpInfo (string id);
        /// <summary>
        /// Books list
        /// </summary>
        /// <remarks>
        /// Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>Task of WebBooksResponse</returns>
        System.Threading.Tasks.Task<WebBooksResponse> GetBooksAsync (string details = null);

        /// <summary>
        /// Books list
        /// </summary>
        /// <remarks>
        /// Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>Task of ApiResponse (WebBooksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebBooksResponse>> GetBooksAsyncWithHttpInfo (string details = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebBooksApi : IWebBooksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebBooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebBooksApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebBooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebBooksApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create web book Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>WebBooksResponse1</returns>
        public WebBooksResponse1 CreateBook (CreateWebBookRequest createWebBookRequest)
        {
             ApiResponse<WebBooksResponse1> localVarResponse = CreateBookWithHttpInfo(createWebBookRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create web book Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>ApiResponse of WebBooksResponse1</returns>
        public ApiResponse< WebBooksResponse1 > CreateBookWithHttpInfo (CreateWebBookRequest createWebBookRequest)
        {
            // verify the required parameter 'createWebBookRequest' is set
            if (createWebBookRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWebBookRequest' when calling WebBooksApi->CreateBook");

            var localVarPath = "/webbooks/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createWebBookRequest != null && createWebBookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createWebBookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWebBookRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebBooksResponse1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebBooksResponse1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebBooksResponse1)));
        }

        /// <summary>
        /// Create web book Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>Task of WebBooksResponse1</returns>
        public async System.Threading.Tasks.Task<WebBooksResponse1> CreateBookAsync (CreateWebBookRequest createWebBookRequest)
        {
             ApiResponse<WebBooksResponse1> localVarResponse = await CreateBookAsyncWithHttpInfo(createWebBookRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create web book Create a new web book from the specified data.  &gt; Required permission: webbooks.book.create 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebBookRequest"></param>
        /// <returns>Task of ApiResponse (WebBooksResponse1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebBooksResponse1>> CreateBookAsyncWithHttpInfo (CreateWebBookRequest createWebBookRequest)
        {
            // verify the required parameter 'createWebBookRequest' is set
            if (createWebBookRequest == null)
                throw new ApiException(400, "Missing required parameter 'createWebBookRequest' when calling WebBooksApi->CreateBook");

            var localVarPath = "/webbooks/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createWebBookRequest != null && createWebBookRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createWebBookRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createWebBookRequest; // byte array
            }

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebBooksResponse1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebBooksResponse1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebBooksResponse1)));
        }

        /// <summary>
        /// Delete a web book Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns></returns>
        public void DeleteBook (string id)
        {
             DeleteBookWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a web book Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBookWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->DeleteBook");

            var localVarPath = "/webbooks/book/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a web book Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBookAsync (string id)
        {
             await DeleteBookAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a web book Delete a web book.  &gt; Required permission: webbooks.book.delete 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBookAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->DeleteBook");

            var localVarPath = "/webbooks/book/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Detailed web book info Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>WebBooksResponse1</returns>
        public WebBooksResponse1 GetBook (string id)
        {
             ApiResponse<WebBooksResponse1> localVarResponse = GetBookWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detailed web book info Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>ApiResponse of WebBooksResponse1</returns>
        public ApiResponse< WebBooksResponse1 > GetBookWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->GetBook");

            var localVarPath = "/webbooks/book/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebBooksResponse1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebBooksResponse1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebBooksResponse1)));
        }

        /// <summary>
        /// Detailed web book info Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>Task of WebBooksResponse1</returns>
        public async System.Threading.Tasks.Task<WebBooksResponse1> GetBookAsync (string id)
        {
             ApiResponse<WebBooksResponse1> localVarResponse = await GetBookAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detailed web book info Get detailed information about a web book.  &gt; Required permission: webbooks.book.one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get detailed information about.</param>
        /// <returns>Task of ApiResponse (WebBooksResponse1)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebBooksResponse1>> GetBookAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->GetBook");

            var localVarPath = "/webbooks/book/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebBooksResponse1>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebBooksResponse1) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebBooksResponse1)));
        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>string</returns>
        public string GetBookHtml (string id)
        {
             ApiResponse<string> localVarResponse = GetBookHtmlWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetBookHtmlWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->GetBookHtml");

            var localVarPath = "/webbooks/book/{id}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetBookHtmlAsync (string id)
        {
             ApiResponse<string> localVarResponse = await GetBookHtmlAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetBookHtmlAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->GetBookHtml");

            var localVarPath = "/webbooks/book/{id}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>string</returns>
        public string GetBookHtmlPost (string id)
        {
             ApiResponse<string> localVarResponse = GetBookHtmlPostWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetBookHtmlPostWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->GetBookHtmlPost");

            var localVarPath = "/webbooks/book/{id}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookHtmlPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetBookHtmlPostAsync (string id)
        {
             ApiResponse<string> localVarResponse = await GetBookHtmlPostAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Web Book HTML Get the web book content as HTML.  &gt; Required permission: webbooks.book.html 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the web book to get the html for.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetBookHtmlPostAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WebBooksApi->GetBookHtmlPost");

            var localVarPath = "/webbooks/book/{id}/html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookHtmlPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Books list Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>WebBooksResponse</returns>
        public WebBooksResponse GetBooks (string details = null)
        {
             ApiResponse<WebBooksResponse> localVarResponse = GetBooksWithHttpInfo(details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Books list Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>ApiResponse of WebBooksResponse</returns>
        public ApiResponse< WebBooksResponse > GetBooksWithHttpInfo (string details = null)
        {

            var localVarPath = "/webbooks/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }

            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebBooksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebBooksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebBooksResponse)));
        }

        /// <summary>
        /// Books list Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>Task of WebBooksResponse</returns>
        public async System.Threading.Tasks.Task<WebBooksResponse> GetBooksAsync (string details = null)
        {
             ApiResponse<WebBooksResponse> localVarResponse = await GetBooksAsyncWithHttpInfo(details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Books list Get a list of all the web books on the server.  &gt; Required permission: webbooks.book.list 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="details">Pass this parameter to receive the full details for each web book. (optional)</param>
        /// <returns>Task of ApiResponse (WebBooksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WebBooksResponse>> GetBooksAsyncWithHttpInfo (string details = null)
        {

            var localVarPath = "/webbooks/book";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (details != null) localVarQueryParams.Add("details", Configuration.ApiClient.ParameterToString(details)); // query parameter

            // authentication (headerKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("x-webapi-key")))
            {
                localVarHeaderParams["x-webapi-key"] = Configuration.GetApiKeyWithPrefix("x-webapi-key");
            }
            // authentication (queryKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WebBooksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WebBooksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WebBooksResponse)));
        }

    }
}
