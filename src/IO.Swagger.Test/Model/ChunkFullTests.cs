/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ChunkFull
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class ChunkFullTests
    {
        // TODO uncomment below to declare an instance variable for ChunkFull
        //private ChunkFull instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of ChunkFull
            //instance = new ChunkFull();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ChunkFull
        /// </summary>
        [Test]
        public void ChunkFullInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" ChunkFull
            //Assert.IsInstanceOfType<ChunkFull> (instance, "variable 'instance' is a ChunkFull");
        }

        /// <summary>
        /// Test the property 'Uuid'
        /// </summary>
        [Test]
        public void UuidTest()
        {
            // TODO unit test for the property 'Uuid'
        }
        /// <summary>
        /// Test the property 'Position'
        /// </summary>
        [Test]
        public void PositionTest()
        {
            // TODO unit test for the property 'Position'
        }
        /// <summary>
        /// Test the property 'World'
        /// </summary>
        [Test]
        public void WorldTest()
        {
            // TODO unit test for the property 'World'
        }
        /// <summary>
        /// Test the property 'BlockMin'
        /// </summary>
        [Test]
        public void BlockMinTest()
        {
            // TODO unit test for the property 'BlockMin'
        }
        /// <summary>
        /// Test the property 'BlockMax'
        /// </summary>
        [Test]
        public void BlockMaxTest()
        {
            // TODO unit test for the property 'BlockMax'
        }
        /// <summary>
        /// Test the property 'IsLoaded'
        /// </summary>
        [Test]
        public void IsLoadedTest()
        {
            // TODO unit test for the property 'IsLoaded'
        }
        /// <summary>
        /// Test the property 'InhabitedTime'
        /// </summary>
        [Test]
        public void InhabitedTimeTest()
        {
            // TODO unit test for the property 'InhabitedTime'
        }
        /// <summary>
        /// Test the property 'DifficultyFactor'
        /// </summary>
        [Test]
        public void DifficultyFactorTest()
        {
            // TODO unit test for the property 'DifficultyFactor'
        }
        /// <summary>
        /// Test the property 'DifficultyPercentage'
        /// </summary>
        [Test]
        public void DifficultyPercentageTest()
        {
            // TODO unit test for the property 'DifficultyPercentage'
        }

    }

}
