/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TileEntityApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TileEntityApiTests
    {
        private TileEntityApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TileEntityApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TileEntityApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TileEntityApi
            //Assert.IsInstanceOfType(typeof(TileEntityApi), instance, "instance is a TileEntityApi");
        }

        
        /// <summary>
        /// Test ExecuteTileEntityMethod
        /// </summary>
        [Test]
        public void ExecuteTileEntityMethodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldUuid = null;
            //int? x = null;
            //int? y = null;
            //int? z = null;
            //RawRequest request = null;
            //var response = instance.ExecuteTileEntityMethod(worldUuid, x, y, z, request);
            //Assert.IsInstanceOf<ExecuteTileEntityMethodResponse> (response, "response is ExecuteTileEntityMethodResponse");
        }
        
        /// <summary>
        /// Test GetTileEntities
        /// </summary>
        [Test]
        public void GetTileEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string world = null;
            //string type = null;
            //string limit = null;
            //var response = instance.GetTileEntities(world, type, limit);
            //Assert.IsInstanceOf<TileEntitiesResponse> (response, "response is TileEntitiesResponse");
        }
        
        /// <summary>
        /// Test GetTileEntity
        /// </summary>
        [Test]
        public void GetTileEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string worldUuid = null;
            //int? x = null;
            //int? y = null;
            //int? z = null;
            //string fields = null;
            //string methods = null;
            //var response = instance.GetTileEntity(worldUuid, x, y, z, fields, methods);
            //Assert.IsInstanceOf<TileEntityResponse> (response, "response is TileEntityResponse");
        }
        
    }

}
