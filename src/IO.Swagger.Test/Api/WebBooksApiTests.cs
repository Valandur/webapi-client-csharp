/* 
 * WebAPI
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/...  As a quick test try reaching the route http:/localhost:8080/api/info (remember that you can only access \"localhost\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md) 
 *
 * OpenAPI spec version: <version>
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WebBooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WebBooksApiTests
    {
        private WebBooksApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WebBooksApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WebBooksApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebBooksApi
            //Assert.IsInstanceOfType(typeof(WebBooksApi), instance, "instance is a WebBooksApi");
        }

        
        /// <summary>
        /// Test CreateBook
        /// </summary>
        [Test]
        public void CreateBookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateWebBookRequest createWebBookRequest = null;
            //var response = instance.CreateBook(createWebBookRequest);
            //Assert.IsInstanceOf<WebBooksResponse1> (response, "response is WebBooksResponse1");
        }
        
        /// <summary>
        /// Test DeleteBook
        /// </summary>
        [Test]
        public void DeleteBookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DeleteBook(id);
            
        }
        
        /// <summary>
        /// Test GetBook
        /// </summary>
        [Test]
        public void GetBookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetBook(id);
            //Assert.IsInstanceOf<WebBooksResponse1> (response, "response is WebBooksResponse1");
        }
        
        /// <summary>
        /// Test GetBookHtml
        /// </summary>
        [Test]
        public void GetBookHtmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetBookHtml(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetBookHtmlPost
        /// </summary>
        [Test]
        public void GetBookHtmlPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetBookHtmlPost(id);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetBooks
        /// </summary>
        [Test]
        public void GetBooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string details = null;
            //var response = instance.GetBooks(details);
            //Assert.IsInstanceOf<WebBooksResponse> (response, "response is WebBooksResponse");
        }
        
    }

}
