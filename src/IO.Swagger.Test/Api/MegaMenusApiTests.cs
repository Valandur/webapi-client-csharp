/* 
 * Web-API
 *
 * Access Sponge powered Minecraft servers through a WebAPI  # Introduction This is the documentation of the various API routes offered by the WebAPI plugin.  This documentation assumes that you are familiar with the basic concepts of Web API's, such as `GET`, `PUT`, `POST` and `DELETE` methods, request `HEADERS` and `RESPONSE CODES` and `JSON` data.  By default this documentation can be found at http:/localhost:8080 (while your minecraft server is running) and the various routes start with http:/localhost:8080/api/v5...  As a quick test try reaching the route http:/localhost:8080/api/v5/info (remember that you can only access \\\"localhost\\\" routes on the server on which you are running minecraft). This route should show you basic information about your server, like the motd and player count.  # List endpoints Lots of objects offer an endpoint to list all objects (e.g. `GET: /world` to get all worlds). These endpoints return only the properties marked 'required' by default, because the list might be quite large. If you want to return ALL data for a list endpoint add the query parameter `details`, (e.g. `GET: /world?details`).  > Remember that in this case the data returned by the endpoint might be quite large.  # Debugging endpoints Apart from the `?details` flag you can also pass some other flags for debugging purposes. Remember that you must include the first query parameter with `?`, and further ones with `&`:  `details`: Includes details for list endpoints  `accept=[json/xml]`: Manually set the accept content type. This is good for browser testing, **BUT DON'T USE THIS IN PRODUCTION, YOU CAN SUPPLY THE `Accepts` HEADER FOR THAT**  `pretty`: Pretty prints the data, also good for debugging in the browser.  An example request might look like this: `http://localhost:8080/api/v5/world?details&accpet=json&pretty&key=MY-API-KEY`  # Additional data Certain endpoints (such as `/player`, `/entity` and `/tile-entity` have additional properties which are not documented here, because the data depends on the concrete object type (eg. `Sheep` have a wool color, others do not) and on the other plugins/mods that are running on your server which might add additional data.  You can also find more information in the github docs (https:/github.com/Valandur/Web-API/tree/master/docs/DATA.md)
 *
 * OpenAPI spec version: 5.4.2-S7.1.0
 * Contact: inithilian@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MegaMenusApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MegaMenusApiTests
    {
        private MegaMenusApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MegaMenusApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MegaMenusApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MegaMenusApi
            //Assert.IsInstanceOfType(typeof(MegaMenusApi), instance, "instance is a MegaMenusApi");
        }

        
        /// <summary>
        /// Test AddElement
        /// </summary>
        [Test]
        public void AddElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //int? page = null;
            //int? y = null;
            //int? x = null;
            //MegaMenusElement body = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.AddElement(mid, page, y, x, body, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusElement> (response, "response is MegaMenusElement");
        }
        
        /// <summary>
        /// Test CloseRenderer
        /// </summary>
        [Test]
        public void CloseRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //Guid? viewer = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.CloseRenderer(mid, viewer, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusRenderer> (response, "response is MegaMenusRenderer");
        }
        
        /// <summary>
        /// Test CreateMenu
        /// </summary>
        [Test]
        public void CreateMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MenuMenusMenu body = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.CreateMenu(body, details, accept, pretty);
            //Assert.IsInstanceOf<MenuMenusMenu> (response, "response is MenuMenusMenu");
        }
        
        /// <summary>
        /// Test CreateRenderer
        /// </summary>
        [Test]
        public void CreateRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //MegaMenusRenderer body = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.CreateRenderer(mid, body, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusRenderer> (response, "response is MegaMenusRenderer");
        }
        
        /// <summary>
        /// Test DeleteElement
        /// </summary>
        [Test]
        public void DeleteElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //int? page = null;
            //int? x = null;
            //int? y = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.DeleteElement(mid, page, x, y, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusElement> (response, "response is MegaMenusElement");
        }
        
        /// <summary>
        /// Test DeleteMenu
        /// </summary>
        [Test]
        public void DeleteMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.DeleteMenu(mid, details, accept, pretty);
            //Assert.IsInstanceOf<MenuMenusMenu> (response, "response is MenuMenusMenu");
        }
        
        /// <summary>
        /// Test DeletePage
        /// </summary>
        [Test]
        public void DeletePageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //int? page = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.DeletePage(mid, page, details, accept, pretty);
            //Assert.IsInstanceOf<MenuMenusMenu> (response, "response is MenuMenusMenu");
        }
        
        /// <summary>
        /// Test DeleteRenderer
        /// </summary>
        [Test]
        public void DeleteRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.DeleteRenderer(mid, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusRenderer> (response, "response is MegaMenusRenderer");
        }
        
        /// <summary>
        /// Test FindRenderer
        /// </summary>
        [Test]
        public void FindRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? viewer = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.FindRenderer(viewer, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusRenderer> (response, "response is MegaMenusRenderer");
        }
        
        /// <summary>
        /// Test GetElement
        /// </summary>
        [Test]
        public void GetElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //int? page = null;
            //int? x = null;
            //int? y = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.GetElement(mid, page, x, y, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusElement> (response, "response is MegaMenusElement");
        }
        
        /// <summary>
        /// Test GetMenu
        /// </summary>
        [Test]
        public void GetMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.GetMenu(mid, details, accept, pretty);
            //Assert.IsInstanceOf<MenuMenusMenu> (response, "response is MenuMenusMenu");
        }
        
        /// <summary>
        /// Test GetPage
        /// </summary>
        [Test]
        public void GetPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //int? page = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.GetPage(mid, page, details, accept, pretty);
            //Assert.IsInstanceOf<List<MegaMenusElement>> (response, "response is List<MegaMenusElement>");
        }
        
        /// <summary>
        /// Test GetRenderer
        /// </summary>
        [Test]
        public void GetRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.GetRenderer(mid, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusRenderer> (response, "response is MegaMenusRenderer");
        }
        
        /// <summary>
        /// Test ListMenus
        /// </summary>
        [Test]
        public void ListMenusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.ListMenus(details, accept, pretty);
            //Assert.IsInstanceOf<List<MenuMenusMenu>> (response, "response is List<MenuMenusMenu>");
        }
        
        /// <summary>
        /// Test ListRenderer
        /// </summary>
        [Test]
        public void ListRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.ListRenderer(details, accept, pretty);
            //Assert.IsInstanceOf<List<MegaMenusRenderer>> (response, "response is List<MegaMenusRenderer>");
        }
        
        /// <summary>
        /// Test OpenRenderer
        /// </summary>
        [Test]
        public void OpenRendererTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //Guid? viewer = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.OpenRenderer(mid, viewer, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusRenderer> (response, "response is MegaMenusRenderer");
        }
        
        /// <summary>
        /// Test SetElement
        /// </summary>
        [Test]
        public void SetElementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //int? page = null;
            //int? x = null;
            //int? y = null;
            //MegaMenusElement body = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.SetElement(mid, page, x, y, body, details, accept, pretty);
            //Assert.IsInstanceOf<MegaMenusElement> (response, "response is MegaMenusElement");
        }
        
        /// <summary>
        /// Test SetMenu
        /// </summary>
        [Test]
        public void SetMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? mid = null;
            //MenuMenusMenu body = null;
            //bool? details = null;
            //string accept = null;
            //bool? pretty = null;
            //var response = instance.SetMenu(mid, body, details, accept, pretty);
            //Assert.IsInstanceOf<MenuMenusMenu> (response, "response is MenuMenusMenu");
        }
        
    }

}
